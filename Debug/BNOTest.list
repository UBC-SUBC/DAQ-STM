
BNOTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  0800b9d8  0800b9d8  0001b9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c76c  0800c76c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c76c  0800c76c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c76c  0800c76c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045a0  200001f4  0800c968  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004794  0800c968  00024794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a4f  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d09  00000000  00000000  00032c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00035978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2b2  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014079  00000000  00000000  00051baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac35  00000000  00000000  00065c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005534  00000000  00000000  000f08ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b9c0 	.word	0x0800b9c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800b9c0 	.word	0x0800b9c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <bno055_assignI2C+0x18>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20001630 	.word	0x20001630

08000aa4 <bno055_delay>:

void bno055_delay(int time) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fe98 	bl	80017e4 <HAL_Delay>
#endif
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	460a      	mov	r2, r1
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	733b      	strb	r3, [r7, #12]
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	; (8000c40 <bno055_writeData+0x184>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f107 020c 	add.w	r2, r7, #12
 8000adc:	230a      	movs	r3, #10
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	2150      	movs	r1, #80	; 0x50
 8000ae4:	f001 facc 	bl	8002080 <HAL_I2C_Master_Transmit>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80a0 	beq.w	8000c34 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d103      	bne.n	8000b02 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000afa:	4852      	ldr	r0, [pc, #328]	; (8000c44 <bno055_writeData+0x188>)
 8000afc:	f008 fd12 	bl	8009524 <puts>
 8000b00:	e012      	b.n	8000b28 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	d103      	bne.n	8000b10 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000b08:	484f      	ldr	r0, [pc, #316]	; (8000c48 <bno055_writeData+0x18c>)
 8000b0a:	f008 fd0b 	bl	8009524 <puts>
 8000b0e:	e00b      	b.n	8000b28 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d103      	bne.n	8000b1e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000b16:	484d      	ldr	r0, [pc, #308]	; (8000c4c <bno055_writeData+0x190>)
 8000b18:	f008 fd04 	bl	8009524 <puts>
 8000b1c:	e004      	b.n	8000b28 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
 8000b20:	4619      	mov	r1, r3
 8000b22:	484b      	ldr	r0, [pc, #300]	; (8000c50 <bno055_writeData+0x194>)
 8000b24:	f008 fc78 	bl	8009418 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000b28:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <bno055_writeData+0x184>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fe12 	bl	8002756 <HAL_I2C_GetError>
 8000b32:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d07e      	beq.n	8000c38 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d103      	bne.n	8000b48 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000b40:	4844      	ldr	r0, [pc, #272]	; (8000c54 <bno055_writeData+0x198>)
 8000b42:	f008 fcef 	bl	8009524 <puts>
 8000b46:	e021      	b.n	8000b8c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d103      	bne.n	8000b56 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000b4e:	4842      	ldr	r0, [pc, #264]	; (8000c58 <bno055_writeData+0x19c>)
 8000b50:	f008 fce8 	bl	8009524 <puts>
 8000b54:	e01a      	b.n	8000b8c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d103      	bne.n	8000b64 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000b5c:	483f      	ldr	r0, [pc, #252]	; (8000c5c <bno055_writeData+0x1a0>)
 8000b5e:	f008 fce1 	bl	8009524 <puts>
 8000b62:	e013      	b.n	8000b8c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	2b08      	cmp	r3, #8
 8000b68:	d103      	bne.n	8000b72 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000b6a:	483d      	ldr	r0, [pc, #244]	; (8000c60 <bno055_writeData+0x1a4>)
 8000b6c:	f008 fcda 	bl	8009524 <puts>
 8000b70:	e00c      	b.n	8000b8c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	2b10      	cmp	r3, #16
 8000b76:	d103      	bne.n	8000b80 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000b78:	483a      	ldr	r0, [pc, #232]	; (8000c64 <bno055_writeData+0x1a8>)
 8000b7a:	f008 fcd3 	bl	8009524 <puts>
 8000b7e:	e005      	b.n	8000b8c <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	2b20      	cmp	r3, #32
 8000b84:	d102      	bne.n	8000b8c <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000b86:	4838      	ldr	r0, [pc, #224]	; (8000c68 <bno055_writeData+0x1ac>)
 8000b88:	f008 fccc 	bl	8009524 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <bno055_writeData+0x184>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fdd3 	bl	800273c <HAL_I2C_GetState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d103      	bne.n	8000ba8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ba0:	4832      	ldr	r0, [pc, #200]	; (8000c6c <bno055_writeData+0x1b0>)
 8000ba2:	f008 fcbf 	bl	8009524 <puts>
 8000ba6:	e048      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d103      	bne.n	8000bb6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000bae:	482f      	ldr	r0, [pc, #188]	; (8000c6c <bno055_writeData+0x1b0>)
 8000bb0:	f008 fcb8 	bl	8009524 <puts>
 8000bb4:	e041      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	2b24      	cmp	r3, #36	; 0x24
 8000bba:	d103      	bne.n	8000bc4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000bbc:	482c      	ldr	r0, [pc, #176]	; (8000c70 <bno055_writeData+0x1b4>)
 8000bbe:	f008 fcb1 	bl	8009524 <puts>
 8000bc2:	e03a      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b21      	cmp	r3, #33	; 0x21
 8000bc8:	d103      	bne.n	8000bd2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000bca:	482a      	ldr	r0, [pc, #168]	; (8000c74 <bno055_writeData+0x1b8>)
 8000bcc:	f008 fcaa 	bl	8009524 <puts>
 8000bd0:	e033      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	2b22      	cmp	r3, #34	; 0x22
 8000bd6:	d103      	bne.n	8000be0 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000bd8:	4827      	ldr	r0, [pc, #156]	; (8000c78 <bno055_writeData+0x1bc>)
 8000bda:	f008 fca3 	bl	8009524 <puts>
 8000bde:	e02c      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b28      	cmp	r3, #40	; 0x28
 8000be4:	d103      	bne.n	8000bee <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000be6:	4825      	ldr	r0, [pc, #148]	; (8000c7c <bno055_writeData+0x1c0>)
 8000be8:	f008 fc9c 	bl	8009524 <puts>
 8000bec:	e025      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	2b29      	cmp	r3, #41	; 0x29
 8000bf2:	d103      	bne.n	8000bfc <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <bno055_writeData+0x1c4>)
 8000bf6:	f008 fc95 	bl	8009524 <puts>
 8000bfa:	e01e      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8000c00:	d103      	bne.n	8000c0a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000c02:	4820      	ldr	r0, [pc, #128]	; (8000c84 <bno055_writeData+0x1c8>)
 8000c04:	f008 fc8e 	bl	8009524 <puts>
 8000c08:	e017      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b60      	cmp	r3, #96	; 0x60
 8000c0e:	d103      	bne.n	8000c18 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <bno055_writeData+0x1cc>)
 8000c12:	f008 fc87 	bl	8009524 <puts>
 8000c16:	e010      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8000c1c:	d103      	bne.n	8000c26 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <bno055_writeData+0x1d0>)
 8000c20:	f008 fc80 	bl	8009524 <puts>
 8000c24:	e009      	b.n	8000c3a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	2be0      	cmp	r3, #224	; 0xe0
 8000c2a:	d106      	bne.n	8000c3a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <bno055_writeData+0x1d4>)
 8000c2e:	f008 fc79 	bl	8009524 <puts>
 8000c32:	e002      	b.n	8000c3a <bno055_writeData+0x17e>
    return;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <bno055_writeData+0x17e>
    return;
 8000c38:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20001630 	.word	0x20001630
 8000c44:	0800b9d8 	.word	0x0800b9d8
 8000c48:	0800b9fc 	.word	0x0800b9fc
 8000c4c:	0800ba24 	.word	0x0800ba24
 8000c50:	0800ba48 	.word	0x0800ba48
 8000c54:	0800ba60 	.word	0x0800ba60
 8000c58:	0800ba74 	.word	0x0800ba74
 8000c5c:	0800ba88 	.word	0x0800ba88
 8000c60:	0800ba9c 	.word	0x0800ba9c
 8000c64:	0800bab0 	.word	0x0800bab0
 8000c68:	0800bac4 	.word	0x0800bac4
 8000c6c:	0800badc 	.word	0x0800badc
 8000c70:	0800baf4 	.word	0x0800baf4
 8000c74:	0800bb08 	.word	0x0800bb08
 8000c78:	0800bb20 	.word	0x0800bb20
 8000c7c:	0800bb38 	.word	0x0800bb38
 8000c80:	0800bb50 	.word	0x0800bb50
 8000c84:	0800bb70 	.word	0x0800bb70
 8000c88:	0800bb90 	.word	0x0800bb90
 8000c8c:	0800bba8 	.word	0x0800bba8
 8000c90:	0800bbc0 	.word	0x0800bbc0

08000c94 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af02      	add	r7, sp, #8
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <bno055_readData+0x40>)
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	1dfa      	adds	r2, r7, #7
 8000caa:	2364      	movs	r3, #100	; 0x64
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2150      	movs	r1, #80	; 0x50
 8000cb2:	f001 f9e5 	bl	8002080 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <bno055_readData+0x40>)
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	2264      	movs	r2, #100	; 0x64
 8000cc0:	9200      	str	r2, [sp, #0]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	2150      	movs	r1, #80	; 0x50
 8000cc6:	f001 fad9 	bl	800227c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20001630 	.word	0x20001630

08000cd8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000cd8:	b40f      	push	{r0, r1, r2, r3}
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <myprintf+0x44>)
 8000cf0:	f008 fc4c 	bl	800958c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <myprintf+0x44>)
 8000cf6:	f7ff fa2b 	bl	8000150 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	4905      	ldr	r1, [pc, #20]	; (8000d1c <myprintf+0x44>)
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <myprintf+0x48>)
 8000d0a:	f002 ff8e 	bl	8003c2a <HAL_UART_Transmit>

}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr
 8000d1c:	20000210 	.word	0x20000210
 8000d20:	200016a0 	.word	0x200016a0

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b5b0      	push	{r4, r5, r7, lr}
 8000d26:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f000 fcf7 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f975 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d36:	f000 fa43 	bl	80011c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d3a:	f000 fa17 	bl	800116c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d3e:	f000 f9b1 	bl	80010a4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000d42:	f000 f9dd 	bl	8001100 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000d46:	f003 f943 	bl	8003fd0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8000d4a:	48a4      	ldr	r0, [pc, #656]	; (8000fdc <main+0x2b8>)
 8000d4c:	f7ff fe9c 	bl	8000a88 <bno055_assignI2C>
  bno055_setup();
 8000d50:	f003 f916 	bl	8003f80 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000d54:	f003 f901 	bl	8003f5a <bno055_setOperationModeNDOF>

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000d58:	48a1      	ldr	r0, [pc, #644]	; (8000fe0 <main+0x2bc>)
 8000d5a:	f7ff ffbd 	bl	8000cd8 <myprintf>

      HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f000 fd3f 	bl	80017e4 <HAL_Delay>
      FATFS FatFs; 	//Fatfs handle
      FIL fil; 		//File handle
      FRESULT fres; //Result after operations

      //Open the file system
      fres = f_mount(&FatFs, "", 1); //1=mount now
 8000d66:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8000d6a:	f103 0318 	add.w	r3, r3, #24
 8000d6e:	2201      	movs	r2, #1
 8000d70:	499c      	ldr	r1, [pc, #624]	; (8000fe4 <main+0x2c0>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f006 fbb8 	bl	80074e8 <f_mount>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000d7e:	f102 0217 	add.w	r2, r2, #23
 8000d82:	7013      	strb	r3, [r2, #0]
      if (fres != FR_OK) {
 8000d84:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d88:	f103 0317 	add.w	r3, r3, #23
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d009      	beq.n	8000da6 <main+0x82>
    	myprintf("f_mount error (%i)\r\n", fres);
 8000d92:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000d96:	f103 0317 	add.w	r3, r3, #23
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4892      	ldr	r0, [pc, #584]	; (8000fe8 <main+0x2c4>)
 8000da0:	f7ff ff9a 	bl	8000cd8 <myprintf>
    	while(1);
 8000da4:	e7fe      	b.n	8000da4 <main+0x80>
      //Let's get some statistics from the SD card
      DWORD free_clusters, free_sectors, total_sectors;

      FATFS* getFreeFs;

      fres = f_getfree("", &free_clusters, &getFreeFs);
 8000da6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000daa:	3a34      	subs	r2, #52	; 0x34
 8000dac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000db0:	3b30      	subs	r3, #48	; 0x30
 8000db2:	4619      	mov	r1, r3
 8000db4:	488b      	ldr	r0, [pc, #556]	; (8000fe4 <main+0x2c0>)
 8000db6:	f007 fcad 	bl	8008714 <f_getfree>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000dc0:	f102 0217 	add.w	r2, r2, #23
 8000dc4:	7013      	strb	r3, [r2, #0]
      if (fres != FR_OK) {
 8000dc6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000dca:	f103 0317 	add.w	r3, r3, #23
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d009      	beq.n	8000de8 <main+0xc4>
    	myprintf("f_getfree error (%i)\r\n", fres);
 8000dd4:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000dd8:	f103 0317 	add.w	r3, r3, #23
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	4882      	ldr	r0, [pc, #520]	; (8000fec <main+0x2c8>)
 8000de2:	f7ff ff79 	bl	8000cd8 <myprintf>
    	while(1);
 8000de6:	e7fe      	b.n	8000de6 <main+0xc2>
      }

      //Formula comes from ChaN's documentation
      total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000de8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dec:	3b34      	subs	r3, #52	; 0x34
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000df4:	3314      	adds	r3, #20
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	1e9a      	subs	r2, r3, #2
 8000dfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dfe:	3b34      	subs	r3, #52	; 0x34
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e06:	3302      	adds	r3, #2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	fb03 f302 	mul.w	r3, r3, r2
 8000e0e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000e12:	f102 0210 	add.w	r2, r2, #16
 8000e16:	6013      	str	r3, [r2, #0]
      free_sectors = free_clusters * getFreeFs->csize;
 8000e18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1c:	3b34      	subs	r3, #52	; 0x34
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e24:	3302      	adds	r3, #2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e2e:	3b30      	subs	r3, #48	; 0x30
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	fb03 f302 	mul.w	r3, r3, r2
 8000e36:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000e3a:	f102 020c 	add.w	r2, r2, #12
 8000e3e:	6013      	str	r3, [r2, #0]

      myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000e40:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000e44:	f103 0310 	add.w	r3, r3, #16
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	0859      	lsrs	r1, r3, #1
 8000e4c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000e50:	f103 030c 	add.w	r3, r3, #12
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4865      	ldr	r0, [pc, #404]	; (8000ff0 <main+0x2cc>)
 8000e5c:	f7ff ff3c 	bl	8000cd8 <myprintf>

      //Now let's try to open file "test.txt"
      fres = f_open(&fil, "test.txt", FA_READ);
 8000e60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e64:	3b2c      	subs	r3, #44	; 0x2c
 8000e66:	2201      	movs	r2, #1
 8000e68:	4962      	ldr	r1, [pc, #392]	; (8000ff4 <main+0x2d0>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f006 fb86 	bl	800757c <f_open>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000e76:	f102 0217 	add.w	r2, r2, #23
 8000e7a:	7013      	strb	r3, [r2, #0]
      if (fres != FR_OK) {
 8000e7c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000e80:	f103 0317 	add.w	r3, r3, #23
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d009      	beq.n	8000e9e <main+0x17a>
    	myprintf("f_open error (%i)\r\n", fres);
 8000e8a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000e8e:	f103 0317 	add.w	r3, r3, #23
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	4858      	ldr	r0, [pc, #352]	; (8000ff8 <main+0x2d4>)
 8000e98:	f7ff ff1e 	bl	8000cd8 <myprintf>
    	while(1);
 8000e9c:	e7fe      	b.n	8000e9c <main+0x178>
      }
      myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000e9e:	4857      	ldr	r0, [pc, #348]	; (8000ffc <main+0x2d8>)
 8000ea0:	f7ff ff1a 	bl	8000cd8 <myprintf>
      //Read 30 bytes from "test.txt" on the SD card
      BYTE readBuf[30];

      //We can either use f_read OR f_gets to get data out of files
      //f_gets is a wrapper on f_read that does some string formatting for us
      TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000ea4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ea8:	3a2c      	subs	r2, #44	; 0x2c
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	3b14      	subs	r3, #20
 8000eb0:	211e      	movs	r1, #30
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f007 fd10 	bl	80088d8 <f_gets>
 8000eb8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ebc:	f103 0308 	add.w	r3, r3, #8
 8000ec0:	6018      	str	r0, [r3, #0]
      if(rres != 0) {
 8000ec2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ec6:	f103 0308 	add.w	r3, r3, #8
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <main+0x1bc>
    	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	3b14      	subs	r3, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4849      	ldr	r0, [pc, #292]	; (8001000 <main+0x2dc>)
 8000eda:	f7ff fefd 	bl	8000cd8 <myprintf>
 8000ede:	e008      	b.n	8000ef2 <main+0x1ce>
      } else {
    	myprintf("f_gets error (%i)\r\n", fres);
 8000ee0:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000ee4:	f103 0317 	add.w	r3, r3, #23
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4619      	mov	r1, r3
 8000eec:	4845      	ldr	r0, [pc, #276]	; (8001004 <main+0x2e0>)
 8000eee:	f7ff fef3 	bl	8000cd8 <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 8000ef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ef6:	3b2c      	subs	r3, #44	; 0x2c
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fbe0 	bl	80086be <f_close>

      //Now let's try and write a file "write.txt"
      fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000efe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f02:	3b2c      	subs	r3, #44	; 0x2c
 8000f04:	221a      	movs	r2, #26
 8000f06:	4940      	ldr	r1, [pc, #256]	; (8001008 <main+0x2e4>)
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f006 fb37 	bl	800757c <f_open>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000f14:	f102 0217 	add.w	r2, r2, #23
 8000f18:	7013      	strb	r3, [r2, #0]
      if(fres == FR_OK) {
 8000f1a:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000f1e:	f103 0317 	add.w	r3, r3, #23
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d103      	bne.n	8000f30 <main+0x20c>
    	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000f28:	4838      	ldr	r0, [pc, #224]	; (800100c <main+0x2e8>)
 8000f2a:	f7ff fed5 	bl	8000cd8 <myprintf>
 8000f2e:	e008      	b.n	8000f42 <main+0x21e>
      } else {
    	myprintf("f_open error (%i)\r\n", fres);
 8000f30:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000f34:	f103 0317 	add.w	r3, r3, #23
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482e      	ldr	r0, [pc, #184]	; (8000ff8 <main+0x2d4>)
 8000f3e:	f7ff fecb 	bl	8000cd8 <myprintf>
      }

      //Copy in a string
      strncpy((char*)readBuf, "a new file is made!", 19);
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	3b14      	subs	r3, #20
 8000f48:	4a31      	ldr	r2, [pc, #196]	; (8001010 <main+0x2ec>)
 8000f4a:	461c      	mov	r4, r3
 8000f4c:	4615      	mov	r5, r2
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	682b      	ldr	r3, [r5, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	8022      	strh	r2, [r4, #0]
 8000f58:	3402      	adds	r4, #2
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	7023      	strb	r3, [r4, #0]
      UINT bytesWrote;
      fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	3b18      	subs	r3, #24
 8000f64:	f107 0118 	add.w	r1, r7, #24
 8000f68:	3914      	subs	r1, #20
 8000f6a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000f6e:	382c      	subs	r0, #44	; 0x2c
 8000f70:	2213      	movs	r2, #19
 8000f72:	f007 f853 	bl	800801c <f_write>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000f7c:	f102 0217 	add.w	r2, r2, #23
 8000f80:	7013      	strb	r3, [r2, #0]
      if(fres == FR_OK) {
 8000f82:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000f86:	f103 0317 	add.w	r3, r3, #23
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d108      	bne.n	8000fa2 <main+0x27e>
    	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	3b18      	subs	r3, #24
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481e      	ldr	r0, [pc, #120]	; (8001014 <main+0x2f0>)
 8000f9c:	f7ff fe9c 	bl	8000cd8 <myprintf>
 8000fa0:	e008      	b.n	8000fb4 <main+0x290>
      } else {
    	myprintf("f_write error (%i)\r\n", fres);
 8000fa2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000fa6:	f103 0317 	add.w	r3, r3, #23
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <main+0x2f4>)
 8000fb0:	f7ff fe92 	bl	8000cd8 <myprintf>
      }

      //Be a tidy kiwi - don't forget to close your file!
      f_close(&fil);
 8000fb4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fb8:	3b2c      	subs	r3, #44	; 0x2c
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 fb7f 	bl	80086be <f_close>

      //We're done, so de-mount the drive
      f_mount(NULL, "", 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <main+0x2c0>)
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f006 fa8f 	bl	80074e8 <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4813      	ldr	r0, [pc, #76]	; (800101c <main+0x2f8>)
 8000fce:	f000 fed7 	bl	8001d80 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f000 fc05 	bl	80017e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fda:	e7f6      	b.n	8000fca <main+0x2a6>
 8000fdc:	200015d8 	.word	0x200015d8
 8000fe0:	0800bbd8 	.word	0x0800bbd8
 8000fe4:	0800bbf8 	.word	0x0800bbf8
 8000fe8:	0800bbfc 	.word	0x0800bbfc
 8000fec:	0800bc14 	.word	0x0800bc14
 8000ff0:	0800bc2c 	.word	0x0800bc2c
 8000ff4:	0800bc74 	.word	0x0800bc74
 8000ff8:	0800bc80 	.word	0x0800bc80
 8000ffc:	0800bc94 	.word	0x0800bc94
 8001000:	0800bcc4 	.word	0x0800bcc4
 8001004:	0800bcf0 	.word	0x0800bcf0
 8001008:	0800bd04 	.word	0x0800bd04
 800100c:	0800bd10 	.word	0x0800bd10
 8001010:	0800bd40 	.word	0x0800bd40
 8001014:	0800bd54 	.word	0x0800bd54
 8001018:	0800bd78 	.word	0x0800bd78
 800101c:	40010800 	.word	0x40010800

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2228      	movs	r2, #40	; 0x28
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f007 fd8a 	bl	8008b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001046:	2301      	movs	r3, #1
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001056:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f001 feaf 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800106c:	f000 f92c 	bl	80012c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	230f      	movs	r3, #15
 8001072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001074:	2302      	movs	r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2102      	movs	r1, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f91a 	bl	80032c4 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001096:	f000 f917 	bl	80012c8 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3740      	adds	r7, #64	; 0x40
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f000 fe89 	bl	8001df8 <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 f8ec 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200015d8 	.word	0x200015d8
 80010f8:	40005400 	.word	0x40005400
 80010fc:	00061a80 	.word	0x00061a80

08001100 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_SPI2_Init+0x64>)
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <MX_SPI2_Init+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_SPI2_Init+0x64>)
 800110c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001110:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_SPI2_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_SPI2_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_SPI2_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_SPI2_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_SPI2_Init+0x64>)
 800112c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001130:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_SPI2_Init+0x64>)
 8001134:	2230      	movs	r2, #48	; 0x30
 8001136:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_SPI2_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_SPI2_Init+0x64>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_SPI2_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_SPI2_Init+0x64>)
 800114c:	220a      	movs	r2, #10
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_SPI2_Init+0x64>)
 8001152:	f002 fa51 	bl	80035f8 <HAL_SPI_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800115c:	f000 f8b4 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000550 	.word	0x20000550
 8001168:	40003800 	.word	0x40003800

0800116c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_USART2_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART2_UART_Init+0x4c>)
 80011a4:	f002 fcf4 	bl	8003b90 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f000 f88b 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200016a0 	.word	0x200016a0
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MX_GPIO_Init+0xf4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <MX_GPIO_Init+0xf4>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <MX_GPIO_Init+0xf4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ec:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <MX_GPIO_Init+0xf4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a30      	ldr	r2, [pc, #192]	; (80012b4 <MX_GPIO_Init+0xf4>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <MX_GPIO_Init+0xf4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <MX_GPIO_Init+0xf4>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <MX_GPIO_Init+0xf4>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_GPIO_Init+0xf4>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_GPIO_Init+0xf4>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <MX_GPIO_Init+0xf4>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_GPIO_Init+0xf4>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2120      	movs	r1, #32
 8001238:	481f      	ldr	r0, [pc, #124]	; (80012b8 <MX_GPIO_Init+0xf8>)
 800123a:	f000 fd89 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2102      	movs	r1, #2
 8001242:	481e      	ldr	r0, [pc, #120]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001244:	f000 fd84 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001248:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_GPIO_Init+0x100>)
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	4819      	ldr	r0, [pc, #100]	; (80012c4 <MX_GPIO_Init+0x104>)
 800125e:	f000 fbf3 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001262:	2320      	movs	r3, #32
 8001264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2302      	movs	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_GPIO_Init+0xf8>)
 800127a:	f000 fbe5 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800127e:	2302      	movs	r3, #2
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2302      	movs	r3, #2
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_GPIO_Init+0xfc>)
 8001296:	f000 fbd7 	bl	8001a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2028      	movs	r0, #40	; 0x28
 80012a0:	f000 fb9b 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012a4:	2028      	movs	r0, #40	; 0x28
 80012a6:	f000 fbb4 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3720      	adds	r7, #32
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40011000 	.word	0x40011000

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x4>
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_MspInit+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x5c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x60>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_MspInit+0x60>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000

08001334 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <HAL_I2C_MspInit+0x90>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d132      	bne.n	80013ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <HAL_I2C_MspInit+0x94>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <HAL_I2C_MspInit+0x94>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <HAL_I2C_MspInit+0x94>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800136c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001372:	2312      	movs	r3, #18
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4812      	ldr	r0, [pc, #72]	; (80013cc <HAL_I2C_MspInit+0x98>)
 8001382:	f000 fb61 	bl	8001a48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_I2C_MspInit+0x9c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_I2C_MspInit+0x9c>)
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_I2C_MspInit+0x94>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_I2C_MspInit+0x94>)
 80013a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_I2C_MspInit+0x94>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40005400 	.word	0x40005400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010c00 	.word	0x40010c00
 80013d0:	40010000 	.word	0x40010000

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_SPI_MspInit+0x8c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d131      	bne.n	8001458 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_SPI_MspInit+0x90>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_SPI_MspInit+0x90>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_SPI_MspInit+0x90>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <HAL_SPI_MspInit+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <HAL_SPI_MspInit+0x90>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_SPI_MspInit+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001424:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001428:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	480b      	ldr	r0, [pc, #44]	; (8001468 <HAL_SPI_MspInit+0x94>)
 800143a:	f000 fb05 	bl	8001a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800143e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_SPI_MspInit+0x94>)
 8001454:	f000 faf8 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3720      	adds	r7, #32
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40003800 	.word	0x40003800
 8001464:	40021000 	.word	0x40021000
 8001468:	40010c00 	.word	0x40010c00

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <HAL_UART_MspInit+0x70>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d123      	bne.n	80014d4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_UART_MspInit+0x74>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <HAL_UART_MspInit+0x74>)
 8001492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001496:	61d3      	str	r3, [r2, #28]
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_UART_MspInit+0x74>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_UART_MspInit+0x74>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_UART_MspInit+0x74>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_UART_MspInit+0x74>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014bc:	230c      	movs	r3, #12
 80014be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	4619      	mov	r1, r3
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <HAL_UART_MspInit+0x78>)
 80014d0:	f000 faba 	bl	8001a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3720      	adds	r7, #32
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40004400 	.word	0x40004400
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f93d 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}

08001536 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800153a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800153e:	f000 fc39 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}

08001546 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
	return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <_kill>:

int _kill(int pid, int sig)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800155e:	f007 fabb 	bl	8008ad8 <__errno>
 8001562:	4603      	mov	r3, r0
 8001564:	2216      	movs	r2, #22
 8001566:	601a      	str	r2, [r3, #0]
	return -1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_exit>:

void _exit (int status)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffe7 	bl	8001554 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001586:	e7fe      	b.n	8001586 <_exit+0x12>

08001588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e00a      	b.n	80015b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800159a:	f3af 8000 	nop.w
 800159e:	4601      	mov	r1, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	b2ca      	uxtb	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf0      	blt.n	800159a <_read+0x12>
	}

return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e009      	b.n	80015e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf1      	blt.n	80015d4 <_write+0x12>
	}
	return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_close>:

int _close(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	605a      	str	r2, [r3, #4]
	return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_isatty>:

int _isatty(int file)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
	return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f007 fa24 	bl	8008ad8 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20005000 	.word	0x20005000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	20000310 	.word	0x20000310
 80016c4:	20004798 	.word	0x20004798

080016c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	; (8001718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016fa:	f7ff ffe5 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fe:	f007 f9f1 	bl	8008ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001702:	f7ff fb0f 	bl	8000d24 <main>
  bx lr
 8001706:	4770      	bx	lr
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001710:	0800c774 	.word	0x0800c774
  ldr r2, =_sbss
 8001714:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001718:	20004794 	.word	0x20004794

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_Init+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_Init+0x28>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001730:	2003      	movs	r0, #3
 8001732:	f000 f947 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001736:	2000      	movs	r0, #0
 8001738:	f000 f808 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800173c:	f7ff fdc8 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40022000 	.word	0x40022000

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x54>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f95f 	bl	8001a2e <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f927 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x5c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_IncTick+0x1c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x20>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a03      	ldr	r2, [pc, #12]	; (80017cc <HAL_IncTick+0x20>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20002714 	.word	0x20002714

080017d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <HAL_GetTick+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	20002714 	.word	0x20002714

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff fff0 	bl	80017d0 <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffe0 	bl	80017d0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000008 	.word	0x20000008

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4906      	ldr	r1, [pc, #24]	; (80018c4 <__NVIC_EnableIRQ+0x34>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff90 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff2d 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff42 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff90 	bl	800191c <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5f 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff35 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	e169      	b.n	8001d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8158 	bne.w	8001d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a9a      	ldr	r2, [pc, #616]	; (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d05e      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a84:	4a98      	ldr	r2, [pc, #608]	; (8001ce8 <HAL_GPIO_Init+0x2a0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d875      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a8a:	4a98      	ldr	r2, [pc, #608]	; (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d058      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a90:	4a96      	ldr	r2, [pc, #600]	; (8001cec <HAL_GPIO_Init+0x2a4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d86f      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a96:	4a96      	ldr	r2, [pc, #600]	; (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d052      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a94      	ldr	r2, [pc, #592]	; (8001cf0 <HAL_GPIO_Init+0x2a8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d869      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a94      	ldr	r2, [pc, #592]	; (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04c      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a92      	ldr	r2, [pc, #584]	; (8001cf4 <HAL_GPIO_Init+0x2ac>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d863      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aae:	4a92      	ldr	r2, [pc, #584]	; (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d046      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a90      	ldr	r2, [pc, #576]	; (8001cf8 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d85d      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d82a      	bhi.n	8001b14 <HAL_GPIO_Init+0xcc>
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d859      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_GPIO_Init+0x80>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b43 	.word	0x08001b43
 8001acc:	08001b1d 	.word	0x08001b1d
 8001ad0:	08001b2f 	.word	0x08001b2f
 8001ad4:	08001b71 	.word	0x08001b71
 8001ad8:	08001b77 	.word	0x08001b77
 8001adc:	08001b77 	.word	0x08001b77
 8001ae0:	08001b77 	.word	0x08001b77
 8001ae4:	08001b77 	.word	0x08001b77
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b77 	.word	0x08001b77
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b77 	.word	0x08001b77
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b77 	.word	0x08001b77
 8001b04:	08001b77 	.word	0x08001b77
 8001b08:	08001b77 	.word	0x08001b77
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b39 	.word	0x08001b39
 8001b14:	4a79      	ldr	r2, [pc, #484]	; (8001cfc <HAL_GPIO_Init+0x2b4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1a:	e02c      	b.n	8001b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e029      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e024      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e01f      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e01a      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e013      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	611a      	str	r2, [r3, #16]
          break;
 8001b62:	e009      	b.n	8001b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
          break;
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          break;
 8001b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d801      	bhi.n	8001b82 <HAL_GPIO_Init+0x13a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_Init+0x13e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d802      	bhi.n	8001b94 <HAL_GPIO_Init+0x14c>
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x152>
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3b08      	subs	r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80b1 	beq.w	8001d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b4a      	ldr	r3, [pc, #296]	; (8001d00 <HAL_GPIO_Init+0x2b8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be0:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a40      	ldr	r2, [pc, #256]	; (8001d08 <HAL_GPIO_Init+0x2c0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x1ec>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1e8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3e      	ldr	r2, [pc, #248]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1e4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a3d      	ldr	r2, [pc, #244]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e004      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e002      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_GPIO_Init+0x1ee>
 8001c34:	2300      	movs	r3, #0
 8001c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c38:	f002 0203 	and.w	r2, r2, #3
 8001c3c:	0092      	lsls	r2, r2, #2
 8001c3e:	4093      	lsls	r3, r2
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c46:	492f      	ldr	r1, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x2bc>)
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	492c      	ldr	r1, [pc, #176]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4928      	ldr	r1, [pc, #160]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4922      	ldr	r1, [pc, #136]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	491e      	ldr	r1, [pc, #120]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4918      	ldr	r1, [pc, #96]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	608b      	str	r3, [r1, #8]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4914      	ldr	r1, [pc, #80]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d021      	beq.n	8001d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	490e      	ldr	r1, [pc, #56]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60cb      	str	r3, [r1, #12]
 8001ce4:	e021      	b.n	8001d2a <HAL_GPIO_Init+0x2e2>
 8001ce6:	bf00      	nop
 8001ce8:	10320000 	.word	0x10320000
 8001cec:	10310000 	.word	0x10310000
 8001cf0:	10220000 	.word	0x10220000
 8001cf4:	10210000 	.word	0x10210000
 8001cf8:	10120000 	.word	0x10120000
 8001cfc:	10110000 	.word	0x10110000
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	40010800 	.word	0x40010800
 8001d0c:	40010c00 	.word	0x40010c00
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40011400 	.word	0x40011400
 8001d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4909      	ldr	r1, [pc, #36]	; (8001d4c <HAL_GPIO_Init+0x304>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f ae8e 	bne.w	8001a5c <HAL_GPIO_Init+0x14>
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	372c      	adds	r7, #44	; 0x2c
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43d9      	mvns	r1, r3
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	400b      	ands	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	611a      	str	r2, [r3, #16]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f806 	bl	8001de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e12b      	b.n	8002062 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff fa88 	bl	8001334 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	; 0x24
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e5c:	f001 fb86 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8001e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a81      	ldr	r2, [pc, #516]	; (800206c <HAL_I2C_Init+0x274>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d807      	bhi.n	8001e7c <HAL_I2C_Init+0x84>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4a80      	ldr	r2, [pc, #512]	; (8002070 <HAL_I2C_Init+0x278>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bf94      	ite	ls
 8001e74:	2301      	movls	r3, #1
 8001e76:	2300      	movhi	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	e006      	b.n	8001e8a <HAL_I2C_Init+0x92>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4a7d      	ldr	r2, [pc, #500]	; (8002074 <HAL_I2C_Init+0x27c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	bf94      	ite	ls
 8001e84:	2301      	movls	r3, #1
 8001e86:	2300      	movhi	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0e7      	b.n	8002062 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4a78      	ldr	r2, [pc, #480]	; (8002078 <HAL_I2C_Init+0x280>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_I2C_Init+0x274>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d802      	bhi.n	8001ecc <HAL_I2C_Init+0xd4>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	e009      	b.n	8001ee0 <HAL_I2C_Init+0xe8>
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a69      	ldr	r2, [pc, #420]	; (800207c <HAL_I2C_Init+0x284>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	3301      	adds	r3, #1
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ef2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	495c      	ldr	r1, [pc, #368]	; (800206c <HAL_I2C_Init+0x274>)
 8001efc:	428b      	cmp	r3, r1
 8001efe:	d819      	bhi.n	8001f34 <HAL_I2C_Init+0x13c>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e59      	subs	r1, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f0e:	1c59      	adds	r1, r3, #1
 8001f10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f14:	400b      	ands	r3, r1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_I2C_Init+0x138>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e59      	subs	r1, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	e051      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001f30:	2304      	movs	r3, #4
 8001f32:	e04f      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_I2C_Init+0x168>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e58      	subs	r0, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	e012      	b.n	8001f86 <HAL_I2C_Init+0x18e>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e58      	subs	r0, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	0099      	lsls	r1, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bf0c      	ite	eq
 8001f80:	2301      	moveq	r3, #1
 8001f82:	2300      	movne	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Init+0x196>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e022      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10e      	bne.n	8001fb4 <HAL_I2C_Init+0x1bc>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1e58      	subs	r0, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa8:	3301      	adds	r3, #1
 8001faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	e00f      	b.n	8001fd4 <HAL_I2C_Init+0x1dc>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e58      	subs	r0, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	0099      	lsls	r1, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	6809      	ldr	r1, [r1, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69da      	ldr	r2, [r3, #28]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6911      	ldr	r1, [r2, #16]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68d2      	ldr	r2, [r2, #12]
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	430b      	orrs	r3, r1
 8002016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	000186a0 	.word	0x000186a0
 8002070:	001e847f 	.word	0x001e847f
 8002074:	003d08ff 	.word	0x003d08ff
 8002078:	431bde83 	.word	0x431bde83
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	461a      	mov	r2, r3
 800208c:	460b      	mov	r3, r1
 800208e:	817b      	strh	r3, [r7, #10]
 8002090:	4613      	mov	r3, r2
 8002092:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fb9c 	bl	80017d0 <HAL_GetTick>
 8002098:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	f040 80e0 	bne.w	8002268 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2319      	movs	r3, #25
 80020ae:	2201      	movs	r2, #1
 80020b0:	4970      	ldr	r1, [pc, #448]	; (8002274 <HAL_I2C_Master_Transmit+0x1f4>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fcaa 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020be:	2302      	movs	r3, #2
 80020c0:	e0d3      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2C_Master_Transmit+0x50>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0cc      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d007      	beq.n	80020f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002104:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2221      	movs	r2, #33	; 0x21
 800210a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2210      	movs	r2, #16
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	893a      	ldrh	r2, [r7, #8]
 8002126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4a50      	ldr	r2, [pc, #320]	; (8002278 <HAL_I2C_Master_Transmit+0x1f8>)
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6a3a      	ldr	r2, [r7, #32]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fb14 	bl	800276c <I2C_MasterRequestWrite>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e08d      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002164:	e066      	b.n	8002234 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	6a39      	ldr	r1, [r7, #32]
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fd24 	bl	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00d      	beq.n	8002192 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b04      	cmp	r3, #4
 800217c:	d107      	bne.n	800218e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06b      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	781a      	ldrb	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d11b      	bne.n	8002208 <HAL_I2C_Master_Transmit+0x188>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d017      	beq.n	8002208 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	6a39      	ldr	r1, [r7, #32]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fd14 	bl	8002c3a <I2C_WaitOnBTFFlagUntilTimeout>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	2b04      	cmp	r3, #4
 800221e:	d107      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e01a      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d194      	bne.n	8002166 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	00100002 	.word	0x00100002
 8002278:	ffff0000 	.word	0xffff0000

0800227c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
 800228c:	4613      	mov	r3, r2
 800228e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fa9c 	bl	80017d0 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 823f 	bne.w	8002726 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2319      	movs	r3, #25
 80022ae:	2201      	movs	r2, #1
 80022b0:	497f      	ldr	r1, [pc, #508]	; (80024b0 <HAL_I2C_Master_Receive+0x234>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fbaa 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e232      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Receive+0x54>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e22b      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2222      	movs	r2, #34	; 0x22
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a5f      	ldr	r2, [pc, #380]	; (80024b4 <HAL_I2C_Master_Receive+0x238>)
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa96 	bl	8002870 <I2C_MasterRequestRead>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1ec      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e1c0      	b.n	8002700 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	2b01      	cmp	r3, #1
 8002384:	d11e      	bne.n	80023c4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002394:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002396:	b672      	cpsid	i
}
 8002398:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023c0:	b662      	cpsie	i
}
 80023c2:	e035      	b.n	8002430 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d11e      	bne.n	800240a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002404:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002406:	b662      	cpsie	i
}
 8002408:	e012      	b.n	8002430 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002430:	e166      	b.n	8002700 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	2b03      	cmp	r3, #3
 8002438:	f200 811f 	bhi.w	800267a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	2b01      	cmp	r3, #1
 8002442:	d123      	bne.n	800248c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fc37 	bl	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e167      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
 800248a:	e139      	b.n	8002700 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b02      	cmp	r3, #2
 8002492:	d152      	bne.n	800253a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	4906      	ldr	r1, [pc, #24]	; (80024b8 <HAL_I2C_Master_Receive+0x23c>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fab4 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e13c      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
 80024ae:	bf00      	nop
 80024b0:	00100002 	.word	0x00100002
 80024b4:	ffff0000 	.word	0xffff0000
 80024b8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80024bc:	b672      	cpsid	i
}
 80024be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002502:	b662      	cpsie	i
}
 8002504:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002538:	e0e2      	b.n	8002700 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002540:	2200      	movs	r2, #0
 8002542:	497b      	ldr	r1, [pc, #492]	; (8002730 <HAL_I2C_Master_Receive+0x4b4>)
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa61 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0e9      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002562:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800259a:	4b66      	ldr	r3, [pc, #408]	; (8002734 <HAL_I2C_Master_Receive+0x4b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	4a65      	ldr	r2, [pc, #404]	; (8002738 <HAL_I2C_Master_Receive+0x4bc>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0a1a      	lsrs	r2, r3, #8
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00da      	lsls	r2, r3, #3
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d118      	bne.n	80025f2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80025e2:	b662      	cpsie	i
}
 80025e4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e09a      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d1d9      	bne.n	80025b4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002642:	b662      	cpsie	i
}
 8002644:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002678:	e042      	b.n	8002700 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fb1c 	bl	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e04c      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d118      	bne.n	8002700 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f ae94 	bne.w	8002432 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00010004 	.word	0x00010004
 8002734:	20000000 	.word	0x20000000
 8002738:	14f8b589 	.word	0x14f8b589

0800273c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d006      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d003      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002794:	d108      	bne.n	80027a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00b      	b.n	80027c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d107      	bne.n	80027c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f91d 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e035      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	e01b      	b.n	8002848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <I2C_MasterRequestWrite+0xfc>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f943 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e010      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <I2C_MasterRequestWrite+0x100>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f933 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	460b      	mov	r3, r1
 800287e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002894:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d006      	beq.n	80028aa <I2C_MasterRequestRead+0x3a>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d003      	beq.n	80028aa <I2C_MasterRequestRead+0x3a>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028a8:	d108      	bne.n	80028bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e00b      	b.n	80028d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	2b11      	cmp	r3, #17
 80028c2:	d107      	bne.n	80028d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f893 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fa:	d103      	bne.n	8002904 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e079      	b.n	80029fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002910:	d108      	bne.n	8002924 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	e05f      	b.n	80029e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	11db      	asrs	r3, r3, #7
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 0306 	and.w	r3, r3, #6
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f063 030f 	orn	r3, r3, #15
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4930      	ldr	r1, [pc, #192]	; (8002a04 <I2C_MasterRequestRead+0x194>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f8b9 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e054      	b.n	80029fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4929      	ldr	r1, [pc, #164]	; (8002a08 <I2C_MasterRequestRead+0x198>)
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f8a9 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e044      	b.n	80029fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002996:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 f831 	bl	8002a0c <I2C_WaitOnFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00d      	beq.n	80029cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029be:	d103      	bne.n	80029c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e017      	b.n	80029fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	11db      	asrs	r3, r3, #7
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f003 0306 	and.w	r3, r3, #6
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f063 030e 	orn	r3, r3, #14
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <I2C_MasterRequestRead+0x198>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f865 	bl	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	00010008 	.word	0x00010008
 8002a08:	00010002 	.word	0x00010002

08002a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	603b      	str	r3, [r7, #0]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a1c:	e025      	b.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a24:	d021      	beq.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7fe fed3 	bl	80017d0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d302      	bcc.n	8002a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d116      	bne.n	8002a6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e023      	b.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10d      	bne.n	8002a90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	e00c      	b.n	8002aaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d0b6      	beq.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac8:	e051      	b.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad8:	d123      	bne.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f043 0204 	orr.w	r2, r3, #4
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e046      	b.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d021      	beq.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7fe fe51 	bl	80017d0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d116      	bne.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e020      	b.n	8002bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d10c      	bne.n	8002b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	bf14      	ite	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	2300      	moveq	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e00b      	b.n	8002baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d18d      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc4:	e02d      	b.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f8ce 	bl	8002d68 <I2C_IsAcknowledgeFailed>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e02d      	b.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d021      	beq.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bde:	f7fe fdf7 	bl	80017d0 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d302      	bcc.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0220 	orr.w	r2, r3, #32
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d1ca      	bne.n	8002bc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c46:	e02d      	b.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f88d 	bl	8002d68 <I2C_IsAcknowledgeFailed>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e02d      	b.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d021      	beq.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fdb6 	bl	80017d0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e007      	b.n	8002cb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d1ca      	bne.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc8:	e042      	b.n	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d119      	bne.n	8002d0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0210 	mvn.w	r2, #16
 8002ce0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e029      	b.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0c:	f7fe fd60 	bl	80017d0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d302      	bcc.n	8002d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e007      	b.n	8002d60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d1b5      	bne.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d11b      	bne.n	8002db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e26c      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8087 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de4:	4b92      	ldr	r3, [pc, #584]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df0:	4b8f      	ldr	r3, [pc, #572]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d112      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d10b      	bne.n	8002e22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0a:	4b89      	ldr	r3, [pc, #548]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d168      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e246      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x76>
 8002e2c:	4b80      	ldr	r3, [pc, #512]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a7f      	ldr	r2, [pc, #508]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	e02e      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x98>
 8002e42:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7a      	ldr	r2, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b78      	ldr	r3, [pc, #480]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a77      	ldr	r2, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e01d      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0xbc>
 8002e66:	4b72      	ldr	r3, [pc, #456]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a71      	ldr	r2, [pc, #452]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6e      	ldr	r2, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0xd4>
 8002e80:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6a      	ldr	r2, [pc, #424]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b68      	ldr	r3, [pc, #416]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a67      	ldr	r2, [pc, #412]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d013      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fc96 	bl	80017d0 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7fe fc92 	bl	80017d0 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1fa      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe4>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fc82 	bl	80017d0 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fc7e 	bl	80017d0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b64      	cmp	r3, #100	; 0x64
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1e6      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x10c>
 8002eee:	e000      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002efe:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f0a:	4b49      	ldr	r3, [pc, #292]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d116      	bne.n	8002f50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e1ba      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4939      	ldr	r1, [pc, #228]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	e03a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fc37 	bl	80017d0 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe fc33 	bl	80017d0 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e19b      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f78:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f84:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4927      	ldr	r1, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
 8002f98:	e015      	b.n	8002fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fc16 	bl	80017d0 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fc12 	bl	80017d0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e17a      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d03a      	beq.n	8003048 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d019      	beq.n	800300e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fbf6 	bl	80017d0 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe8:	f7fe fbf2 	bl	80017d0 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e15a      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	; (8003030 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003006:	2001      	movs	r0, #1
 8003008:	f000 fad8 	bl	80035bc <RCC_Delay>
 800300c:	e01c      	b.n	8003048 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fe fbdc 	bl	80017d0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301a:	e00f      	b.n	800303c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fbd8 	bl	80017d0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d908      	bls.n	800303c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e140      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	42420000 	.word	0x42420000
 8003038:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	4b9e      	ldr	r3, [pc, #632]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1e9      	bne.n	800301c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a6 	beq.w	80031a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305a:	4b97      	ldr	r3, [pc, #604]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003066:	4b94      	ldr	r3, [pc, #592]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4a93      	ldr	r2, [pc, #588]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003070:	61d3      	str	r3, [r2, #28]
 8003072:	4b91      	ldr	r3, [pc, #580]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b8e      	ldr	r3, [pc, #568]	; (80032bc <HAL_RCC_OscConfig+0x4f8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x4f8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a8a      	ldr	r2, [pc, #552]	; (80032bc <HAL_RCC_OscConfig+0x4f8>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fe fb99 	bl	80017d0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fe fb95 	bl	80017d0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	; 0x64
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0fd      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x4f8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x312>
 80030c8:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a7a      	ldr	r2, [pc, #488]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	e02d      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x334>
 80030de:	4b76      	ldr	r3, [pc, #472]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a75      	ldr	r2, [pc, #468]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b73      	ldr	r3, [pc, #460]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a72      	ldr	r2, [pc, #456]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
 80030f6:	e01c      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d10c      	bne.n	800311a <HAL_RCC_OscConfig+0x356>
 8003100:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a6c      	ldr	r2, [pc, #432]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	4a69      	ldr	r2, [pc, #420]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6213      	str	r3, [r2, #32]
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0x36e>
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a66      	ldr	r2, [pc, #408]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b64      	ldr	r3, [pc, #400]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a63      	ldr	r2, [pc, #396]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313a:	f7fe fb49 	bl	80017d0 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe fb45 	bl	80017d0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e0ab      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x37e>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fb33 	bl	80017d0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe fb2f 	bl	80017d0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e095      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d105      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003196:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a47      	ldr	r2, [pc, #284]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8081 	beq.w	80032ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d061      	beq.n	800327c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d146      	bne.n	800324e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_OscConfig+0x4fc>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fb03 	bl	80017d0 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe faff 	bl	80017d0 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e067      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e0:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f0      	bne.n	80031ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f4:	d108      	bne.n	8003208 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	492d      	ldr	r1, [pc, #180]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003208:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a19      	ldr	r1, [r3, #32]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	430b      	orrs	r3, r1
 800321a:	4927      	ldr	r1, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003220:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x4fc>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe fad3 	bl	80017d0 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800322e:	f7fe facf 	bl	80017d0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e037      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x46a>
 800324c:	e02f      	b.n	80032ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324e:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <HAL_RCC_OscConfig+0x4fc>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fabc 	bl	80017d0 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fab8 	bl	80017d0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e020      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x498>
 800327a:	e018      	b.n	80032ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e013      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	429a      	cmp	r2, r3
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d001      	beq.n	80032ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42420060 	.word	0x42420060

080032c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0d0      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d910      	bls.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	4965      	ldr	r1, [pc, #404]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0b8      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003320:	4b59      	ldr	r3, [pc, #356]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a58      	ldr	r2, [pc, #352]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800332a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003342:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	494d      	ldr	r1, [pc, #308]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d040      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d115      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07f      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003382:	4b41      	ldr	r3, [pc, #260]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e073      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e06b      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a2:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4936      	ldr	r1, [pc, #216]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fa0c 	bl	80017d0 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe fa08 	bl	80017d0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e053      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	4b2d      	ldr	r3, [pc, #180]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 020c 	and.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d1eb      	bne.n	80033bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d210      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	4922      	ldr	r1, [pc, #136]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_RCC_ClockConfig+0x1c0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e032      	b.n	800347a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4916      	ldr	r1, [pc, #88]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	4313      	orrs	r3, r2
 8003450:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003452:	f000 f821 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490a      	ldr	r1, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x1cc>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1d0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe f96a 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	40021000 	.word	0x40021000
 800348c:	0800be24 	.word	0x0800be24
 8003490:	20000000 	.word	0x20000000
 8003494:	20000004 	.word	0x20000004

08003498 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	b490      	push	{r4, r7}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800349e:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034a0:	1d3c      	adds	r4, r7, #4
 80034a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034a8:	f240 2301 	movw	r3, #513	; 0x201
 80034ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_RCC_GetSysClockFreq+0xb4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d002      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x40>
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x46>
 80034d6:	e02d      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034da:	623b      	str	r3, [r7, #32]
      break;
 80034dc:	e02d      	b.n	800353a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034ea:	4413      	add	r3, r2
 80034ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_RCC_GetSysClockFreq+0xb4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0c5b      	lsrs	r3, r3, #17
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800350a:	4413      	add	r3, r2
 800350c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003510:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003516:	fb02 f203 	mul.w	r2, r2, r3
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e004      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003528:	fb02 f303 	mul.w	r3, r2, r3
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	623b      	str	r3, [r7, #32]
      break;
 8003532:	e002      	b.n	800353a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003536:	623b      	str	r3, [r7, #32]
      break;
 8003538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353a:	6a3b      	ldr	r3, [r7, #32]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bc90      	pop	{r4, r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	0800bd90 	.word	0x0800bd90
 800354c:	40021000 	.word	0x40021000
 8003550:	007a1200 	.word	0x007a1200
 8003554:	003d0900 	.word	0x003d0900

08003558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800355c:	4b02      	ldr	r3, [pc, #8]	; (8003568 <HAL_RCC_GetHCLKFreq+0x10>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr
 8003568:	20000000 	.word	0x20000000

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003570:	f7ff fff2 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	0800be34 	.word	0x0800be34

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003598:	f7ff ffde 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0adb      	lsrs	r3, r3, #11
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	0800be34 	.word	0x0800be34

080035bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <RCC_Delay+0x34>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <RCC_Delay+0x38>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	fb02 f303 	mul.w	r3, r2, r3
 80035d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d8:	bf00      	nop
  }
  while (Delay --);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1e5a      	subs	r2, r3, #1
 80035de:	60fa      	str	r2, [r7, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f9      	bne.n	80035d8 <RCC_Delay+0x1c>
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20000000 	.word	0x20000000
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e076      	b.n	80036f8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	d108      	bne.n	8003624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361a:	d009      	beq.n	8003630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	61da      	str	r2, [r3, #28]
 8003622:	e005      	b.n	8003630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fec2 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003666:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	ea42 0103 	orr.w	r1, r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	0c1a      	lsrs	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f002 0204 	and.w	r2, r2, #4
 80036d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800370e:	2301      	movs	r3, #1
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x26>
 8003722:	2302      	movs	r3, #2
 8003724:	e18a      	b.n	8003a3c <HAL_SPI_TransmitReceive+0x33c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800372e:	f7fe f84f 	bl	80017d0 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800374c:	2b01      	cmp	r3, #1
 800374e:	d00f      	beq.n	8003770 <HAL_SPI_TransmitReceive+0x70>
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003756:	d107      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <HAL_SPI_TransmitReceive+0x68>
 8003760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003764:	2b04      	cmp	r3, #4
 8003766:	d003      	beq.n	8003770 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003768:	2302      	movs	r3, #2
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800376e:	e15b      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x82>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x82>
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003788:	e14e      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b04      	cmp	r3, #4
 8003794:	d003      	beq.n	800379e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2205      	movs	r2, #5
 800379a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	887a      	ldrh	r2, [r7, #2]
 80037ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	887a      	ldrh	r2, [r7, #2]
 80037c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d007      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fa:	d178      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_SPI_TransmitReceive+0x10a>
 8003804:	8b7b      	ldrh	r3, [r7, #26]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d166      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	1c9a      	adds	r2, r3, #2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382e:	e053      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d11b      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x176>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x176>
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d113      	bne.n	8003876 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	881a      	ldrh	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	1c9a      	adds	r2, r3, #2
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d119      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x1b8>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d014      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	b292      	uxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b8:	f7fd ff8a 	bl	80017d0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d807      	bhi.n	80038d8 <HAL_SPI_TransmitReceive+0x1d8>
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ce:	d003      	beq.n	80038d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038d6:	e0a7      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1a6      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x130>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1a1      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x130>
 80038ec:	e07c      	b.n	80039e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x1fc>
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d16b      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	330c      	adds	r3, #12
 8003906:	7812      	ldrb	r2, [r2, #0]
 8003908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003922:	e057      	b.n	80039d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b02      	cmp	r3, #2
 8003930:	d11c      	bne.n	800396c <HAL_SPI_TransmitReceive+0x26c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d017      	beq.n	800396c <HAL_SPI_TransmitReceive+0x26c>
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	2b01      	cmp	r3, #1
 8003940:	d114      	bne.n	800396c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	7812      	ldrb	r2, [r2, #0]
 800394e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b01      	cmp	r3, #1
 8003978:	d119      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x2ae>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d014      	beq.n	80039ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039aa:	2301      	movs	r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80039ae:	f7fd ff0f 	bl	80017d0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d803      	bhi.n	80039c6 <HAL_SPI_TransmitReceive+0x2c6>
 80039be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d102      	bne.n	80039cc <HAL_SPI_TransmitReceive+0x2cc>
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d103      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039d2:	e029      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1a2      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x224>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d19d      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f8b1 	bl	8003b54 <SPI_EndRxTxTransaction>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d006      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003a04:	e010      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	e000      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003a26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3730      	adds	r7, #48	; 0x30
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a54:	f7fd febc 	bl	80017d0 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a64:	f7fd feb4 	bl	80017d0 <HAL_GetTick>
 8003a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a6a:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	0d1b      	lsrs	r3, r3, #20
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	fb02 f303 	mul.w	r3, r2, r3
 8003a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a7a:	e054      	b.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d050      	beq.n	8003b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a84:	f7fd fea4 	bl	80017d0 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d902      	bls.n	8003a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d13d      	bne.n	8003b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab2:	d111      	bne.n	8003ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abc:	d004      	beq.n	8003ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d107      	bne.n	8003ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae0:	d10f      	bne.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e017      	b.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d19b      	bne.n	8003a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000

08003b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff ff6a 	bl	8003a44 <SPI_WaitFlagStateUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e000      	b.n	8003b88 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e03f      	b.n	8003c22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fc58 	bl	800146c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f905 	bl	8003de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b08a      	sub	sp, #40	; 0x28
 8003c2e:	af02      	add	r7, sp, #8
 8003c30:	60f8      	str	r0, [r7, #12]
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d17c      	bne.n	8003d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_UART_Transmit+0x2c>
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e075      	b.n	8003d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_UART_Transmit+0x3e>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e06e      	b.n	8003d46 <HAL_UART_Transmit+0x11c>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2221      	movs	r2, #33	; 0x21
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c7e:	f7fd fda7 	bl	80017d0 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	88fa      	ldrh	r2, [r7, #6]
 8003c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c98:	d108      	bne.n	8003cac <HAL_UART_Transmit+0x82>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e003      	b.n	8003cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cbc:	e02a      	b.n	8003d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f840 	bl	8003d4e <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e036      	b.n	8003d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3301      	adds	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1cf      	bne.n	8003cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f810 	bl	8003d4e <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e006      	b.n	8003d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5e:	e02c      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d028      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6e:	f7fd fd2f 	bl	80017d0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d21d      	bcs.n	8003dba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e00f      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	bf0c      	ite	eq
 8003dca:	2301      	moveq	r3, #1
 8003dcc:	2300      	movne	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d0c3      	beq.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e1e:	f023 030c 	bic.w	r3, r3, #12
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	430b      	orrs	r3, r1
 8003e2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <UART_SetConfig+0x114>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d103      	bne.n	8003e54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7ff fba2 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	e002      	b.n	8003e5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7ff fb8a 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 8003e58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009a      	lsls	r2, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	4a22      	ldr	r2, [pc, #136]	; (8003efc <UART_SetConfig+0x118>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	0119      	lsls	r1, r3, #4
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009a      	lsls	r2, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e90:	4b1a      	ldr	r3, [pc, #104]	; (8003efc <UART_SetConfig+0x118>)
 8003e92:	fba3 0302 	umull	r0, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	2064      	movs	r0, #100	; 0x64
 8003e9a:	fb00 f303 	mul.w	r3, r0, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	3332      	adds	r3, #50	; 0x32
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <UART_SetConfig+0x118>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb0:	4419      	add	r1, r3
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009a      	lsls	r2, r3, #2
 8003ebc:	441a      	add	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <UART_SetConfig+0x118>)
 8003eca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	2064      	movs	r0, #100	; 0x64
 8003ed2:	fb00 f303 	mul.w	r3, r0, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	3332      	adds	r3, #50	; 0x32
 8003edc:	4a07      	ldr	r2, [pc, #28]	; (8003efc <UART_SetConfig+0x118>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	f003 020f 	and.w	r2, r3, #15
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	440a      	add	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40013800 	.word	0x40013800
 8003efc:	51eb851f 	.word	0x51eb851f

08003f00 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	2007      	movs	r0, #7
 8003f10:	f7fc fdd4 	bl	8000abc <bno055_writeData>
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	203d      	movs	r0, #61	; 0x3d
 8003f2c:	f7fc fdc6 	bl	8000abc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8003f36:	2013      	movs	r0, #19
 8003f38:	f7fc fdb4 	bl	8000aa4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8003f3c:	e002      	b.n	8003f44 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8003f3e:	2007      	movs	r0, #7
 8003f40:	f7fc fdb0 	bl	8000aa4 <bno055_delay>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7ff ffe3 	bl	8003f1c <bno055_setOperationMode>
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8003f5e:	200c      	movs	r0, #12
 8003f60:	f7ff ffdc 	bl	8003f1c <bno055_setOperationMode>
}
 8003f64:	bf00      	nop
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	203f      	movs	r0, #63	; 0x3f
 8003f70:	f7fc fda4 	bl	8000abc <bno055_writeData>
  bno055_delay(700);
 8003f74:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003f78:	f7fc fd94 	bl	8000aa4 <bno055_delay>
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
  bno055_reset();
 8003f86:	f7ff ffef 	bl	8003f68 <bno055_reset>

  uint8_t id = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	2201      	movs	r2, #1
 8003f92:	4619      	mov	r1, r3
 8003f94:	2000      	movs	r0, #0
 8003f96:	f7fc fe7d 	bl	8000c94 <bno055_readData>
  if (id != BNO055_ID) {
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2ba0      	cmp	r3, #160	; 0xa0
 8003f9e:	d004      	beq.n	8003faa <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4809      	ldr	r0, [pc, #36]	; (8003fcc <bno055_setup+0x4c>)
 8003fa6:	f005 fa37 	bl	8009418 <iprintf>
  }
  bno055_setPage(0);
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7ff ffa8 	bl	8003f00 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	203f      	movs	r0, #63	; 0x3f
 8003fb4:	f7fc fd82 	bl	8000abc <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8003fb8:	f7ff ffc8 	bl	8003f4c <bno055_setOperationModeConfig>
  bno055_delay(10);
 8003fbc:	200a      	movs	r0, #10
 8003fbe:	f7fc fd71 	bl	8000aa4 <bno055_delay>
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	0800bda0 	.word	0x0800bda0

08003fd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <MX_FATFS_Init+0x18>)
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <MX_FATFS_Init+0x1c>)
 8003fd8:	f004 fd06 	bl	80089e8 <FATFS_LinkDriver>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <MX_FATFS_Init+0x20>)
 8003fe2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20002718 	.word	0x20002718
 8003fec:	2000000c 	.word	0x2000000c
 8003ff0:	2000271c 	.word	0x2000271c

08003ff4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003ff8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr
	...

08004004 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <USER_initialize+0x30>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
    Stat = USER_SPI_initialize(pdrv);
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f9ec 	bl	80043f4 <USER_SPI_initialize>
 800401c:	4603      	mov	r3, r0
 800401e:	461a      	mov	r2, r3
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <USER_initialize+0x30>)
 8004022:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004024:	4b03      	ldr	r3, [pc, #12]	; (8004034 <USER_initialize+0x30>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000009 	.word	0x20000009

08004038 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = USER_SPI_status(pdrv);
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	4618      	mov	r0, r3
 8004046:	f000 fac1 	bl	80045cc <USER_SPI_status>
 800404a:	4603      	mov	r3, r0
 800404c:	461a      	mov	r2, r3
 800404e:	4b04      	ldr	r3, [pc, #16]	; (8004060 <USER_status+0x28>)
 8004050:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004052:	4b03      	ldr	r3, [pc, #12]	; (8004060 <USER_status+0x28>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000009 	.word	0x20000009

08004064 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4603      	mov	r3, r0
 8004072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read (pdrv, buff, sector, count);
 8004074:	7bf8      	ldrb	r0, [r7, #15]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	f000 faba 	bl	80045f4 <USER_SPI_read>
 8004080:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write (pdrv, buff, sector, count);
 800409a:	7bf8      	ldrb	r0, [r7, #15]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	f000 fb0d 	bl	80046c0 <USER_SPI_write>
 80040a6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	603a      	str	r2, [r7, #0]
 80040ba:	71fb      	strb	r3, [r7, #7]
 80040bc:	460b      	mov	r3, r1
 80040be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = USER_SPI_ioctl(pdrv, cmd, buff);
 80040c0:	79b9      	ldrb	r1, [r7, #6]
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fb76 	bl	80047b8 <USER_SPI_ioctl>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]
    return res;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80040e4:	f7fd fb74 	bl	80017d0 <HAL_GetTick>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <SPI_Timer_On+0x20>)
 80040ec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80040ee:	4a04      	ldr	r2, [pc, #16]	; (8004100 <SPI_Timer_On+0x24>)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	2000477c 	.word	0x2000477c
 8004100:	20004780 	.word	0x20004780

08004104 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004108:	f7fd fb62 	bl	80017d0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <SPI_Timer_Status+0x24>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <SPI_Timer_Status+0x28>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	bf34      	ite	cc
 800411c:	2301      	movcc	r3, #1
 800411e:	2300      	movcs	r3, #0
 8004120:	b2db      	uxtb	r3, r3
}
 8004122:	4618      	mov	r0, r3
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	2000477c 	.word	0x2000477c
 800412c:	20004780 	.word	0x20004780

08004130 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af02      	add	r7, sp, #8
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800413a:	f107 020f 	add.w	r2, r7, #15
 800413e:	1df9      	adds	r1, r7, #7
 8004140:	2332      	movs	r3, #50	; 0x32
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2301      	movs	r3, #1
 8004146:	4804      	ldr	r0, [pc, #16]	; (8004158 <xchg_spi+0x28>)
 8004148:	f7ff fada 	bl	8003700 <HAL_SPI_TransmitReceive>
    return rxDat;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000550 	.word	0x20000550

0800415c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	e00a      	b.n	8004182 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	18d4      	adds	r4, r2, r3
 8004172:	20ff      	movs	r0, #255	; 0xff
 8004174:	f7ff ffdc 	bl	8004130 <xchg_spi>
 8004178:	4603      	mov	r3, r0
 800417a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3f0      	bcc.n	800416c <rcvr_spi_multi+0x10>
	}
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}

08004194 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e009      	b.n	80041b8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ffbf 	bl	8004130 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d3f1      	bcc.n	80041a4 <xmit_spi_multi+0x10>
	}
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80041d2:	f7fd fafd 	bl	80017d0 <HAL_GetTick>
 80041d6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80041dc:	20ff      	movs	r0, #255	; 0xff
 80041de:	f7ff ffa7 	bl	8004130 <xchg_spi>
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2bff      	cmp	r3, #255	; 0xff
 80041ea:	d007      	beq.n	80041fc <wait_ready+0x32>
 80041ec:	f7fd faf0 	bl	80017d0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d8ef      	bhi.n	80041dc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2bff      	cmp	r3, #255	; 0xff
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004214:	2201      	movs	r2, #1
 8004216:	2102      	movs	r1, #2
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <despiselect+0x18>)
 800421a:	f7fd fd99 	bl	8001d50 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800421e:	20ff      	movs	r0, #255	; 0xff
 8004220:	f7ff ff86 	bl	8004130 <xchg_spi>

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40010c00 	.word	0x40010c00

0800422c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004230:	2200      	movs	r2, #0
 8004232:	2102      	movs	r1, #2
 8004234:	4809      	ldr	r0, [pc, #36]	; (800425c <spiselect+0x30>)
 8004236:	f7fd fd8b 	bl	8001d50 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800423a:	20ff      	movs	r0, #255	; 0xff
 800423c:	f7ff ff78 	bl	8004130 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004244:	f7ff ffc1 	bl	80041ca <wait_ready>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <spiselect+0x26>
 800424e:	2301      	movs	r3, #1
 8004250:	e002      	b.n	8004258 <spiselect+0x2c>

	despiselect();
 8004252:	f7ff ffdd 	bl	8004210 <despiselect>
	return 0;	/* Timeout */
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40010c00 	.word	0x40010c00

08004260 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800426a:	20c8      	movs	r0, #200	; 0xc8
 800426c:	f7ff ff36 	bl	80040dc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004270:	20ff      	movs	r0, #255	; 0xff
 8004272:	f7ff ff5d 	bl	8004130 <xchg_spi>
 8004276:	4603      	mov	r3, r0
 8004278:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2bff      	cmp	r3, #255	; 0xff
 800427e:	d104      	bne.n	800428a <rcvr_datablock+0x2a>
 8004280:	f7ff ff40 	bl	8004104 <SPI_Timer_Status>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f2      	bne.n	8004270 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2bfe      	cmp	r3, #254	; 0xfe
 800428e:	d001      	beq.n	8004294 <rcvr_datablock+0x34>
 8004290:	2300      	movs	r3, #0
 8004292:	e00a      	b.n	80042aa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff60 	bl	800415c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800429c:	20ff      	movs	r0, #255	; 0xff
 800429e:	f7ff ff47 	bl	8004130 <xchg_spi>
 80042a2:	20ff      	movs	r0, #255	; 0xff
 80042a4:	f7ff ff44 	bl	8004130 <xchg_spi>

	return 1;						/* Function succeeded */
 80042a8:	2301      	movs	r3, #1
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80042be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042c2:	f7ff ff82 	bl	80041ca <wait_ready>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <xmit_datablock+0x1e>
 80042cc:	2300      	movs	r3, #0
 80042ce:	e01e      	b.n	800430e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff2c 	bl	8004130 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2bfd      	cmp	r3, #253	; 0xfd
 80042dc:	d016      	beq.n	800430c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80042de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ff56 	bl	8004194 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80042e8:	20ff      	movs	r0, #255	; 0xff
 80042ea:	f7ff ff21 	bl	8004130 <xchg_spi>
 80042ee:	20ff      	movs	r0, #255	; 0xff
 80042f0:	f7ff ff1e 	bl	8004130 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80042f4:	20ff      	movs	r0, #255	; 0xff
 80042f6:	f7ff ff1b 	bl	8004130 <xchg_spi>
 80042fa:	4603      	mov	r3, r0
 80042fc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2b05      	cmp	r3, #5
 8004306:	d001      	beq.n	800430c <xmit_datablock+0x5a>
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <xmit_datablock+0x5c>
	}
	return 1;
 800430c:	2301      	movs	r3, #1
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	4603      	mov	r3, r0
 800431e:	6039      	str	r1, [r7, #0]
 8004320:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da0e      	bge.n	8004348 <send_cmd+0x32>
		cmd &= 0x7F;
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004330:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004332:	2100      	movs	r1, #0
 8004334:	2037      	movs	r0, #55	; 0x37
 8004336:	f7ff ffee 	bl	8004316 <send_cmd>
 800433a:	4603      	mov	r3, r0
 800433c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800433e:	7bbb      	ldrb	r3, [r7, #14]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d901      	bls.n	8004348 <send_cmd+0x32>
 8004344:	7bbb      	ldrb	r3, [r7, #14]
 8004346:	e051      	b.n	80043ec <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d008      	beq.n	8004360 <send_cmd+0x4a>
		despiselect();
 800434e:	f7ff ff5f 	bl	8004210 <despiselect>
		if (!spiselect()) return 0xFF;
 8004352:	f7ff ff6b 	bl	800422c <spiselect>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <send_cmd+0x4a>
 800435c:	23ff      	movs	r3, #255	; 0xff
 800435e:	e045      	b.n	80043ec <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004360:	79fb      	ldrb	r3, [r7, #7]
 8004362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004366:	b2db      	uxtb	r3, r3
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fee1 	bl	8004130 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	0e1b      	lsrs	r3, r3, #24
 8004372:	b2db      	uxtb	r3, r3
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fedb 	bl	8004130 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fed5 	bl	8004130 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	0a1b      	lsrs	r3, r3, #8
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fecf 	bl	8004130 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff feca 	bl	8004130 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <send_cmd+0x94>
 80043a6:	2395      	movs	r3, #149	; 0x95
 80043a8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d101      	bne.n	80043b4 <send_cmd+0x9e>
 80043b0:	2387      	movs	r3, #135	; 0x87
 80043b2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff feba 	bl	8004130 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d102      	bne.n	80043c8 <send_cmd+0xb2>
 80043c2:	20ff      	movs	r0, #255	; 0xff
 80043c4:	f7ff feb4 	bl	8004130 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80043c8:	230a      	movs	r3, #10
 80043ca:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80043cc:	20ff      	movs	r0, #255	; 0xff
 80043ce:	f7ff feaf 	bl	8004130 <xchg_spi>
 80043d2:	4603      	mov	r3, r0
 80043d4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80043d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da05      	bge.n	80043ea <send_cmd+0xd4>
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <send_cmd+0xb6>

	return res;							/* Return received response */
 80043ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <USER_SPI_initialize+0x14>
 8004404:	2301      	movs	r3, #1
 8004406:	e0d6      	b.n	80045b6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004408:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <USER_SPI_initialize+0x1cc>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <USER_SPI_initialize+0x2a>
 8004416:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <USER_SPI_initialize+0x1cc>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e0cb      	b.n	80045b6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800441e:	4b69      	ldr	r3, [pc, #420]	; (80045c4 <USER_SPI_initialize+0x1d0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004428:	4b66      	ldr	r3, [pc, #408]	; (80045c4 <USER_SPI_initialize+0x1d0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004430:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004432:	230a      	movs	r3, #10
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e005      	b.n	8004444 <USER_SPI_initialize+0x50>
 8004438:	20ff      	movs	r0, #255	; 0xff
 800443a:	f7ff fe79 	bl	8004130 <xchg_spi>
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	3b01      	subs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f6      	bne.n	8004438 <USER_SPI_initialize+0x44>

	ty = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800444e:	2100      	movs	r1, #0
 8004450:	2000      	movs	r0, #0
 8004452:	f7ff ff60 	bl	8004316 <send_cmd>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	f040 808b 	bne.w	8004574 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800445e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004462:	f7ff fe3b 	bl	80040dc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004466:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800446a:	2008      	movs	r0, #8
 800446c:	f7ff ff53 	bl	8004316 <send_cmd>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d151      	bne.n	800451a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e00d      	b.n	8004498 <USER_SPI_initialize+0xa4>
 800447c:	7bfc      	ldrb	r4, [r7, #15]
 800447e:	20ff      	movs	r0, #255	; 0xff
 8004480:	f7ff fe56 	bl	8004130 <xchg_spi>
 8004484:	4603      	mov	r3, r0
 8004486:	461a      	mov	r2, r3
 8004488:	f107 0310 	add.w	r3, r7, #16
 800448c:	4423      	add	r3, r4
 800448e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	3301      	adds	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d9ee      	bls.n	800447c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800449e:	7abb      	ldrb	r3, [r7, #10]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d167      	bne.n	8004574 <USER_SPI_initialize+0x180>
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	2baa      	cmp	r3, #170	; 0xaa
 80044a8:	d164      	bne.n	8004574 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80044aa:	bf00      	nop
 80044ac:	f7ff fe2a 	bl	8004104 <SPI_Timer_Status>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <USER_SPI_initialize+0xd2>
 80044b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80044ba:	20a9      	movs	r0, #169	; 0xa9
 80044bc:	f7ff ff2b 	bl	8004316 <send_cmd>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f2      	bne.n	80044ac <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80044c6:	f7ff fe1d 	bl	8004104 <SPI_Timer_Status>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d051      	beq.n	8004574 <USER_SPI_initialize+0x180>
 80044d0:	2100      	movs	r1, #0
 80044d2:	203a      	movs	r0, #58	; 0x3a
 80044d4:	f7ff ff1f 	bl	8004316 <send_cmd>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d14a      	bne.n	8004574 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e00d      	b.n	8004500 <USER_SPI_initialize+0x10c>
 80044e4:	7bfc      	ldrb	r4, [r7, #15]
 80044e6:	20ff      	movs	r0, #255	; 0xff
 80044e8:	f7ff fe22 	bl	8004130 <xchg_spi>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	f107 0310 	add.w	r3, r7, #16
 80044f4:	4423      	add	r3, r4
 80044f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	3301      	adds	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d9ee      	bls.n	80044e4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004506:	7a3b      	ldrb	r3, [r7, #8]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <USER_SPI_initialize+0x120>
 8004510:	230c      	movs	r3, #12
 8004512:	e000      	b.n	8004516 <USER_SPI_initialize+0x122>
 8004514:	2304      	movs	r3, #4
 8004516:	737b      	strb	r3, [r7, #13]
 8004518:	e02c      	b.n	8004574 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800451a:	2100      	movs	r1, #0
 800451c:	20a9      	movs	r0, #169	; 0xa9
 800451e:	f7ff fefa 	bl	8004316 <send_cmd>
 8004522:	4603      	mov	r3, r0
 8004524:	2b01      	cmp	r3, #1
 8004526:	d804      	bhi.n	8004532 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004528:	2302      	movs	r3, #2
 800452a:	737b      	strb	r3, [r7, #13]
 800452c:	23a9      	movs	r3, #169	; 0xa9
 800452e:	73bb      	strb	r3, [r7, #14]
 8004530:	e003      	b.n	800453a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004532:	2301      	movs	r3, #1
 8004534:	737b      	strb	r3, [r7, #13]
 8004536:	2301      	movs	r3, #1
 8004538:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800453a:	bf00      	nop
 800453c:	f7ff fde2 	bl	8004104 <SPI_Timer_Status>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <USER_SPI_initialize+0x162>
 8004546:	7bbb      	ldrb	r3, [r7, #14]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fee3 	bl	8004316 <send_cmd>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f2      	bne.n	800453c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004556:	f7ff fdd5 	bl	8004104 <SPI_Timer_Status>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <USER_SPI_initialize+0x17c>
 8004560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004564:	2010      	movs	r0, #16
 8004566:	f7ff fed6 	bl	8004316 <send_cmd>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <USER_SPI_initialize+0x180>
				ty = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004574:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <USER_SPI_initialize+0x1d4>)
 8004576:	7b7b      	ldrb	r3, [r7, #13]
 8004578:	7013      	strb	r3, [r2, #0]
	despiselect();
 800457a:	f7ff fe49 	bl	8004210 <despiselect>

	if (ty) {			/* OK */
 800457e:	7b7b      	ldrb	r3, [r7, #13]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <USER_SPI_initialize+0x1d0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <USER_SPI_initialize+0x1d0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0210 	orr.w	r2, r2, #16
 8004596:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <USER_SPI_initialize+0x1cc>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <USER_SPI_initialize+0x1cc>)
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e002      	b.n	80045b0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <USER_SPI_initialize+0x1cc>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <USER_SPI_initialize+0x1cc>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd90      	pop	{r4, r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000020 	.word	0x20000020
 80045c4:	20000550 	.word	0x20000550
 80045c8:	20000314 	.word	0x20000314

080045cc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <USER_SPI_status+0x14>
 80045dc:	2301      	movs	r3, #1
 80045de:	e002      	b.n	80045e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80045e0:	4b03      	ldr	r3, [pc, #12]	; (80045f0 <USER_SPI_status+0x24>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	b2db      	uxtb	r3, r3
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	20000020 	.word	0x20000020

080045f4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <USER_SPI_read+0x1c>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <USER_SPI_read+0x20>
 8004610:	2304      	movs	r3, #4
 8004612:	e04d      	b.n	80046b0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <USER_SPI_read+0xc4>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <USER_SPI_read+0x32>
 8004622:	2303      	movs	r3, #3
 8004624:	e044      	b.n	80046b0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004626:	4b25      	ldr	r3, [pc, #148]	; (80046bc <USER_SPI_read+0xc8>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USER_SPI_read+0x44>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	025b      	lsls	r3, r3, #9
 8004636:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d111      	bne.n	8004662 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	2011      	movs	r0, #17
 8004642:	f7ff fe68 	bl	8004316 <send_cmd>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d129      	bne.n	80046a0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800464c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004650:	68b8      	ldr	r0, [r7, #8]
 8004652:	f7ff fe05 	bl	8004260 <rcvr_datablock>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d021      	beq.n	80046a0 <USER_SPI_read+0xac>
			count = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	e01e      	b.n	80046a0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	2012      	movs	r0, #18
 8004666:	f7ff fe56 	bl	8004316 <send_cmd>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d117      	bne.n	80046a0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004674:	68b8      	ldr	r0, [r7, #8]
 8004676:	f7ff fdf3 	bl	8004260 <rcvr_datablock>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <USER_SPI_read+0xa2>
				buff += 512;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004686:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	3b01      	subs	r3, #1
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ed      	bne.n	8004670 <USER_SPI_read+0x7c>
 8004694:	e000      	b.n	8004698 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004696:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004698:	2100      	movs	r1, #0
 800469a:	200c      	movs	r0, #12
 800469c:	f7ff fe3b 	bl	8004316 <send_cmd>
		}
	}
	despiselect();
 80046a0:	f7ff fdb6 	bl	8004210 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000020 	.word	0x20000020
 80046bc:	20000314 	.word	0x20000314

080046c0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <USER_SPI_write+0x1c>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <USER_SPI_write+0x20>
 80046dc:	2304      	movs	r3, #4
 80046de:	e063      	b.n	80047a8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80046e0:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <USER_SPI_write+0xf0>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <USER_SPI_write+0x32>
 80046ee:	2303      	movs	r3, #3
 80046f0:	e05a      	b.n	80047a8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80046f2:	4b2f      	ldr	r3, [pc, #188]	; (80047b0 <USER_SPI_write+0xf0>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <USER_SPI_write+0x44>
 8004700:	2302      	movs	r3, #2
 8004702:	e051      	b.n	80047a8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <USER_SPI_write+0xf4>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <USER_SPI_write+0x56>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	025b      	lsls	r3, r3, #9
 8004714:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d110      	bne.n	800473e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	2018      	movs	r0, #24
 8004720:	f7ff fdf9 	bl	8004316 <send_cmd>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d136      	bne.n	8004798 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800472a:	21fe      	movs	r1, #254	; 0xfe
 800472c:	68b8      	ldr	r0, [r7, #8]
 800472e:	f7ff fdc0 	bl	80042b2 <xmit_datablock>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02f      	beq.n	8004798 <USER_SPI_write+0xd8>
			count = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	e02c      	b.n	8004798 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <USER_SPI_write+0xf4>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	f003 0306 	and.w	r3, r3, #6
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <USER_SPI_write+0x92>
 800474a:	6839      	ldr	r1, [r7, #0]
 800474c:	2097      	movs	r0, #151	; 0x97
 800474e:	f7ff fde2 	bl	8004316 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	2019      	movs	r0, #25
 8004756:	f7ff fdde 	bl	8004316 <send_cmd>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11b      	bne.n	8004798 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004760:	21fc      	movs	r1, #252	; 0xfc
 8004762:	68b8      	ldr	r0, [r7, #8]
 8004764:	f7ff fda5 	bl	80042b2 <xmit_datablock>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <USER_SPI_write+0xc4>
				buff += 512;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004774:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1ee      	bne.n	8004760 <USER_SPI_write+0xa0>
 8004782:	e000      	b.n	8004786 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8004784:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8004786:	21fd      	movs	r1, #253	; 0xfd
 8004788:	2000      	movs	r0, #0
 800478a:	f7ff fd92 	bl	80042b2 <xmit_datablock>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USER_SPI_write+0xd8>
 8004794:	2301      	movs	r3, #1
 8004796:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004798:	f7ff fd3a 	bl	8004210 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000020 	.word	0x20000020
 80047b4:	20000314 	.word	0x20000314

080047b8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	603a      	str	r2, [r7, #0]
 80047c2:	71fb      	strb	r3, [r7, #7]
 80047c4:	460b      	mov	r3, r1
 80047c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <USER_SPI_ioctl+0x1a>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e162      	b.n	8004a98 <USER_SPI_ioctl+0x2e0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80047d2:	4bb3      	ldr	r3, [pc, #716]	; (8004aa0 <USER_SPI_ioctl+0x2e8>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <USER_SPI_ioctl+0x2c>
 80047e0:	2303      	movs	r3, #3
 80047e2:	e159      	b.n	8004a98 <USER_SPI_ioctl+0x2e0>

	res = RES_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80047ea:	79bb      	ldrb	r3, [r7, #6]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	f200 813e 	bhi.w	8004a6e <USER_SPI_ioctl+0x2b6>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <USER_SPI_ioctl+0x40>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800480d 	.word	0x0800480d
 80047fc:	08004821 	.word	0x08004821
 8004800:	080048cd 	.word	0x080048cd
 8004804:	080048dd 	.word	0x080048dd
 8004808:	080049d3 	.word	0x080049d3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800480c:	f7ff fd0e 	bl	800422c <spiselect>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 812f 	beq.w	8004a76 <USER_SPI_ioctl+0x2be>
 8004818:	2300      	movs	r3, #0
 800481a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800481e:	e12a      	b.n	8004a76 <USER_SPI_ioctl+0x2be>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004820:	2100      	movs	r1, #0
 8004822:	2009      	movs	r0, #9
 8004824:	f7ff fd77 	bl	8004316 <send_cmd>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 8125 	bne.w	8004a7a <USER_SPI_ioctl+0x2c2>
 8004830:	f107 030c 	add.w	r3, r7, #12
 8004834:	2110      	movs	r1, #16
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fd12 	bl	8004260 <rcvr_datablock>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 811b 	beq.w	8004a7a <USER_SPI_ioctl+0x2c2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004844:	7b3b      	ldrb	r3, [r7, #12]
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d111      	bne.n	8004872 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800484e:	7d7b      	ldrb	r3, [r7, #21]
 8004850:	461a      	mov	r2, r3
 8004852:	7d3b      	ldrb	r3, [r7, #20]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	4413      	add	r3, r2
 8004858:	461a      	mov	r2, r3
 800485a:	7cfb      	ldrb	r3, [r7, #19]
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8004862:	4413      	add	r3, r2
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	029a      	lsls	r2, r3, #10
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e028      	b.n	80048c4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004872:	7c7b      	ldrb	r3, [r7, #17]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	b2da      	uxtb	r2, r3
 800487a:	7dbb      	ldrb	r3, [r7, #22]
 800487c:	09db      	lsrs	r3, r3, #7
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4413      	add	r3, r2
 8004882:	b2da      	uxtb	r2, r3
 8004884:	7d7b      	ldrb	r3, [r7, #21]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0306 	and.w	r3, r3, #6
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4413      	add	r3, r2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3302      	adds	r3, #2
 8004896:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800489a:	7d3b      	ldrb	r3, [r7, #20]
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	7cbb      	ldrb	r3, [r7, #18]
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048b0:	4413      	add	r3, r2
 80048b2:	3301      	adds	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80048b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048ba:	3b09      	subs	r3, #9
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	409a      	lsls	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80048ca:	e0d6      	b.n	8004a7a <USER_SPI_ioctl+0x2c2>
		/**
		 *  not sure if we need this but I've noticed that this was missing from the example code -Wesley
		 */
	case GET_SECTOR_SIZE:
	      /*Unit size of the sector (WORD) */
	      *(WORD*) buff = 512;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048d2:	801a      	strh	r2, [r3, #0]
	      res = RES_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	      break;
 80048da:	e0d9      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80048dc:	4b71      	ldr	r3, [pc, #452]	; (8004aa4 <USER_SPI_ioctl+0x2ec>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d031      	beq.n	800494c <USER_SPI_ioctl+0x194>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80048e8:	2100      	movs	r1, #0
 80048ea:	208d      	movs	r0, #141	; 0x8d
 80048ec:	f7ff fd13 	bl	8004316 <send_cmd>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f040 80c3 	bne.w	8004a7e <USER_SPI_ioctl+0x2c6>
				xchg_spi(0xFF);
 80048f8:	20ff      	movs	r0, #255	; 0xff
 80048fa:	f7ff fc19 	bl	8004130 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	2110      	movs	r1, #16
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fcab 	bl	8004260 <rcvr_datablock>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80b6 	beq.w	8004a7e <USER_SPI_ioctl+0x2c6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004912:	2330      	movs	r3, #48	; 0x30
 8004914:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004918:	e007      	b.n	800492a <USER_SPI_ioctl+0x172>
 800491a:	20ff      	movs	r0, #255	; 0xff
 800491c:	f7ff fc08 	bl	8004130 <xchg_spi>
 8004920:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004924:	3b01      	subs	r3, #1
 8004926:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800492a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f3      	bne.n	800491a <USER_SPI_ioctl+0x162>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004932:	7dbb      	ldrb	r3, [r7, #22]
 8004934:	091b      	lsrs	r3, r3, #4
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	2310      	movs	r3, #16
 800493c:	fa03 f202 	lsl.w	r2, r3, r2
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800494a:	e098      	b.n	8004a7e <USER_SPI_ioctl+0x2c6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800494c:	2100      	movs	r1, #0
 800494e:	2009      	movs	r0, #9
 8004950:	f7ff fce1 	bl	8004316 <send_cmd>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 8091 	bne.w	8004a7e <USER_SPI_ioctl+0x2c6>
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	2110      	movs	r1, #16
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fc7c 	bl	8004260 <rcvr_datablock>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8087 	beq.w	8004a7e <USER_SPI_ioctl+0x2c6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004970:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <USER_SPI_ioctl+0x2ec>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d012      	beq.n	80049a2 <USER_SPI_ioctl+0x1ea>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800497c:	7dbb      	ldrb	r3, [r7, #22]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004984:	7dfa      	ldrb	r2, [r7, #23]
 8004986:	09d2      	lsrs	r2, r2, #7
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	4413      	add	r3, r2
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	7e7b      	ldrb	r3, [r7, #25]
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	b2db      	uxtb	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	461a      	mov	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e013      	b.n	80049ca <USER_SPI_ioctl+0x212>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80049a2:	7dbb      	ldrb	r3, [r7, #22]
 80049a4:	109b      	asrs	r3, r3, #2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	3301      	adds	r3, #1
 80049ae:	7dfa      	ldrb	r2, [r7, #23]
 80049b0:	00d2      	lsls	r2, r2, #3
 80049b2:	f002 0218 	and.w	r2, r2, #24
 80049b6:	7df9      	ldrb	r1, [r7, #23]
 80049b8:	0949      	lsrs	r1, r1, #5
 80049ba:	b2c9      	uxtb	r1, r1
 80049bc:	440a      	add	r2, r1
 80049be:	3201      	adds	r2, #1
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80049d0:	e055      	b.n	8004a7e <USER_SPI_ioctl+0x2c6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <USER_SPI_ioctl+0x2ec>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	f003 0306 	and.w	r3, r3, #6
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d051      	beq.n	8004a82 <USER_SPI_ioctl+0x2ca>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80049de:	f107 020c 	add.w	r2, r7, #12
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	210b      	movs	r1, #11
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fee6 	bl	80047b8 <USER_SPI_ioctl>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d149      	bne.n	8004a86 <USER_SPI_ioctl+0x2ce>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80049f2:	7b3b      	ldrb	r3, [r7, #12]
 80049f4:	099b      	lsrs	r3, r3, #6
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <USER_SPI_ioctl+0x24e>
 80049fc:	7dbb      	ldrb	r3, [r7, #22]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d041      	beq.n	8004a8a <USER_SPI_ioctl+0x2d2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004a16:	4b23      	ldr	r3, [pc, #140]	; (8004aa4 <USER_SPI_ioctl+0x2ec>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d105      	bne.n	8004a2e <USER_SPI_ioctl+0x276>
			st *= 512; ed *= 512;
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	025b      	lsls	r3, r3, #9
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	025b      	lsls	r3, r3, #9
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a30:	2020      	movs	r0, #32
 8004a32:	f7ff fc70 	bl	8004316 <send_cmd>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d128      	bne.n	8004a8e <USER_SPI_ioctl+0x2d6>
 8004a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3e:	2021      	movs	r0, #33	; 0x21
 8004a40:	f7ff fc69 	bl	8004316 <send_cmd>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d121      	bne.n	8004a8e <USER_SPI_ioctl+0x2d6>
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2026      	movs	r0, #38	; 0x26
 8004a4e:	f7ff fc62 	bl	8004316 <send_cmd>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11a      	bne.n	8004a8e <USER_SPI_ioctl+0x2d6>
 8004a58:	f247 5030 	movw	r0, #30000	; 0x7530
 8004a5c:	f7ff fbb5 	bl	80041ca <wait_ready>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d013      	beq.n	8004a8e <USER_SPI_ioctl+0x2d6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004a6c:	e00f      	b.n	8004a8e <USER_SPI_ioctl+0x2d6>

	default:
		res = RES_PARERR;
 8004a6e:	2304      	movs	r3, #4
 8004a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004a74:	e00c      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		break;
 8004a76:	bf00      	nop
 8004a78:	e00a      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		break;
 8004a7a:	bf00      	nop
 8004a7c:	e008      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		break;
 8004a7e:	bf00      	nop
 8004a80:	e006      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004a82:	bf00      	nop
 8004a84:	e004      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004a86:	bf00      	nop
 8004a88:	e002      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <USER_SPI_ioctl+0x2d8>
		break;
 8004a8e:	bf00      	nop
	}

	despiselect();
 8004a90:	f7ff fbbe 	bl	8004210 <despiselect>

	return res;
 8004a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3730      	adds	r7, #48	; 0x30
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000020 	.word	0x20000020
 8004aa4:	20000314 	.word	0x20000314

08004aa8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	4a08      	ldr	r2, [pc, #32]	; (8004ad8 <disk_status+0x30>)
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	79fa      	ldrb	r2, [r7, #7]
 8004ac0:	4905      	ldr	r1, [pc, #20]	; (8004ad8 <disk_status+0x30>)
 8004ac2:	440a      	add	r2, r1
 8004ac4:	7a12      	ldrb	r2, [r2, #8]
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4798      	blx	r3
 8004aca:	4603      	mov	r3, r0
 8004acc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000538 	.word	0x20000538

08004adc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	4a0d      	ldr	r2, [pc, #52]	; (8004b24 <disk_initialize+0x48>)
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d111      	bne.n	8004b18 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <disk_initialize+0x48>)
 8004af8:	2101      	movs	r1, #1
 8004afa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	4a09      	ldr	r2, [pc, #36]	; (8004b24 <disk_initialize+0x48>)
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	79fa      	ldrb	r2, [r7, #7]
 8004b0a:	4906      	ldr	r1, [pc, #24]	; (8004b24 <disk_initialize+0x48>)
 8004b0c:	440a      	add	r2, r1
 8004b0e:	7a12      	ldrb	r2, [r2, #8]
 8004b10:	4610      	mov	r0, r2
 8004b12:	4798      	blx	r3
 8004b14:	4603      	mov	r3, r0
 8004b16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000538 	.word	0x20000538

08004b28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4603      	mov	r3, r0
 8004b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <disk_read+0x3c>)
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	689c      	ldr	r4, [r3, #8]
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <disk_read+0x3c>)
 8004b48:	4413      	add	r3, r2
 8004b4a:	7a18      	ldrb	r0, [r3, #8]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	47a0      	blx	r4
 8004b54:	4603      	mov	r3, r0
 8004b56:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd90      	pop	{r4, r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000538 	.word	0x20000538

08004b68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004b68:	b590      	push	{r4, r7, lr}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	4603      	mov	r3, r0
 8004b76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <disk_write+0x3c>)
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	68dc      	ldr	r4, [r3, #12]
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <disk_write+0x3c>)
 8004b88:	4413      	add	r3, r2
 8004b8a:	7a18      	ldrb	r0, [r3, #8]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	47a0      	blx	r4
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000538 	.word	0x20000538

08004ba8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	603a      	str	r2, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	4a09      	ldr	r2, [pc, #36]	; (8004be0 <disk_ioctl+0x38>)
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	79fa      	ldrb	r2, [r7, #7]
 8004bc6:	4906      	ldr	r1, [pc, #24]	; (8004be0 <disk_ioctl+0x38>)
 8004bc8:	440a      	add	r2, r1
 8004bca:	7a10      	ldrb	r0, [r2, #8]
 8004bcc:	79b9      	ldrb	r1, [r7, #6]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	4798      	blx	r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000538 	.word	0x20000538

08004be4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004be4:	b480      	push	{r7}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004bf8:	e007      	b.n	8004c0a <mem_cpy+0x26>
		*d++ = *s++;
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	1c53      	adds	r3, r2, #1
 8004bfe:	613b      	str	r3, [r7, #16]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1c59      	adds	r1, r3, #1
 8004c04:	6179      	str	r1, [r7, #20]
 8004c06:	7812      	ldrb	r2, [r2, #0]
 8004c08:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f2      	bne.n	8004bfa <mem_cpy+0x16>
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004c30:	e005      	b.n	8004c3e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	617a      	str	r2, [r7, #20]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	1e5a      	subs	r2, r3, #1
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f4      	bne.n	8004c32 <mem_set+0x12>
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004c54:	b480      	push	{r7}
 8004c56:	b089      	sub	sp, #36	; 0x24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004c6c:	bf00      	nop
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <mem_cmp+0x40>
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	61fa      	str	r2, [r7, #28]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	4619      	mov	r1, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	1c5a      	adds	r2, r3, #1
 8004c86:	61ba      	str	r2, [r7, #24]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	1acb      	subs	r3, r1, r3
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ec      	beq.n	8004c6e <mem_cmp+0x1a>
	return r;
 8004c94:	697b      	ldr	r3, [r7, #20]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004caa:	e002      	b.n	8004cb2 <chk_chr+0x12>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <chk_chr+0x26>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d1f2      	bne.n	8004cac <chk_chr+0xc>
	return *str;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bc80      	pop	{r7}
 8004cd2:	4770      	bx	lr

08004cd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e03d      	b.n	8004d64 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8004ce8:	4932      	ldr	r1, [pc, #200]	; (8004db4 <chk_lock+0xe0>)
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d02e      	beq.n	8004d5a <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004cfc:	492d      	ldr	r1, [pc, #180]	; (8004db4 <chk_lock+0xe0>)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d122      	bne.n	8004d5e <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8004d18:	4926      	ldr	r1, [pc, #152]	; (8004db4 <chk_lock+0xe0>)
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	3304      	adds	r3, #4
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d30:	3308      	adds	r3, #8
 8004d32:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d112      	bne.n	8004d5e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8004d38:	491e      	ldr	r1, [pc, #120]	; (8004db4 <chk_lock+0xe0>)
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	3308      	adds	r3, #8
 8004d48:	881a      	ldrh	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	3306      	adds	r3, #6
 8004d52:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d102      	bne.n	8004d5e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8004d58:	e007      	b.n	8004d6a <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d9be      	bls.n	8004ce8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d109      	bne.n	8004d84 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d102      	bne.n	8004d7c <chk_lock+0xa8>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d101      	bne.n	8004d80 <chk_lock+0xac>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e013      	b.n	8004da8 <chk_lock+0xd4>
 8004d80:	2312      	movs	r3, #18
 8004d82:	e011      	b.n	8004da8 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <chk_lock+0xce>
 8004d8a:	490a      	ldr	r1, [pc, #40]	; (8004db4 <chk_lock+0xe0>)
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	330a      	adds	r3, #10
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da0:	d101      	bne.n	8004da6 <chk_lock+0xd2>
 8004da2:	2310      	movs	r3, #16
 8004da4:	e000      	b.n	8004da8 <chk_lock+0xd4>
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000320 	.word	0x20000320

08004db8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]
 8004dc2:	e002      	b.n	8004dca <enq_lock+0x12>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d809      	bhi.n	8004de4 <enq_lock+0x2c>
 8004dd0:	490a      	ldr	r1, [pc, #40]	; (8004dfc <enq_lock+0x44>)
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1ef      	bne.n	8004dc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	bf14      	ite	ne
 8004dea:	2301      	movne	r3, #1
 8004dec:	2300      	moveq	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000320 	.word	0x20000320

08004e00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e030      	b.n	8004e72 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8004e10:	495a      	ldr	r1, [pc, #360]	; (8004f7c <inc_lock+0x17c>)
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4613      	mov	r3, r2
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d11f      	bne.n	8004e6c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8004e2c:	4953      	ldr	r1, [pc, #332]	; (8004f7c <inc_lock+0x17c>)
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4613      	mov	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e44:	3308      	adds	r3, #8
 8004e46:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d10f      	bne.n	8004e6c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8004e4c:	494b      	ldr	r1, [pc, #300]	; (8004f7c <inc_lock+0x17c>)
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	881a      	ldrh	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	3306      	adds	r3, #6
 8004e66:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d006      	beq.n	8004e7a <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d9cb      	bls.n	8004e10 <inc_lock+0x10>
 8004e78:	e000      	b.n	8004e7c <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8004e7a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d14a      	bne.n	8004f18 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e002      	b.n	8004e8e <inc_lock+0x8e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d809      	bhi.n	8004ea8 <inc_lock+0xa8>
 8004e94:	4939      	ldr	r1, [pc, #228]	; (8004f7c <inc_lock+0x17c>)
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ef      	bne.n	8004e88 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d101      	bne.n	8004eb2 <inc_lock+0xb2>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e05f      	b.n	8004f72 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	4830      	ldr	r0, [pc, #192]	; (8004f7c <inc_lock+0x17c>)
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4403      	add	r3, r0
 8004ec8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6819      	ldr	r1, [r3, #0]
 8004ed4:	4829      	ldr	r0, [pc, #164]	; (8004f7c <inc_lock+0x17c>)
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4403      	add	r3, r0
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eec:	3306      	adds	r3, #6
 8004eee:	8818      	ldrh	r0, [r3, #0]
 8004ef0:	4922      	ldr	r1, [pc, #136]	; (8004f7c <inc_lock+0x17c>)
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3308      	adds	r3, #8
 8004f00:	4602      	mov	r2, r0
 8004f02:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f04:	491d      	ldr	r1, [pc, #116]	; (8004f7c <inc_lock+0x17c>)
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	330a      	adds	r3, #10
 8004f14:	2200      	movs	r2, #0
 8004f16:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00c      	beq.n	8004f38 <inc_lock+0x138>
 8004f1e:	4917      	ldr	r1, [pc, #92]	; (8004f7c <inc_lock+0x17c>)
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4613      	mov	r3, r2
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	330a      	adds	r3, #10
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <inc_lock+0x138>
 8004f34:	2300      	movs	r3, #0
 8004f36:	e01c      	b.n	8004f72 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <inc_lock+0x156>
 8004f3e:	490f      	ldr	r1, [pc, #60]	; (8004f7c <inc_lock+0x17c>)
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	330a      	adds	r3, #10
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	b299      	uxth	r1, r3
 8004f54:	e001      	b.n	8004f5a <inc_lock+0x15a>
 8004f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f5a:	4808      	ldr	r0, [pc, #32]	; (8004f7c <inc_lock+0x17c>)
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4403      	add	r3, r0
 8004f68:	330a      	adds	r3, #10
 8004f6a:	460a      	mov	r2, r1
 8004f6c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3301      	adds	r3, #1
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	20000320 	.word	0x20000320

08004f80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d82e      	bhi.n	8004ff2 <dec_lock+0x72>
		n = Files[i].ctr;
 8004f94:	491b      	ldr	r1, [pc, #108]	; (8005004 <dec_lock+0x84>)
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	330a      	adds	r3, #10
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fae:	d101      	bne.n	8004fb4 <dec_lock+0x34>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <dec_lock+0x40>
 8004fba:	89fb      	ldrh	r3, [r7, #14]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004fc0:	4910      	ldr	r1, [pc, #64]	; (8005004 <dec_lock+0x84>)
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4413      	add	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	330a      	adds	r3, #10
 8004fd0:	89fa      	ldrh	r2, [r7, #14]
 8004fd2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fd4:	89fb      	ldrh	r3, [r7, #14]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <dec_lock+0x6c>
 8004fda:	490a      	ldr	r1, [pc, #40]	; (8005004 <dec_lock+0x84>)
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	737b      	strb	r3, [r7, #13]
 8004ff0:	e001      	b.n	8004ff6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004ff6:	7b7b      	ldrb	r3, [r7, #13]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000320 	.word	0x20000320

08005008 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e016      	b.n	8005044 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005016:	4910      	ldr	r1, [pc, #64]	; (8005058 <clear_lock+0x50>)
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4613      	mov	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d108      	bne.n	800503e <clear_lock+0x36>
 800502c:	490a      	ldr	r1, [pc, #40]	; (8005058 <clear_lock+0x50>)
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4613      	mov	r3, r2
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d9e5      	bls.n	8005016 <clear_lock+0xe>
	}
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000320 	.word	0x20000320

0800505c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506e:	3304      	adds	r3, #4
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d047      	beq.n	8005106 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800507c:	330c      	adds	r3, #12
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	3301      	adds	r3, #1
 800508a:	7818      	ldrb	r0, [r3, #0]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	2301      	movs	r3, #1
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	f7ff fd69 	bl	8004b68 <disk_write>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <sync_window+0x46>
			res = FR_DISK_ERR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
 80050a0:	e031      	b.n	8005106 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a8:	3304      	adds	r3, #4
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	1ad2      	subs	r2, r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050c0:	3318      	adds	r3, #24
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d21e      	bcs.n	8005106 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ce:	3303      	adds	r3, #3
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e014      	b.n	8005100 <sync_window+0xa4>
					wsect += fs->fsize;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050dc:	3318      	adds	r3, #24
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	3301      	adds	r3, #1
 80050ee:	7818      	ldrb	r0, [r3, #0]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	2301      	movs	r3, #1
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	f7ff fd37 	bl	8004b68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d8e7      	bhi.n	80050d6 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8005106:	7bfb      	ldrb	r3, [r7, #15]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005124:	330c      	adds	r3, #12
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d01f      	beq.n	800516e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ff94 	bl	800505c <sync_window>
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d117      	bne.n	800516e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005144:	3301      	adds	r3, #1
 8005146:	7818      	ldrb	r0, [r3, #0]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	2301      	movs	r3, #1
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	f7ff fceb 	bl	8004b28 <disk_read>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d004      	beq.n	8005162 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005168:	330c      	adds	r3, #12
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800516e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff6b 	bl	800505c <sync_window>
 8005186:	4603      	mov	r3, r0
 8005188:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 80bd 	bne.w	800530c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b03      	cmp	r3, #3
 800519c:	f040 80a7 	bne.w	80052ee <sync_fs+0x176>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a6:	3305      	adds	r3, #5
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	f040 809f 	bne.w	80052ee <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	330a      	adds	r3, #10
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	2100      	movs	r1, #0
 80051c0:	f7ff fd2e 	bl	8004c20 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2255      	movs	r2, #85	; 0x55
 80051c8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	22aa      	movs	r2, #170	; 0xaa
 80051d0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2252      	movs	r2, #82	; 0x52
 80051d8:	701a      	strb	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2252      	movs	r2, #82	; 0x52
 80051de:	705a      	strb	r2, [r3, #1]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2261      	movs	r2, #97	; 0x61
 80051e4:	709a      	strb	r2, [r3, #2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2241      	movs	r2, #65	; 0x41
 80051ea:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2272      	movs	r2, #114	; 0x72
 80051f0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2272      	movs	r2, #114	; 0x72
 80051f8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2241      	movs	r2, #65	; 0x41
 8005200:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2261      	movs	r2, #97	; 0x61
 8005208:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005212:	3310      	adds	r3, #16
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005224:	3310      	adds	r3, #16
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	b29b      	uxth	r3, r3
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523c:	3310      	adds	r3, #16
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0c1b      	lsrs	r3, r3, #16
 8005242:	b2da      	uxtb	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005250:	3310      	adds	r3, #16
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e1b      	lsrs	r3, r3, #24
 8005256:	b2da      	uxtb	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005264:	330c      	adds	r3, #12
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b2da      	uxtb	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005276:	330c      	adds	r3, #12
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	b29b      	uxth	r3, r3
 8005280:	b2da      	uxtb	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528e:	330c      	adds	r3, #12
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	0c1b      	lsrs	r3, r3, #16
 8005294:	b2da      	uxtb	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a2:	330c      	adds	r3, #12
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b6:	331c      	adds	r3, #28
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052c2:	330c      	adds	r3, #12
 80052c4:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052cc:	3301      	adds	r3, #1
 80052ce:	7818      	ldrb	r0, [r3, #0]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052d8:	330c      	adds	r3, #12
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	2301      	movs	r3, #1
 80052de:	f7ff fc43 	bl	8004b68 <disk_write>
			fs->fsi_flag = 0;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e8:	3305      	adds	r3, #5
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f4:	3301      	adds	r3, #1
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2200      	movs	r2, #0
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff fc53 	bl	8004ba8 <disk_ioctl>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	3b02      	subs	r3, #2
 8005324:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532c:	3314      	adds	r3, #20
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3b02      	subs	r3, #2
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d301      	bcc.n	800533c <clust2sect+0x26>
 8005338:	2300      	movs	r3, #0
 800533a:	e00e      	b.n	800535a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005342:	3302      	adds	r3, #2
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	fb03 f202 	mul.w	r2, r3, r2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005354:	3308      	adds	r3, #8
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4413      	add	r3, r2
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d907      	bls.n	8005384 <get_fat+0x20>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537a:	3314      	adds	r3, #20
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	429a      	cmp	r2, r3
 8005382:	d302      	bcc.n	800538a <get_fat+0x26>
		val = 1;	/* Internal error */
 8005384:	2301      	movs	r3, #1
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	e0ec      	b.n	8005564 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b03      	cmp	r3, #3
 800539a:	f000 809e 	beq.w	80054da <get_fat+0x176>
 800539e:	2b03      	cmp	r3, #3
 80053a0:	f300 80d6 	bgt.w	8005550 <get_fat+0x1ec>
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d002      	beq.n	80053ae <get_fat+0x4a>
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d063      	beq.n	8005474 <get_fat+0x110>
 80053ac:	e0d0      	b.n	8005550 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ca:	330a      	adds	r3, #10
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	4619      	mov	r1, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053d6:	4413      	add	r3, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fe98 	bl	8005110 <move_window>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 80b7 	bne.w	8005556 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	60fa      	str	r2, [r7, #12]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053f4:	320a      	adds	r2, #10
 80053f6:	8812      	ldrh	r2, [r2, #0]
 80053f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80053fc:	fb02 f201 	mul.w	r2, r2, r1
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	5cd3      	ldrb	r3, [r2, r3]
 8005406:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005416:	330a      	adds	r3, #10
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	4619      	mov	r1, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005422:	4413      	add	r3, r2
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fe72 	bl	8005110 <move_window>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 8093 	bne.w	800555a <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543a:	330a      	adds	r3, #10
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	fbb3 f1f2 	udiv	r1, r3, r2
 8005446:	fb02 f201 	mul.w	r2, r2, r1
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	461a      	mov	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <get_fat+0x106>
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	e002      	b.n	8005470 <get_fat+0x10c>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005470:	617b      	str	r3, [r7, #20]
			break;
 8005472:	e077      	b.n	8005564 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005482:	330a      	adds	r3, #10
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	4619      	mov	r1, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005492:	4413      	add	r3, r2
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fe3a 	bl	8005110 <move_window>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d15d      	bne.n	800555e <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	005a      	lsls	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ac:	330a      	adds	r3, #10
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80054b4:	fb03 f301 	mul.w	r3, r3, r1
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	b21a      	sxth	r2, r3
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	b21b      	sxth	r3, r3
 80054d0:	4313      	orrs	r3, r2
 80054d2:	b21b      	sxth	r3, r3
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	617b      	str	r3, [r7, #20]
			break;
 80054d8:	e044      	b.n	8005564 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e8:	330a      	adds	r3, #10
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	4619      	mov	r1, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80054f8:	4413      	add	r3, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff fe07 	bl	8005110 <move_window>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d12c      	bne.n	8005562 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	009a      	lsls	r2, r3, #2
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005512:	330a      	adds	r3, #10
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	fbb2 f1f3 	udiv	r1, r2, r3
 800551a:	fb03 f301 	mul.w	r3, r3, r1
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4413      	add	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	3303      	adds	r3, #3
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	061a      	lsls	r2, r3, #24
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	3302      	adds	r3, #2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	4313      	orrs	r3, r2
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	3201      	adds	r2, #1
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	0212      	lsls	r2, r2, #8
 8005540:	4313      	orrs	r3, r2
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800554c:	617b      	str	r3, [r7, #20]
			break;
 800554e:	e009      	b.n	8005564 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e006      	b.n	8005564 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005556:	bf00      	nop
 8005558:	e004      	b.n	8005564 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005562:	bf00      	nop
		}
	}

	return val;
 8005564:	697b      	ldr	r3, [r7, #20]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b088      	sub	sp, #32
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	60b9      	str	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d907      	bls.n	8005590 <put_fat+0x22>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005586:	3314      	adds	r3, #20
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	429a      	cmp	r2, r3
 800558e:	d302      	bcc.n	8005596 <put_fat+0x28>
		res = FR_INT_ERR;
 8005590:	2302      	movs	r3, #2
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e146      	b.n	8005824 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	f000 80d9 	beq.w	8005756 <put_fat+0x1e8>
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	f300 8133 	bgt.w	8005810 <put_fat+0x2a2>
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d003      	beq.n	80055b6 <put_fat+0x48>
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	f000 8095 	beq.w	80056de <put_fat+0x170>
 80055b4:	e12c      	b.n	8005810 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4413      	add	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	330a      	adds	r3, #10
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	4619      	mov	r1, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	fbb3 f3f1 	udiv	r3, r3, r1
 80055de:	4413      	add	r3, r2
 80055e0:	4619      	mov	r1, r3
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fd94 	bl	8005110 <move_window>
 80055e8:	4603      	mov	r3, r0
 80055ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80055ec:	7ffb      	ldrb	r3, [r7, #31]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8111 	bne.w	8005816 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	617a      	str	r2, [r7, #20]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005600:	320a      	adds	r2, #10
 8005602:	8812      	ldrh	r2, [r2, #0]
 8005604:	fbb3 f1f2 	udiv	r1, r3, r2
 8005608:	fb02 f201 	mul.w	r2, r2, r1
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <put_fat+0xcc>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	b25b      	sxtb	r3, r3
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	b25a      	sxtb	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	b25b      	sxtb	r3, r3
 8005632:	4313      	orrs	r3, r2
 8005634:	b25b      	sxtb	r3, r3
 8005636:	b2db      	uxtb	r3, r3
 8005638:	e001      	b.n	800563e <put_fat+0xd0>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005648:	3304      	adds	r3, #4
 800564a:	2201      	movs	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	330a      	adds	r3, #10
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	fbb3 f3f1 	udiv	r3, r3, r1
 8005668:	4413      	add	r3, r2
 800566a:	4619      	mov	r1, r3
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff fd4f 	bl	8005110 <move_window>
 8005672:	4603      	mov	r3, r0
 8005674:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005676:	7ffb      	ldrb	r3, [r7, #31]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 80ce 	bne.w	800581a <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005684:	330a      	adds	r3, #10
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005690:	fb02 f201 	mul.w	r2, r2, r1
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <put_fat+0x140>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	091b      	lsrs	r3, r3, #4
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	e00e      	b.n	80056cc <put_fat+0x15e>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	f023 030f 	bic.w	r3, r3, #15
 80056b8:	b25a      	sxtb	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	0a1b      	lsrs	r3, r3, #8
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	4313      	orrs	r3, r2
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d6:	3304      	adds	r3, #4
 80056d8:	2201      	movs	r2, #1
 80056da:	701a      	strb	r2, [r3, #0]
			break;
 80056dc:	e0a2      	b.n	8005824 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ec:	330a      	adds	r3, #10
 80056ee:	881b      	ldrh	r3, [r3, #0]
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	4619      	mov	r1, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80056fc:	4413      	add	r3, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fd05 	bl	8005110 <move_window>
 8005706:	4603      	mov	r3, r0
 8005708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800570a:	7ffb      	ldrb	r3, [r7, #31]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 8086 	bne.w	800581e <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	005a      	lsls	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571c:	330a      	adds	r3, #10
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	fbb2 f1f3 	udiv	r1, r2, r3
 8005724:	fb03 f301 	mul.w	r3, r3, r1
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	b2da      	uxtb	r2, r3
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	b29b      	uxth	r3, r3
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b29a      	uxth	r2, r3
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	3301      	adds	r3, #1
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	3304      	adds	r3, #4
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
			break;
 8005754:	e066      	b.n	8005824 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005764:	330a      	adds	r3, #10
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	b29b      	uxth	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	fbb3 f3f1 	udiv	r3, r3, r1
 8005774:	4413      	add	r3, r2
 8005776:	4619      	mov	r1, r3
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fcc9 	bl	8005110 <move_window>
 800577e:	4603      	mov	r3, r0
 8005780:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d14c      	bne.n	8005822 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	009a      	lsls	r2, r3, #2
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005792:	330a      	adds	r3, #10
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	fbb2 f1f3 	udiv	r1, r2, r3
 800579a:	fb03 f301 	mul.w	r3, r3, r1
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	3303      	adds	r3, #3
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	061a      	lsls	r2, r3, #24
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	3302      	adds	r3, #2
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	4313      	orrs	r3, r2
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	3201      	adds	r2, #1
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	0212      	lsls	r2, r2, #8
 80057c0:	4313      	orrs	r3, r2
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	3301      	adds	r3, #1
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0c1a      	lsrs	r2, r3, #16
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	3302      	adds	r3, #2
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0e1a      	lsrs	r2, r3, #24
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3303      	adds	r3, #3
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	3304      	adds	r3, #4
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
			break;
 800580e:	e009      	b.n	8005824 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8005810:	2302      	movs	r3, #2
 8005812:	77fb      	strb	r3, [r7, #31]
 8005814:	e006      	b.n	8005824 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8005816:	bf00      	nop
 8005818:	e004      	b.n	8005824 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800581a:	bf00      	nop
 800581c:	e002      	b.n	8005824 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800581e:	bf00      	nop
 8005820:	e000      	b.n	8005824 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8005822:	bf00      	nop
		}
	}

	return res;
 8005824:	7ffb      	ldrb	r3, [r7, #31]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d907      	bls.n	800584e <remove_chain+0x20>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005844:	3314      	adds	r3, #20
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <remove_chain+0x26>
		res = FR_INT_ERR;
 800584e:	2302      	movs	r3, #2
 8005850:	73fb      	strb	r3, [r7, #15]
 8005852:	e04f      	b.n	80058f4 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005858:	e040      	b.n	80058dc <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fd81 	bl	8005364 <get_fat>
 8005862:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d041      	beq.n	80058ee <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <remove_chain+0x48>
 8005870:	2302      	movs	r3, #2
 8005872:	73fb      	strb	r3, [r7, #15]
 8005874:	e03e      	b.n	80058f4 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d102      	bne.n	8005884 <remove_chain+0x56>
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	e037      	b.n	80058f4 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005884:	2200      	movs	r2, #0
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fe70 	bl	800556e <put_fat>
 800588e:	4603      	mov	r3, r0
 8005890:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d12c      	bne.n	80058f2 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589e:	3310      	adds	r3, #16
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a6:	d017      	beq.n	80058d8 <remove_chain+0xaa>
				fs->free_clust++;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ae:	3310      	adds	r3, #16
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ba:	3310      	adds	r3, #16
 80058bc:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c4:	3305      	adds	r3, #5
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d4:	3305      	adds	r3, #5
 80058d6:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e2:	3314      	adds	r3, #20
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3b6      	bcc.n	800585a <remove_chain+0x2c>
 80058ec:	e002      	b.n	80058f4 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <remove_chain+0xc6>
			if (res != FR_OK) break;
 80058f2:	bf00      	nop
		}
	}

	return res;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d113      	bne.n	8005936 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005914:	330c      	adds	r3, #12
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <create_chain+0x32>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005926:	3314      	adds	r3, #20
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	429a      	cmp	r2, r3
 800592e:	d31e      	bcc.n	800596e <create_chain+0x70>
 8005930:	2301      	movs	r3, #1
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e01b      	b.n	800596e <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fd13 	bl	8005364 <get_fat>
 800593e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d801      	bhi.n	800594a <create_chain+0x4c>
 8005946:	2301      	movs	r3, #1
 8005948:	e086      	b.n	8005a58 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005950:	d101      	bne.n	8005956 <create_chain+0x58>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	e080      	b.n	8005a58 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595c:	3314      	adds	r3, #20
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	429a      	cmp	r2, r3
 8005964:	d201      	bcs.n	800596a <create_chain+0x6c>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	e076      	b.n	8005a58 <create_chain+0x15a>
		scl = clst;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	3301      	adds	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	3314      	adds	r3, #20
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d307      	bcc.n	8005998 <create_chain+0x9a>
			ncl = 2;
 8005988:	2302      	movs	r3, #2
 800598a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	429a      	cmp	r2, r3
 8005992:	d901      	bls.n	8005998 <create_chain+0x9a>
 8005994:	2300      	movs	r3, #0
 8005996:	e05f      	b.n	8005a58 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005998:	6979      	ldr	r1, [r7, #20]
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fce2 	bl	8005364 <get_fat>
 80059a0:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00e      	beq.n	80059c6 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d002      	beq.n	80059b6 <create_chain+0xb8>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <create_chain+0xbc>
			return cs;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	e04e      	b.n	8005a58 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d1d7      	bne.n	8005972 <create_chain+0x74>
 80059c2:	2300      	movs	r3, #0
 80059c4:	e048      	b.n	8005a58 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80059c6:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80059c8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff fdcd 	bl	800556e <put_fat>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <create_chain+0xf4>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff fdc0 	bl	800556e <put_fat>
 80059ee:	4603      	mov	r3, r0
 80059f0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d126      	bne.n	8005a46 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fe:	330c      	adds	r3, #12
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a0a:	3310      	adds	r3, #16
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a12:	d020      	beq.n	8005a56 <create_chain+0x158>
			fs->free_clust--;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1a:	3310      	adds	r3, #16
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	1e5a      	subs	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a26:	3310      	adds	r3, #16
 8005a28:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a30:	3305      	adds	r3, #5
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a40:	3305      	adds	r3, #5
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e007      	b.n	8005a56 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d102      	bne.n	8005a52 <create_chain+0x154>
 8005a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a50:	e000      	b.n	8005a54 <create_chain+0x156>
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005a56:	697b      	ldr	r3, [r7, #20]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a70:	3304      	adds	r3, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a84:	330a      	adds	r3, #10
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1d1a      	adds	r2, r3, #4
 8005aaa:	613a      	str	r2, [r7, #16]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <clmt_clust+0x5a>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e010      	b.n	8005adc <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d307      	bcc.n	8005ad2 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	3304      	adds	r3, #4
 8005ace:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ad0:	e7e9      	b.n	8005aa6 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8005ad2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	4413      	add	r3, r2
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b086      	sub	sp, #24
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afa:	3306      	adds	r3, #6
 8005afc:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b04:	3308      	adds	r3, #8
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d00a      	beq.n	8005b26 <dir_sdi+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d301      	bcc.n	8005b2a <dir_sdi+0x44>
		return FR_INT_ERR;
 8005b26:	2302      	movs	r3, #2
 8005b28:	e0b4      	b.n	8005c94 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d111      	bne.n	8005b54 <dir_sdi+0x6e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d108      	bne.n	8005b54 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b4e:	3304      	adds	r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d117      	bne.n	8005b8a <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b66:	3308      	adds	r3, #8
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d301      	bcc.n	8005b76 <dir_sdi+0x90>
			return FR_INT_ERR;
 8005b72:	2302      	movs	r3, #2
 8005b74:	e08e      	b.n	8005c94 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b82:	3304      	adds	r3, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	e046      	b.n	8005c18 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b96:	330a      	adds	r3, #10
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bac:	3302      	adds	r3, #2
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	fb03 f302 	mul.w	r3, r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005bb6:	e022      	b.n	8005bfe <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6979      	ldr	r1, [r7, #20]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fbce 	bl	8005364 <get_fat>
 8005bc8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d101      	bne.n	8005bd6 <dir_sdi+0xf0>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e05e      	b.n	8005c94 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d90a      	bls.n	8005bf2 <dir_sdi+0x10c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	3314      	adds	r3, #20
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d301      	bcc.n	8005bf6 <dir_sdi+0x110>
				return FR_INT_ERR;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e04e      	b.n	8005c94 <dir_sdi+0x1ae>
			idx -= ic;
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d2d8      	bcs.n	8005bb8 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6979      	ldr	r1, [r7, #20]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fb80 	bl	8005316 <clust2sect>
 8005c16:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1e:	330c      	adds	r3, #12
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <dir_sdi+0x148>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e032      	b.n	8005c94 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3a:	330a      	adds	r3, #10
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	441a      	add	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c54:	3310      	adds	r3, #16
 8005c56:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6e:	330a      	adds	r3, #10
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	461a      	mov	r2, r3
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c7e:	fb02 f201 	mul.w	r2, r2, r1
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	015b      	lsls	r3, r3, #5
 8005c86:	18c2      	adds	r2, r0, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	3314      	adds	r3, #20
 8005c90:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cac:	3306      	adds	r3, #6
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <dir_next+0x2e>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc2:	3310      	adds	r3, #16
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <dir_next+0x32>
		return FR_NO_FILE;
 8005cca:	2304      	movs	r3, #4
 8005ccc:	e144      	b.n	8005f58 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cda:	330a      	adds	r3, #10
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cea:	fb02 f201 	mul.w	r2, r2, r1
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f040 810c 	bne.w	8005f0e <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfc:	3310      	adds	r3, #16
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d08:	3310      	adds	r3, #16
 8005d0a:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d12:	330c      	adds	r3, #12
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10e      	bne.n	8005d38 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d26:	3308      	adds	r3, #8
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	f0c0 80ed 	bcc.w	8005f0e <dir_next+0x272>
				return FR_NO_FILE;
 8005d34:	2304      	movs	r3, #4
 8005d36:	e10f      	b.n	8005f58 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	330a      	adds	r3, #10
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d60:	3302      	adds	r3, #2
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f040 80d0 	bne.w	8005f0e <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7ff faee 	bl	8005364 <get_fat>
 8005d88:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d801      	bhi.n	8005d94 <dir_next+0xf8>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0e1      	b.n	8005f58 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d101      	bne.n	8005da0 <dir_next+0x104>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e0db      	b.n	8005f58 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dac:	3314      	adds	r3, #20
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	f0c0 8097 	bcc.w	8005ee6 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <dir_next+0x126>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	e0ca      	b.n	8005f58 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f7ff fd91 	bl	80058fe <create_chain>
 8005ddc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <dir_next+0x14c>
 8005de4:	2307      	movs	r3, #7
 8005de6:	e0b7      	b.n	8005f58 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <dir_next+0x156>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0b2      	b.n	8005f58 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d101      	bne.n	8005dfe <dir_next+0x162>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e0ac      	b.n	8005f58 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff f928 	bl	800505c <sync_window>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <dir_next+0x17a>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e0a0      	b.n	8005f58 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2c:	330a      	adds	r3, #10
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	2100      	movs	r1, #0
 8005e34:	f7fe fef4 	bl	8004c20 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e46:	681c      	ldr	r4, [r3, #0]
 8005e48:	6979      	ldr	r1, [r7, #20]
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f7ff fa63 	bl	8005316 <clust2sect>
 8005e50:	4602      	mov	r2, r0
 8005e52:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8005e56:	330c      	adds	r3, #12
 8005e58:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	e024      	b.n	8005eaa <dir_next+0x20e>
						dp->fs->wflag = 1;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2201      	movs	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff f8ee 	bl	800505c <sync_window>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <dir_next+0x1ee>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e066      	b.n	8005f58 <dir_next+0x2bc>
						dp->fs->winsect++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005e96:	330c      	adds	r3, #12
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb6:	3302      	adds	r3, #2
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d3ce      	bcc.n	8005e60 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005ece:	330c      	adds	r3, #12
 8005ed0:	6819      	ldr	r1, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	1a8a      	subs	r2, r1, r2
 8005ede:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eec:	330c      	adds	r3, #12
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fa0a 	bl	8005316 <clust2sect>
 8005f02:	4602      	mov	r2, r0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0a:	3310      	adds	r3, #16
 8005f0c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	3306      	adds	r3, #6
 8005f1a:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f32:	330a      	adds	r3, #10
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f42:	fb02 f201 	mul.w	r2, r2, r1
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	015b      	lsls	r3, r3, #5
 8005f4a:	18c2      	adds	r2, r0, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f52:	3314      	adds	r3, #20
 8005f54:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd90      	pop	{r4, r7, pc}

08005f60 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff fdba 	bl	8005ae6 <dir_sdi>
 8005f72:	4603      	mov	r3, r0
 8005f74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d138      	bne.n	8005fee <dir_alloc+0x8e>
		n = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8e:	3310      	adds	r3, #16
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7ff f8bb 	bl	8005110 <move_window>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d123      	bne.n	8005fec <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005faa:	3314      	adds	r3, #20
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2be5      	cmp	r3, #229	; 0xe5
 8005fb2:	d007      	beq.n	8005fc4 <dir_alloc+0x64>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fba:	3314      	adds	r3, #20
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d102      	bne.n	8005fd8 <dir_alloc+0x78>
 8005fd2:	e00c      	b.n	8005fee <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8005fd8:	2101      	movs	r1, #1
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fe5e 	bl	8005c9c <dir_next>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ca      	beq.n	8005f80 <dir_alloc+0x20>
 8005fea:	e000      	b.n	8005fee <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8005fec:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d101      	bne.n	8005ff8 <dir_alloc+0x98>
 8005ff4:	2307      	movs	r3, #7
 8005ff6:	73fb      	strb	r3, [r7, #15]
	return res;
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	331b      	adds	r3, #27
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	b21a      	sxth	r2, r3
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	331a      	adds	r3, #26
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	b21b      	sxth	r3, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	b21b      	sxth	r3, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d10f      	bne.n	8006052 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	3315      	adds	r3, #21
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	b21a      	sxth	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	3314      	adds	r3, #20
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b21b      	sxth	r3, r3
 8006044:	4313      	orrs	r3, r2
 8006046:	b21b      	sxth	r3, r3
 8006048:	b29b      	uxth	r3, r3
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

	return cl;
 8006052:	68fb      	ldr	r3, [r7, #12]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr

0800605e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	331a      	adds	r3, #26
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	331b      	adds	r3, #27
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	0c1a      	lsrs	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3314      	adds	r3, #20
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	0c1b      	lsrs	r3, r3, #16
 8006092:	b29b      	uxth	r3, r3
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	b29a      	uxth	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3315      	adds	r3, #21
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
	...

080060ac <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	2301      	movs	r3, #1
 80060d2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80060d4:	4a2b      	ldr	r2, [pc, #172]	; (8006184 <cmp_lfn+0xd8>)
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4413      	add	r3, r2
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	4413      	add	r3, r2
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	4926      	ldr	r1, [pc, #152]	; (8006184 <cmp_lfn+0xd8>)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	440b      	add	r3, r1
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	440b      	add	r3, r1
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b21b      	sxth	r3, r3
 80060fa:	4313      	orrs	r3, r2
 80060fc:	b21b      	sxth	r3, r3
 80060fe:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006100:	89fb      	ldrh	r3, [r7, #14]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d019      	beq.n	800613a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8006106:	89bb      	ldrh	r3, [r7, #12]
 8006108:	4618      	mov	r0, r3
 800610a:	f002 fcb7 	bl	8008a7c <ff_wtoupper>
 800610e:	4603      	mov	r3, r0
 8006110:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2bfe      	cmp	r3, #254	; 0xfe
 8006116:	d80e      	bhi.n	8006136 <cmp_lfn+0x8a>
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	617a      	str	r2, [r7, #20]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	4618      	mov	r0, r3
 8006128:	f002 fca8 	bl	8008a7c <ff_wtoupper>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	89fb      	ldrh	r3, [r7, #14]
 8006132:	4293      	cmp	r3, r2
 8006134:	d008      	beq.n	8006148 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8006136:	2300      	movs	r3, #0
 8006138:	e01f      	b.n	800617a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800613a:	89bb      	ldrh	r3, [r7, #12]
 800613c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006140:	4293      	cmp	r3, r2
 8006142:	d001      	beq.n	8006148 <cmp_lfn+0x9c>
 8006144:	2300      	movs	r3, #0
 8006146:	e018      	b.n	800617a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3301      	adds	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b0c      	cmp	r3, #12
 8006152:	d9bf      	bls.n	80060d4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <cmp_lfn+0xcc>
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d008      	beq.n	8006178 <cmp_lfn+0xcc>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <cmp_lfn+0xcc>
		return 0;
 8006174:	2300      	movs	r3, #0
 8006176:	e000      	b.n	800617a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8006178:	2301      	movs	r3, #1
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	0800bebc 	.word	0x0800bebc

08006188 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8006188:	b480      	push	{r7}
 800618a:	b089      	sub	sp, #36	; 0x24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	460b      	mov	r3, r1
 8006198:	71fb      	strb	r3, [r7, #7]
 800619a:	4613      	mov	r3, r2
 800619c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	330d      	adds	r3, #13
 80061a2:	79ba      	ldrb	r2, [r7, #6]
 80061a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	330b      	adds	r3, #11
 80061aa:	220f      	movs	r2, #15
 80061ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	330c      	adds	r3, #12
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	331a      	adds	r3, #26
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	331b      	adds	r3, #27
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	1e5a      	subs	r2, r3, #1
 80061ca:	4613      	mov	r3, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4413      	add	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	82fb      	strh	r3, [r7, #22]
 80061da:	2300      	movs	r3, #0
 80061dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80061de:	8afb      	ldrh	r3, [r7, #22]
 80061e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <fit_lfn+0x70>
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	61fa      	str	r2, [r7, #28]
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80061f8:	4a1c      	ldr	r2, [pc, #112]	; (800626c <fit_lfn+0xe4>)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	4413      	add	r3, r2
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4413      	add	r3, r2
 8006206:	8afa      	ldrh	r2, [r7, #22]
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	8afb      	ldrh	r3, [r7, #22]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	b299      	uxth	r1, r3
 8006212:	4a16      	ldr	r2, [pc, #88]	; (800626c <fit_lfn+0xe4>)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	4413      	add	r3, r2
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	4413      	add	r3, r2
 8006220:	b2ca      	uxtb	r2, r1
 8006222:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006224:	8afb      	ldrh	r3, [r7, #22]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <fit_lfn+0xa8>
 800622a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800622e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	3301      	adds	r3, #1
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d9d0      	bls.n	80061de <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800623c:	8afb      	ldrh	r3, [r7, #22]
 800623e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006242:	4293      	cmp	r3, r2
 8006244:	d006      	beq.n	8006254 <fit_lfn+0xcc>
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d103      	bne.n	800625c <fit_lfn+0xd4>
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	79fa      	ldrb	r2, [r7, #7]
 8006260:	701a      	strb	r2, [r3, #0]
}
 8006262:	bf00      	nop
 8006264:	3724      	adds	r7, #36	; 0x24
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	0800bebc 	.word	0x0800bebc

08006270 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08c      	sub	sp, #48	; 0x30
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800627e:	220b      	movs	r2, #11
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7fe fcae 	bl	8004be4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b05      	cmp	r3, #5
 800628c:	d92b      	bls.n	80062e6 <gen_numname+0x76>
		sr = seq;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006292:	e022      	b.n	80062da <gen_numname+0x6a>
			wc = *lfn++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800629e:	2300      	movs	r3, #0
 80062a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a2:	e017      	b.n	80062d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	005a      	lsls	r2, r3, #1
 80062a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	4413      	add	r3, r2
 80062b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80062b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d005      	beq.n	80062ce <gen_numname+0x5e>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80062c8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80062cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	3301      	adds	r3, #1
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	d9e4      	bls.n	80062a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1d8      	bne.n	8006294 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80062e6:	2307      	movs	r3, #7
 80062e8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	3330      	adds	r3, #48	; 0x30
 80062f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80062fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062fe:	2b39      	cmp	r3, #57	; 0x39
 8006300:	d904      	bls.n	800630c <gen_numname+0x9c>
 8006302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006306:	3307      	adds	r3, #7
 8006308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	62ba      	str	r2, [r7, #40]	; 0x28
 8006312:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006316:	4413      	add	r3, r2
 8006318:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800631c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1de      	bne.n	80062ea <gen_numname+0x7a>
	ns[i] = '~';
 800632c:	f107 0214 	add.w	r2, r7, #20
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	4413      	add	r3, r2
 8006334:	227e      	movs	r2, #126	; 0x7e
 8006336:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006338:	2300      	movs	r3, #0
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
 800633c:	e002      	b.n	8006344 <gen_numname+0xd4>
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	3301      	adds	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
 8006344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	429a      	cmp	r2, r3
 800634a:	d205      	bcs.n	8006358 <gen_numname+0xe8>
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	4413      	add	r3, r2
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b20      	cmp	r3, #32
 8006356:	d1f2      	bne.n	800633e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2b07      	cmp	r3, #7
 800635c:	d808      	bhi.n	8006370 <gen_numname+0x100>
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	62ba      	str	r2, [r7, #40]	; 0x28
 8006364:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006368:	4413      	add	r3, r2
 800636a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800636e:	e000      	b.n	8006372 <gen_numname+0x102>
 8006370:	2120      	movs	r1, #32
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	627a      	str	r2, [r7, #36]	; 0x24
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	460a      	mov	r2, r1
 800637e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	2b07      	cmp	r3, #7
 8006384:	d9e8      	bls.n	8006358 <gen_numname+0xe8>
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	3730      	adds	r7, #48	; 0x30
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800639c:	230b      	movs	r3, #11
 800639e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	0852      	lsrs	r2, r2, #1
 80063a6:	01db      	lsls	r3, r3, #7
 80063a8:	4313      	orrs	r3, r2
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	1c59      	adds	r1, r3, #1
 80063b0:	6079      	str	r1, [r7, #4]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	4413      	add	r3, r2
 80063b6:	73fb      	strb	r3, [r7, #15]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1ed      	bne.n	80063a0 <sum_sfn+0x10>
	return sum;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80063d8:	2100      	movs	r1, #0
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff fb83 	bl	8005ae6 <dir_sdi>
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <dir_find+0x1e>
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	e0c1      	b.n	8006572 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80063ee:	23ff      	movs	r3, #255	; 0xff
 80063f0:	753b      	strb	r3, [r7, #20]
 80063f2:	7d3b      	ldrb	r3, [r7, #20]
 80063f4:	757b      	strb	r3, [r7, #21]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80063fc:	3304      	adds	r3, #4
 80063fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006402:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006412:	3310      	adds	r3, #16
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fe fe79 	bl	8005110 <move_window>
 800641e:	4603      	mov	r3, r0
 8006420:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 809e 	bne.w	8006566 <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006430:	3314      	adds	r3, #20
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800643c:	7dbb      	ldrb	r3, [r7, #22]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <dir_find+0x78>
 8006442:	2304      	movs	r3, #4
 8006444:	75fb      	strb	r3, [r7, #23]
 8006446:	e093      	b.n	8006570 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	330b      	adds	r3, #11
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006452:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006454:	7dbb      	ldrb	r3, [r7, #22]
 8006456:	2be5      	cmp	r3, #229	; 0xe5
 8006458:	d007      	beq.n	800646a <dir_find+0x9a>
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00c      	beq.n	800647e <dir_find+0xae>
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	d009      	beq.n	800647e <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800646a:	23ff      	movs	r3, #255	; 0xff
 800646c:	757b      	strb	r3, [r7, #21]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006474:	3304      	adds	r3, #4
 8006476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800647a:	801a      	strh	r2, [r3, #0]
 800647c:	e068      	b.n	8006550 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d139      	bne.n	80064f8 <dir_find+0x128>
				if (dp->lfn) {
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d05f      	beq.n	8006550 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d012      	beq.n	80064c0 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	7b5b      	ldrb	r3, [r3, #13]
 800649e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80064a0:	7dbb      	ldrb	r3, [r7, #22]
 80064a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a6:	75bb      	strb	r3, [r7, #22]
 80064a8:	7dbb      	ldrb	r3, [r7, #22]
 80064aa:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064b2:	3306      	adds	r3, #6
 80064b4:	881a      	ldrh	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80064bc:	3304      	adds	r3, #4
 80064be:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80064c0:	7dba      	ldrb	r2, [r7, #22]
 80064c2:	7d7b      	ldrb	r3, [r7, #21]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d114      	bne.n	80064f2 <dir_find+0x122>
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	330d      	adds	r3, #13
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	7d3a      	ldrb	r2, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d10e      	bne.n	80064f2 <dir_find+0x122>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6939      	ldr	r1, [r7, #16]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff fde4 	bl	80060ac <cmp_lfn>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <dir_find+0x122>
 80064ea:	7d7b      	ldrb	r3, [r7, #21]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	e000      	b.n	80064f4 <dir_find+0x124>
 80064f2:	23ff      	movs	r3, #255	; 0xff
 80064f4:	757b      	strb	r3, [r7, #21]
 80064f6:	e02b      	b.n	8006550 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80064f8:	7d7b      	ldrb	r3, [r7, #21]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d107      	bne.n	800650e <dir_find+0x13e>
 80064fe:	6938      	ldr	r0, [r7, #16]
 8006500:	f7ff ff46 	bl	8006390 <sum_sfn>
 8006504:	4603      	mov	r3, r0
 8006506:	461a      	mov	r2, r3
 8006508:	7d3b      	ldrb	r3, [r7, #20]
 800650a:	4293      	cmp	r3, r2
 800650c:	d02d      	beq.n	800656a <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006514:	3318      	adds	r3, #24
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	330b      	adds	r3, #11
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10c      	bne.n	800653e <dir_find+0x16e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652a:	3318      	adds	r3, #24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	220b      	movs	r2, #11
 8006530:	4619      	mov	r1, r3
 8006532:	6938      	ldr	r0, [r7, #16]
 8006534:	f7fe fb8e 	bl	8004c54 <mem_cmp>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d017      	beq.n	800656e <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800653e:	23ff      	movs	r3, #255	; 0xff
 8006540:	757b      	strb	r3, [r7, #21]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006548:	3304      	adds	r3, #4
 800654a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800654e:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006550:	2100      	movs	r1, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fba2 	bl	8005c9c <dir_next>
 8006558:	4603      	mov	r3, r0
 800655a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f43f af50 	beq.w	8006404 <dir_find+0x34>
 8006564:	e004      	b.n	8006570 <dir_find+0x1a0>
		if (res != FR_OK) break;
 8006566:	bf00      	nop
 8006568:	e002      	b.n	8006570 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800656e:	bf00      	nop

	return res;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08c      	sub	sp, #48	; 0x30
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800658a:	3318      	adds	r3, #24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800659a:	f107 030c 	add.w	r3, r7, #12
 800659e:	220c      	movs	r2, #12
 80065a0:	6a39      	ldr	r1, [r7, #32]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fb1e 	bl	8004be4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d039      	beq.n	8006626 <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	330b      	adds	r3, #11
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 80065c4:	2301      	movs	r3, #1
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c8:	e013      	b.n	80065f2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80065ca:	f107 010c 	add.w	r1, r7, #12
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	6a38      	ldr	r0, [r7, #32]
 80065d4:	f7ff fe4c 	bl	8006270 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fef9 	bl	80063d0 <dir_find>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80065e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d106      	bne.n	80065fa <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	3301      	adds	r3, #1
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	2b63      	cmp	r3, #99	; 0x63
 80065f6:	d9e8      	bls.n	80065ca <dir_register+0x4e>
 80065f8:	e000      	b.n	80065fc <dir_register+0x80>
			if (res != FR_OK) break;
 80065fa:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d101      	bne.n	8006606 <dir_register+0x8a>
 8006602:	2307      	movs	r3, #7
 8006604:	e0e3      	b.n	80067ce <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800660a:	2b04      	cmp	r3, #4
 800660c:	d002      	beq.n	8006614 <dir_register+0x98>
 800660e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006612:	e0dc      	b.n	80067ce <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	330b      	adds	r3, #11
 8006618:	7dfa      	ldrb	r2, [r7, #23]
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d014      	beq.n	800665a <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8006630:	2300      	movs	r3, #0
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
 8006634:	e002      	b.n	800663c <dir_register+0xc0>
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	3301      	adds	r3, #1
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f5      	bne.n	8006636 <dir_register+0xba>
		nent = (n + 25) / 13;
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	3319      	adds	r3, #25
 800664e:	4a62      	ldr	r2, [pc, #392]	; (80067d8 <dir_register+0x25c>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	e001      	b.n	800665e <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800665e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fc7d 	bl	8005f60 <dir_alloc>
 8006666:	4603      	mov	r3, r0
 8006668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800666c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006670:	2b00      	cmp	r3, #0
 8006672:	d160      	bne.n	8006736 <dir_register+0x1ba>
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	3b01      	subs	r3, #1
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	d05a      	beq.n	8006736 <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006686:	3306      	adds	r3, #6
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7ff fa27 	bl	8005ae6 <dir_sdi>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800669e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d147      	bne.n	8006736 <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066ac:	3318      	adds	r3, #24
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff fe6d 	bl	8006390 <sum_sfn>
 80066b6:	4603      	mov	r3, r0
 80066b8:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066c8:	3310      	adds	r3, #16
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7fe fd1e 	bl	8005110 <move_window>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80066da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d128      	bne.n	8006734 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f0:	3314      	adds	r3, #20
 80066f2:	6819      	ldr	r1, [r3, #0]
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	7efb      	ldrb	r3, [r7, #27]
 80066fa:	f7ff fd45 	bl	8006188 <fit_lfn>
				dp->fs->wflag = 1;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670a:	3304      	adds	r3, #4
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8006710:	2100      	movs	r1, #0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fac2 	bl	8005c9c <dir_next>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800671e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006722:	2b00      	cmp	r3, #0
 8006724:	d107      	bne.n	8006736 <dir_register+0x1ba>
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	3b01      	subs	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1c3      	bne.n	80066ba <dir_register+0x13e>
 8006732:	e000      	b.n	8006736 <dir_register+0x1ba>
				if (res != FR_OK) break;
 8006734:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800673a:	2b00      	cmp	r3, #0
 800673c:	d145      	bne.n	80067ca <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674c:	3310      	adds	r3, #16
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f7fe fcdc 	bl	8005110 <move_window>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800675e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006762:	2b00      	cmp	r3, #0
 8006764:	d131      	bne.n	80067ca <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676c:	3314      	adds	r3, #20
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2220      	movs	r2, #32
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fa53 	bl	8004c20 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006780:	3314      	adds	r3, #20
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	3318      	adds	r3, #24
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	220b      	movs	r2, #11
 8006790:	4619      	mov	r1, r3
 8006792:	f7fe fa27 	bl	8004be4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679c:	3318      	adds	r3, #24
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330b      	adds	r3, #11
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067aa:	3314      	adds	r3, #20
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	f002 0218 	and.w	r2, r2, #24
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c4:	3304      	adds	r3, #4
 80067c6:	2201      	movs	r2, #1
 80067c8:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 80067ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3730      	adds	r7, #48	; 0x30
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	4ec4ec4f 	.word	0x4ec4ec4f

080067dc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	e002      	b.n	80067f4 <create_name+0x18>
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3301      	adds	r3, #1
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b2f      	cmp	r3, #47	; 0x2f
 80067fa:	d0f8      	beq.n	80067ee <create_name+0x12>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b5c      	cmp	r3, #92	; 0x5c
 8006802:	d0f4      	beq.n	80067ee <create_name+0x12>
	lfn = dp->lfn;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	61ba      	str	r2, [r7, #24]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8006824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006826:	2b1f      	cmp	r3, #31
 8006828:	d92f      	bls.n	800688a <create_name+0xae>
 800682a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800682c:	2b2f      	cmp	r3, #47	; 0x2f
 800682e:	d02c      	beq.n	800688a <create_name+0xae>
 8006830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006832:	2b5c      	cmp	r3, #92	; 0x5c
 8006834:	d029      	beq.n	800688a <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2bfe      	cmp	r3, #254	; 0xfe
 800683a:	d901      	bls.n	8006840 <create_name+0x64>
			return FR_INVALID_NAME;
 800683c:	2306      	movs	r3, #6
 800683e:	e18b      	b.n	8006b58 <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006842:	b2db      	uxtb	r3, r3
 8006844:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006848:	2101      	movs	r1, #1
 800684a:	4618      	mov	r0, r3
 800684c:	f002 f8dc 	bl	8008a08 <ff_convert>
 8006850:	4603      	mov	r3, r0
 8006852:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <create_name+0x82>
 800685a:	2306      	movs	r3, #6
 800685c:	e17c      	b.n	8006b58 <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800685e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d809      	bhi.n	8006878 <create_name+0x9c>
 8006864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006866:	4619      	mov	r1, r3
 8006868:	488f      	ldr	r0, [pc, #572]	; (8006aa8 <create_name+0x2cc>)
 800686a:	f7fe fa19 	bl	8004ca0 <chk_chr>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <create_name+0x9c>
			return FR_INVALID_NAME;
 8006874:	2306      	movs	r3, #6
 8006876:	e16f      	b.n	8006b58 <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	617a      	str	r2, [r7, #20]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006886:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006888:	e7c5      	b.n	8006816 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	441a      	add	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006896:	2b1f      	cmp	r3, #31
 8006898:	d801      	bhi.n	800689e <create_name+0xc2>
 800689a:	2304      	movs	r3, #4
 800689c:	e000      	b.n	80068a0 <create_name+0xc4>
 800689e:	2300      	movs	r3, #0
 80068a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80068a4:	e011      	b.n	80068ca <create_name+0xee>
		w = lfn[di - 1];
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	3b01      	subs	r3, #1
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80068b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d002      	beq.n	80068c4 <create_name+0xe8>
 80068be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068c0:	2b2e      	cmp	r3, #46	; 0x2e
 80068c2:	d106      	bne.n	80068d2 <create_name+0xf6>
		di--;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ea      	bne.n	80068a6 <create_name+0xca>
 80068d0:	e000      	b.n	80068d4 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80068d2:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <create_name+0x102>
 80068da:	2306      	movs	r3, #6
 80068dc:	e13c      	b.n	8006b58 <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f0:	3318      	adds	r3, #24
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	220b      	movs	r2, #11
 80068f6:	2120      	movs	r1, #32
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe f991 	bl	8004c20 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80068fe:	2300      	movs	r3, #0
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	e002      	b.n	800690a <create_name+0x12e>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	3301      	adds	r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	2b20      	cmp	r3, #32
 8006916:	d0f5      	beq.n	8006904 <create_name+0x128>
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	2b2e      	cmp	r3, #46	; 0x2e
 8006924:	d0ee      	beq.n	8006904 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d009      	beq.n	8006940 <create_name+0x164>
 800692c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006930:	f043 0303 	orr.w	r3, r3, #3
 8006934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006938:	e002      	b.n	8006940 <create_name+0x164>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	3b01      	subs	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <create_name+0x17e>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800694c:	3b01      	subs	r3, #1
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	2b2e      	cmp	r3, #46	; 0x2e
 8006958:	d1ef      	bne.n	800693a <create_name+0x15e>

	b = i = 0; ni = 8;
 800695a:	2300      	movs	r3, #0
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	2300      	movs	r3, #0
 8006960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006964:	2308      	movs	r3, #8
 8006966:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	61ba      	str	r2, [r7, #24]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8092 	beq.w	8006aa4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006982:	2b20      	cmp	r3, #32
 8006984:	d006      	beq.n	8006994 <create_name+0x1b8>
 8006986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006988:	2b2e      	cmp	r3, #46	; 0x2e
 800698a:	d10a      	bne.n	80069a2 <create_name+0x1c6>
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	429a      	cmp	r2, r3
 8006992:	d006      	beq.n	80069a2 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 8006994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006998:	f043 0303 	orr.w	r3, r3, #3
 800699c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069a0:	e07f      	b.n	8006aa2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d203      	bcs.n	80069b2 <create_name+0x1d6>
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d123      	bne.n	80069fa <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	2b0b      	cmp	r3, #11
 80069b6:	d106      	bne.n	80069c6 <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 80069b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069bc:	f043 0303 	orr.w	r3, r3, #3
 80069c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069c4:	e077      	b.n	8006ab6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d005      	beq.n	80069da <create_name+0x1fe>
 80069ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d2:	f043 0303 	orr.w	r3, r3, #3
 80069d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d868      	bhi.n	8006ab4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	61bb      	str	r3, [r7, #24]
 80069e6:	2308      	movs	r3, #8
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	230b      	movs	r3, #11
 80069ec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80069ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069f8:	e053      	b.n	8006aa2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80069fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069fc:	2b7f      	cmp	r3, #127	; 0x7f
 80069fe:	d914      	bls.n	8006a2a <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a02:	2100      	movs	r1, #0
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 ffff 	bl	8008a08 <ff_convert>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d004      	beq.n	8006a1e <create_name+0x242>
 8006a14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a16:	3b80      	subs	r3, #128	; 0x80
 8006a18:	4a24      	ldr	r2, [pc, #144]	; (8006aac <create_name+0x2d0>)
 8006a1a:	5cd3      	ldrb	r3, [r2, r3]
 8006a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a22:	f043 0302 	orr.w	r3, r3, #2
 8006a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d007      	beq.n	8006a40 <create_name+0x264>
 8006a30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a32:	4619      	mov	r1, r3
 8006a34:	481e      	ldr	r0, [pc, #120]	; (8006ab0 <create_name+0x2d4>)
 8006a36:	f7fe f933 	bl	8004ca0 <chk_chr>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d008      	beq.n	8006a52 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a40:	235f      	movs	r3, #95	; 0x5f
 8006a42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a48:	f043 0303 	orr.w	r3, r3, #3
 8006a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a50:	e01b      	b.n	8006a8a <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d909      	bls.n	8006a6c <create_name+0x290>
 8006a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5a:	2b5a      	cmp	r3, #90	; 0x5a
 8006a5c:	d806      	bhi.n	8006a6c <create_name+0x290>
					b |= 2;
 8006a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a62:	f043 0302 	orr.w	r3, r3, #2
 8006a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a6a:	e00e      	b.n	8006a8a <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006a6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a6e:	2b60      	cmp	r3, #96	; 0x60
 8006a70:	d90b      	bls.n	8006a8a <create_name+0x2ae>
 8006a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a74:	2b7a      	cmp	r3, #122	; 0x7a
 8006a76:	d808      	bhi.n	8006a8a <create_name+0x2ae>
						b |= 1; w -= 0x20;
 8006a78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a86:	3b20      	subs	r3, #32
 8006a88:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	3318      	adds	r3, #24
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	6239      	str	r1, [r7, #32]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a9e:	b2d2      	uxtb	r2, r2
 8006aa0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006aa2:	e761      	b.n	8006968 <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 8006aa4:	bf00      	nop
 8006aa6:	e006      	b.n	8006ab6 <create_name+0x2da>
 8006aa8:	0800bddc 	.word	0x0800bddc
 8006aac:	0800be3c 	.word	0x0800be3c
 8006ab0:	0800bde8 	.word	0x0800bde8
			if (si > di) break;			/* No extension */
 8006ab4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abc:	3318      	adds	r3, #24
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2be5      	cmp	r3, #229	; 0xe5
 8006ac4:	d106      	bne.n	8006ad4 <create_name+0x2f8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006acc:	3318      	adds	r3, #24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d104      	bne.n	8006ae4 <create_name+0x308>
 8006ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ae8:	f003 030c 	and.w	r3, r3, #12
 8006aec:	2b0c      	cmp	r3, #12
 8006aee:	d005      	beq.n	8006afc <create_name+0x320>
 8006af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d105      	bne.n	8006b08 <create_name+0x32c>
		cf |= NS_LFN;
 8006afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b00:	f043 0302 	orr.w	r3, r3, #2
 8006b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d117      	bne.n	8006b44 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b18:	f003 0303 	and.w	r3, r3, #3
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <create_name+0x350>
 8006b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b24:	f043 0310 	orr.w	r3, r3, #16
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b04      	cmp	r3, #4
 8006b36:	d105      	bne.n	8006b44 <create_name+0x368>
 8006b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b3c:	f043 0308 	orr.w	r3, r3, #8
 8006b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b4a:	3318      	adds	r3, #24
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330b      	adds	r3, #11
 8006b50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b54:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b56:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	; 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b2f      	cmp	r3, #47	; 0x2f
 8006b70:	d003      	beq.n	8006b7a <follow_path+0x1a>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b5c      	cmp	r3, #92	; 0x5c
 8006b78:	d102      	bne.n	8006b80 <follow_path+0x20>
		path++;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b86:	3308      	adds	r3, #8
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b1f      	cmp	r3, #31
 8006b92:	d80c      	bhi.n	8006bae <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8006b94:	2100      	movs	r1, #0
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fe ffa5 	bl	8005ae6 <dir_sdi>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba6:	3314      	adds	r3, #20
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e04c      	b.n	8006c48 <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bae:	463b      	mov	r3, r7
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fe12 	bl	80067dc <create_name>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d13d      	bne.n	8006c3e <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fc04 	bl	80063d0 <dir_find>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bd2:	3318      	adds	r3, #24
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	7adb      	ldrb	r3, [r3, #11]
 8006bd8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d12d      	bne.n	8006c42 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d128      	bne.n	8006c42 <follow_path+0xe2>
 8006bf0:	2305      	movs	r3, #5
 8006bf2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006bf4:	e025      	b.n	8006c42 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d122      	bne.n	8006c46 <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c06:	3314      	adds	r3, #20
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	330b      	adds	r3, #11
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d102      	bne.n	8006c20 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8006c1a:	2305      	movs	r3, #5
 8006c1c:	73fb      	strb	r3, [r7, #15]
 8006c1e:	e013      	b.n	8006c48 <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff f9e9 	bl	8006002 <ld_clust>
 8006c30:	4602      	mov	r2, r0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c38:	3308      	adds	r3, #8
 8006c3a:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c3c:	e7b7      	b.n	8006bae <follow_path+0x4e>
			if (res != FR_OK) break;
 8006c3e:	bf00      	nop
 8006c40:	e002      	b.n	8006c48 <follow_path+0xe8>
				break;
 8006c42:	bf00      	nop
 8006c44:	e000      	b.n	8006c48 <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c46:	bf00      	nop
		}
	}

	return res;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b087      	sub	sp, #28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d031      	beq.n	8006ccc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e002      	b.n	8006c76 <get_ldnumber+0x24>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	3301      	adds	r3, #1
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b1f      	cmp	r3, #31
 8006c7c:	d903      	bls.n	8006c86 <get_ldnumber+0x34>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b3a      	cmp	r3, #58	; 0x3a
 8006c84:	d1f4      	bne.n	8006c70 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b3a      	cmp	r3, #58	; 0x3a
 8006c8c:	d11c      	bne.n	8006cc8 <get_ldnumber+0x76>
			tp = *path;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	60fa      	str	r2, [r7, #12]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	3b30      	subs	r3, #48	; 0x30
 8006c9e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d80e      	bhi.n	8006cc4 <get_ldnumber+0x72>
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d10a      	bne.n	8006cc4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d107      	bne.n	8006cc4 <get_ldnumber+0x72>
					vol = (int)i;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	e002      	b.n	8006cce <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ccc:	693b      	ldr	r3, [r7, #16]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr

08006cd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce8:	3304      	adds	r3, #4
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006cf4:	330c      	adds	r3, #12
 8006cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfa:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fe fa06 	bl	8005110 <move_window>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <check_fs+0x36>
		return 3;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e04a      	b.n	8006da4 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d14:	3301      	adds	r3, #1
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	b21a      	sxth	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006d22:	b21b      	sxth	r3, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b21b      	sxth	r3, r3
 8006d28:	4a20      	ldr	r2, [pc, #128]	; (8006dac <check_fs+0xd4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d001      	beq.n	8006d32 <check_fs+0x5a>
		return 2;
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e038      	b.n	8006da4 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3336      	adds	r3, #54	; 0x36
 8006d36:	3303      	adds	r3, #3
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	061a      	lsls	r2, r3, #24
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	3336      	adds	r3, #54	; 0x36
 8006d40:	3302      	adds	r3, #2
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	041b      	lsls	r3, r3, #16
 8006d46:	4313      	orrs	r3, r2
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	3236      	adds	r2, #54	; 0x36
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	7812      	ldrb	r2, [r2, #0]
 8006d50:	0212      	lsls	r2, r2, #8
 8006d52:	4313      	orrs	r3, r2
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	4a13      	ldr	r2, [pc, #76]	; (8006db0 <check_fs+0xd8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d101      	bne.n	8006d6a <check_fs+0x92>
		return 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e01c      	b.n	8006da4 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3352      	adds	r3, #82	; 0x52
 8006d6e:	3303      	adds	r3, #3
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	061a      	lsls	r2, r3, #24
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3352      	adds	r3, #82	; 0x52
 8006d78:	3302      	adds	r3, #2
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	3252      	adds	r2, #82	; 0x52
 8006d84:	3201      	adds	r2, #1
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	0212      	lsls	r2, r2, #8
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d98:	4a05      	ldr	r2, [pc, #20]	; (8006db0 <check_fs+0xd8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d101      	bne.n	8006da2 <check_fs+0xca>
		return 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e000      	b.n	8006da4 <check_fs+0xcc>

	return 1;
 8006da2:	2301      	movs	r3, #1
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	ffffaa55 	.word	0xffffaa55
 8006db0:	00544146 	.word	0x00544146

08006db4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b096      	sub	sp, #88	; 0x58
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006dc8:	68b8      	ldr	r0, [r7, #8]
 8006dca:	f7ff ff42 	bl	8006c52 <get_ldnumber>
 8006dce:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da01      	bge.n	8006dda <find_volume+0x26>
 8006dd6:	230b      	movs	r3, #11
 8006dd8:	e33c      	b.n	8007454 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dda:	4ab3      	ldr	r2, [pc, #716]	; (80070a8 <find_volume+0x2f4>)
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <find_volume+0x3a>
 8006dea:	230c      	movs	r3, #12
 8006dec:	e332      	b.n	8007454 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01d      	beq.n	8006e3c <find_volume+0x88>
		stat = disk_status(fs->drv);
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e06:	3301      	adds	r3, #1
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fd fe4c 	bl	8004aa8 <disk_status>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10c      	bne.n	8006e3c <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <find_volume+0x84>
 8006e28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e2c:	f003 0304 	and.w	r3, r3, #4
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006e34:	230a      	movs	r3, #10
 8006e36:	e30d      	b.n	8007454 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e30b      	b.n	8007454 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e50:	3301      	adds	r3, #1
 8006e52:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fd fe3c 	bl	8004adc <disk_initialize>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e76:	2303      	movs	r3, #3
 8006e78:	e2ec      	b.n	8007454 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <find_volume+0xdc>
 8006e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006e8c:	230a      	movs	r3, #10
 8006e8e:	e2e1      	b.n	8007454 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e96:	3301      	adds	r3, #1
 8006e98:	7818      	ldrb	r0, [r3, #0]
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea0:	330a      	adds	r3, #10
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	f7fd fe7f 	bl	8004ba8 <disk_ioctl>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10f      	bne.n	8006ed0 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb6:	330a      	adds	r3, #10
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebe:	d307      	bcc.n	8006ed0 <find_volume+0x11c>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec6:	330a      	adds	r3, #10
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d901      	bls.n	8006ed4 <find_volume+0x120>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e2bf      	b.n	8007454 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006ed8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006eda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006edc:	f7ff fefc 	bl	8006cd8 <check_fs>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d155      	bne.n	8006f9a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006eee:	2300      	movs	r3, #0
 8006ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef2:	e029      	b.n	8006f48 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006efe:	4413      	add	r3, r2
 8006f00:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	3304      	adds	r3, #4
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d012      	beq.n	8006f32 <find_volume+0x17e>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	330b      	adds	r3, #11
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	061a      	lsls	r2, r3, #24
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	330a      	adds	r3, #10
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	041b      	lsls	r3, r3, #16
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f20:	3209      	adds	r2, #9
 8006f22:	7812      	ldrb	r2, [r2, #0]
 8006f24:	0212      	lsls	r2, r2, #8
 8006f26:	4313      	orrs	r3, r2
 8006f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2a:	3208      	adds	r2, #8
 8006f2c:	7812      	ldrb	r2, [r2, #0]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	e000      	b.n	8006f34 <find_volume+0x180>
 8006f32:	2200      	movs	r2, #0
 8006f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006f3c:	440b      	add	r3, r1
 8006f3e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	3301      	adds	r3, #1
 8006f46:	643b      	str	r3, [r7, #64]	; 0x40
 8006f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d9d2      	bls.n	8006ef4 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006f4e:	2300      	movs	r3, #0
 8006f50:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <find_volume+0x1aa>
 8006f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006f66:	4413      	add	r3, r2
 8006f68:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f6c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <find_volume+0x1cc>
 8006f74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f78:	f7ff feae 	bl	8006cd8 <check_fs>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	e000      	b.n	8006f82 <find_volume+0x1ce>
 8006f80:	2302      	movs	r3, #2
 8006f82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <find_volume+0x1e6>
 8006f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f90:	3301      	adds	r3, #1
 8006f92:	643b      	str	r3, [r7, #64]	; 0x40
 8006f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d9e1      	bls.n	8006f5e <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d101      	bne.n	8006fa6 <find_volume+0x1f2>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e256      	b.n	8007454 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006fa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <find_volume+0x1fe>
 8006fae:	230d      	movs	r3, #13
 8006fb0:	e250      	b.n	8007454 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	7b1b      	ldrb	r3, [r3, #12]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	b21a      	sxth	r2, r3
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	7adb      	ldrb	r3, [r3, #11]
 8006fbe:	b21b      	sxth	r3, r3
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	b21a      	sxth	r2, r3
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fca:	330a      	adds	r3, #10
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	b21b      	sxth	r3, r3
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d001      	beq.n	8006fd8 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8006fd4:	230d      	movs	r3, #13
 8006fd6:	e23d      	b.n	8007454 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	7ddb      	ldrb	r3, [r3, #23]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	b21a      	sxth	r2, r3
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	7d9b      	ldrb	r3, [r3, #22]
 8006fe4:	b21b      	sxth	r3, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	b21b      	sxth	r3, r3
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d112      	bne.n	800701a <find_volume+0x266>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006ffa:	061a      	lsls	r2, r3, #24
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	4313      	orrs	r3, r2
 8007006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007008:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800700c:	0212      	lsls	r2, r2, #8
 800700e:	4313      	orrs	r3, r2
 8007010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007012:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8007016:	4313      	orrs	r3, r2
 8007018:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007020:	3318      	adds	r3, #24
 8007022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007024:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	7c1a      	ldrb	r2, [r3, #16]
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007030:	3303      	adds	r3, #3
 8007032:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703a:	3303      	adds	r3, #3
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d008      	beq.n	8007054 <find_volume+0x2a0>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007048:	3303      	adds	r3, #3
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d001      	beq.n	8007054 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8007050:	230d      	movs	r3, #13
 8007052:	e1ff      	b.n	8007454 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705a:	3303      	adds	r3, #3
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	7b5a      	ldrb	r2, [r3, #13]
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007072:	3302      	adds	r3, #2
 8007074:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707c:	3302      	adds	r3, #2
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00e      	beq.n	80070a2 <find_volume+0x2ee>
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708a:	3302      	adds	r3, #2
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007096:	3302      	adds	r3, #2
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	3b01      	subs	r3, #1
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 80070a2:	230d      	movs	r3, #13
 80070a4:	e1d6      	b.n	8007454 <find_volume+0x6a0>
 80070a6:	bf00      	nop
 80070a8:	20000318 	.word	0x20000318

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	7c9b      	ldrb	r3, [r3, #18]
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	b21a      	sxth	r2, r3
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	7c5b      	ldrb	r3, [r3, #17]
 80070b8:	b21b      	sxth	r3, r3
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b21b      	sxth	r3, r3
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c6:	3308      	adds	r3, #8
 80070c8:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80070ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d0:	3308      	adds	r3, #8
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070da:	330a      	adds	r3, #10
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	fbb2 f1f3 	udiv	r1, r2, r3
 80070e6:	fb03 f301 	mul.w	r3, r3, r1
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 80070f2:	230d      	movs	r3, #13
 80070f4:	e1ae      	b.n	8007454 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	7d1b      	ldrb	r3, [r3, #20]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	b21a      	sxth	r2, r3
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	7cdb      	ldrb	r3, [r3, #19]
 8007102:	b21b      	sxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	b21b      	sxth	r3, r3
 8007108:	b29b      	uxth	r3, r3
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800710c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710e:	2b00      	cmp	r3, #0
 8007110:	d112      	bne.n	8007138 <find_volume+0x384>
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007118:	061a      	lsls	r2, r3, #24
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	4313      	orrs	r3, r2
 8007124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007126:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800712a:	0212      	lsls	r2, r2, #8
 800712c:	4313      	orrs	r3, r2
 800712e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007130:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007134:	4313      	orrs	r3, r2
 8007136:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	7bdb      	ldrb	r3, [r3, #15]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	b21a      	sxth	r2, r3
 8007140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007142:	7b9b      	ldrb	r3, [r3, #14]
 8007144:	b21b      	sxth	r3, r3
 8007146:	4313      	orrs	r3, r2
 8007148:	b21b      	sxth	r3, r3
 800714a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800714c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <find_volume+0x3a2>
 8007152:	230d      	movs	r3, #13
 8007154:	e17e      	b.n	8007454 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007156:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715a:	441a      	add	r2, r3
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007162:	3308      	adds	r3, #8
 8007164:	8819      	ldrh	r1, [r3, #0]
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716c:	330a      	adds	r3, #10
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	b29b      	uxth	r3, r3
 8007174:	fbb1 f3f3 	udiv	r3, r1, r3
 8007178:	b29b      	uxth	r3, r3
 800717a:	4413      	add	r3, r2
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800717e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	429a      	cmp	r2, r3
 8007184:	d201      	bcs.n	800718a <find_volume+0x3d6>
 8007186:	230d      	movs	r3, #13
 8007188:	e164      	b.n	8007454 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800718a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007196:	3302      	adds	r3, #2
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	fbb2 f3f3 	udiv	r3, r2, r3
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <find_volume+0x3f6>
 80071a6:	230d      	movs	r3, #13
 80071a8:	e154      	b.n	8007454 <find_volume+0x6a0>
	fmt = FS_FAT12;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d902      	bls.n	80071c0 <find_volume+0x40c>
 80071ba:	2302      	movs	r3, #2
 80071bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d902      	bls.n	80071d0 <find_volume+0x41c>
 80071ca:	2303      	movs	r3, #3
 80071cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071da:	3314      	adds	r3, #20
 80071dc:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e4:	331c      	adds	r3, #28
 80071e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071e8:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80071ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ee:	441a      	add	r2, r3
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80071f6:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80071f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	441a      	add	r2, r3
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007204:	3308      	adds	r3, #8
 8007206:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8007208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800720c:	2b03      	cmp	r3, #3
 800720e:	d127      	bne.n	8007260 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007216:	3308      	adds	r3, #8
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <find_volume+0x46e>
 800721e:	230d      	movs	r3, #13
 8007220:	e118      	b.n	8007454 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007228:	061a      	lsls	r2, r3, #24
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	4313      	orrs	r3, r2
 8007234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007236:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800723a:	0212      	lsls	r2, r2, #8
 800723c:	4313      	orrs	r3, r2
 800723e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007240:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007244:	431a      	orrs	r2, r3
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800724c:	3304      	adds	r3, #4
 800724e:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007256:	3314      	adds	r3, #20
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	647b      	str	r3, [r7, #68]	; 0x44
 800725e:	e030      	b.n	80072c2 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007266:	3308      	adds	r3, #8
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <find_volume+0x4be>
 800726e:	230d      	movs	r3, #13
 8007270:	e0f0      	b.n	8007454 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800727c:	441a      	add	r2, r3
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007284:	3304      	adds	r3, #4
 8007286:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007288:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800728c:	2b02      	cmp	r3, #2
 800728e:	d106      	bne.n	800729e <find_volume+0x4ea>
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007296:	3314      	adds	r3, #20
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	e010      	b.n	80072c0 <find_volume+0x50c>
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a4:	3314      	adds	r3, #20
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4413      	add	r3, r2
 80072ae:	085a      	lsrs	r2, r3, #1
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	3314      	adds	r3, #20
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80072c0:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c8:	3318      	adds	r3, #24
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d2:	330a      	adds	r3, #10
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072da:	440b      	add	r3, r1
 80072dc:	1e59      	subs	r1, r3, #1
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e4:	330a      	adds	r3, #10
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d201      	bcs.n	80072f4 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 80072f0:	230d      	movs	r3, #13
 80072f2:	e0af      	b.n	8007454 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fa:	3310      	adds	r3, #16
 80072fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007308:	3310      	adds	r3, #16
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007312:	330c      	adds	r3, #12
 8007314:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800731c:	3305      	adds	r3, #5
 800731e:	2280      	movs	r2, #128	; 0x80
 8007320:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8007322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007326:	2b03      	cmp	r3, #3
 8007328:	d17d      	bne.n	8007426 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	b21a      	sxth	r2, r3
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800733a:	b21b      	sxth	r3, r3
 800733c:	4313      	orrs	r3, r2
 800733e:	b21b      	sxth	r3, r3
 8007340:	2b01      	cmp	r3, #1
 8007342:	d170      	bne.n	8007426 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007346:	3301      	adds	r3, #1
 8007348:	4619      	mov	r1, r3
 800734a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800734c:	f7fd fee0 	bl	8005110 <move_window>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d167      	bne.n	8007426 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735c:	3305      	adds	r3, #5
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	b21a      	sxth	r2, r3
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8007372:	b21b      	sxth	r3, r3
 8007374:	4313      	orrs	r3, r2
 8007376:	b21b      	sxth	r3, r3
 8007378:	4a38      	ldr	r2, [pc, #224]	; (800745c <find_volume+0x6a8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d153      	bne.n	8007426 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	78db      	ldrb	r3, [r3, #3]
 8007382:	061a      	lsls	r2, r3, #24
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	789b      	ldrb	r3, [r3, #2]
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	4313      	orrs	r3, r2
 800738c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800738e:	7852      	ldrb	r2, [r2, #1]
 8007390:	0212      	lsls	r2, r2, #8
 8007392:	4313      	orrs	r3, r2
 8007394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007396:	7812      	ldrb	r2, [r2, #0]
 8007398:	4313      	orrs	r3, r2
 800739a:	4a31      	ldr	r2, [pc, #196]	; (8007460 <find_volume+0x6ac>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d142      	bne.n	8007426 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80073a6:	061a      	lsls	r2, r3, #24
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4313      	orrs	r3, r2
 80073b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b4:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80073b8:	0212      	lsls	r2, r2, #8
 80073ba:	4313      	orrs	r3, r2
 80073bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073be:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80073c2:	4313      	orrs	r3, r2
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <find_volume+0x6b0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d12d      	bne.n	8007426 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80073ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073cc:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 80073d0:	061a      	lsls	r2, r3, #24
 80073d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d4:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 80073d8:	041b      	lsls	r3, r3, #16
 80073da:	4313      	orrs	r3, r2
 80073dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073de:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 80073e2:	0212      	lsls	r2, r2, #8
 80073e4:	4313      	orrs	r3, r2
 80073e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073e8:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 80073ec:	431a      	orrs	r2, r3
 80073ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f4:	3310      	adds	r3, #16
 80073f6:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 80073fe:	061a      	lsls	r2, r3, #24
 8007400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007402:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	4313      	orrs	r3, r2
 800740a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800740c:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8007410:	0212      	lsls	r2, r2, #8
 8007412:	4313      	orrs	r3, r2
 8007414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007416:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800741a:	431a      	orrs	r2, r3
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007422:	330c      	adds	r3, #12
 8007424:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8007426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007430:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8007432:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <find_volume+0x6b4>)
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <find_volume+0x6b4>)
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <find_volume+0x6b4>)
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007448:	3306      	adds	r3, #6
 800744a:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800744c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800744e:	f7fd fddb 	bl	8005008 <clear_lock>
#endif

	return FR_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3758      	adds	r7, #88	; 0x58
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	ffffaa55 	.word	0xffffaa55
 8007460:	41615252 	.word	0x41615252
 8007464:	61417272 	.word	0x61417272
 8007468:	2000031c 	.word	0x2000031c

0800746c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d02d      	beq.n	80074da <validate+0x6e>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d027      	beq.n	80074da <validate+0x6e>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01e      	beq.n	80074da <validate+0x6e>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a8:	3306      	adds	r3, #6
 80074aa:	881a      	ldrh	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b2:	3304      	adds	r3, #4
 80074b4:	881b      	ldrh	r3, [r3, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d10f      	bne.n	80074da <validate+0x6e>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c6:	3301      	adds	r3, #1
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7fd faec 	bl	8004aa8 <disk_status>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <validate+0x72>
		return FR_INVALID_OBJECT;
 80074da:	2309      	movs	r3, #9
 80074dc:	e000      	b.n	80074e0 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fba7 	bl	8006c52 <get_ldnumber>
 8007504:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	da01      	bge.n	8007510 <f_mount+0x28>
 800750c:	230b      	movs	r3, #11
 800750e:	e02f      	b.n	8007570 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007510:	4a19      	ldr	r2, [pc, #100]	; (8007578 <f_mount+0x90>)
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007518:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007520:	69b8      	ldr	r0, [r7, #24]
 8007522:	f7fd fd71 	bl	8005008 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d004      	beq.n	8007540 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	490d      	ldr	r1, [pc, #52]	; (8007578 <f_mount+0x90>)
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <f_mount+0x6e>
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d001      	beq.n	800755a <f_mount+0x72>
 8007556:	2300      	movs	r3, #0
 8007558:	e00a      	b.n	8007570 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800755a:	f107 0108 	add.w	r1, r7, #8
 800755e:	f107 030c 	add.w	r3, r7, #12
 8007562:	2200      	movs	r2, #0
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fc25 	bl	8006db4 <find_volume>
 800756a:	4603      	mov	r3, r0
 800756c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800756e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20000318 	.word	0x20000318

0800757c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	3b0c      	subs	r3, #12
 800758c:	6018      	str	r0, [r3, #0]
 800758e:	f107 0318 	add.w	r3, r7, #24
 8007592:	3b10      	subs	r3, #16
 8007594:	6019      	str	r1, [r3, #0]
 8007596:	f107 0318 	add.w	r3, r7, #24
 800759a:	3b11      	subs	r3, #17
 800759c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800759e:	f107 0318 	add.w	r3, r7, #24
 80075a2:	3b0c      	subs	r3, #12
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <f_open+0x32>
 80075aa:	2309      	movs	r3, #9
 80075ac:	e319      	b.n	8007be2 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 80075ae:	f107 0318 	add.w	r3, r7, #24
 80075b2:	3b0c      	subs	r3, #12
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80075be:	f107 0318 	add.w	r3, r7, #24
 80075c2:	3b11      	subs	r3, #17
 80075c4:	f107 0218 	add.w	r2, r7, #24
 80075c8:	3a11      	subs	r2, #17
 80075ca:	7812      	ldrb	r2, [r2, #0]
 80075cc:	f002 021f 	and.w	r2, r2, #31
 80075d0:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80075d2:	f107 0318 	add.w	r3, r7, #24
 80075d6:	3b11      	subs	r3, #17
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f023 0301 	bic.w	r3, r3, #1
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	f107 0118 	add.w	r1, r7, #24
 80075e4:	3910      	subs	r1, #16
 80075e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075ea:	3b18      	subs	r3, #24
 80075ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7ff fbdf 	bl	8006db4 <find_volume>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80075fc:	f102 0217 	add.w	r2, r2, #23
 8007600:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007602:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007606:	f103 0317 	add.w	r3, r3, #23
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 82e3 	bne.w	8007bd8 <f_open+0x65c>
		INIT_BUF(dj);
 8007612:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007616:	3b18      	subs	r3, #24
 8007618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800761c:	3318      	adds	r3, #24
 800761e:	f107 0218 	add.w	r2, r7, #24
 8007622:	3a04      	subs	r2, #4
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800762a:	3b18      	subs	r3, #24
 800762c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007630:	4ad1      	ldr	r2, [pc, #836]	; (8007978 <f_open+0x3fc>)
 8007632:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007634:	f107 0318 	add.w	r3, r7, #24
 8007638:	3b10      	subs	r3, #16
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007640:	3b18      	subs	r3, #24
 8007642:	4611      	mov	r1, r2
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff fa8b 	bl	8006b60 <follow_path>
 800764a:	4603      	mov	r3, r0
 800764c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007650:	f102 0217 	add.w	r2, r2, #23
 8007654:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8007656:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800765a:	3b18      	subs	r3, #24
 800765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007660:	3314      	adds	r3, #20
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007668:	f102 0210 	add.w	r2, r2, #16
 800766c:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800766e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007672:	f103 0317 	add.w	r3, r3, #23
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d126      	bne.n	80076ca <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 800767c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007680:	f103 0310 	add.w	r3, r3, #16
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <f_open+0x11c>
				res = FR_INVALID_NAME;
 800768a:	2306      	movs	r3, #6
 800768c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007690:	f102 0217 	add.w	r2, r2, #23
 8007694:	7013      	strb	r3, [r2, #0]
 8007696:	e018      	b.n	80076ca <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007698:	f107 0318 	add.w	r3, r7, #24
 800769c:	3b11      	subs	r3, #17
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	f023 0301 	bic.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076b4:	3b18      	subs	r3, #24
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fd fb0b 	bl	8004cd4 <chk_lock>
 80076be:	4603      	mov	r3, r0
 80076c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80076c4:	f102 0217 	add.w	r2, r2, #23
 80076c8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80076ca:	f107 0318 	add.w	r3, r7, #24
 80076ce:	3b11      	subs	r3, #17
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 031c 	and.w	r3, r3, #28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8150 	beq.w	800797c <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 80076dc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80076e0:	f103 0317 	add.w	r3, r3, #23
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d030      	beq.n	800774c <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80076ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80076ee:	f103 0317 	add.w	r3, r3, #23
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d112      	bne.n	800771e <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076f8:	f7fd fb5e 	bl	8004db8 <enq_lock>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d007      	beq.n	8007712 <f_open+0x196>
 8007702:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007706:	3b18      	subs	r3, #24
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe ff37 	bl	800657c <dir_register>
 800770e:	4603      	mov	r3, r0
 8007710:	e000      	b.n	8007714 <f_open+0x198>
 8007712:	2312      	movs	r3, #18
 8007714:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007718:	f102 0217 	add.w	r2, r2, #23
 800771c:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800771e:	f107 0318 	add.w	r3, r7, #24
 8007722:	3b11      	subs	r3, #17
 8007724:	f107 0218 	add.w	r2, r7, #24
 8007728:	3a11      	subs	r2, #17
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	f042 0208 	orr.w	r2, r2, #8
 8007730:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007736:	3b18      	subs	r3, #24
 8007738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800773c:	3314      	adds	r3, #20
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007744:	f102 0210 	add.w	r2, r2, #16
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e01f      	b.n	800778c <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800774c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007750:	f103 0310 	add.w	r3, r3, #16
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330b      	adds	r3, #11
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	f003 0311 	and.w	r3, r3, #17
 800775e:	2b00      	cmp	r3, #0
 8007760:	d006      	beq.n	8007770 <f_open+0x1f4>
					res = FR_DENIED;
 8007762:	2307      	movs	r3, #7
 8007764:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007768:	f102 0217 	add.w	r2, r2, #23
 800776c:	7013      	strb	r3, [r2, #0]
 800776e:	e00d      	b.n	800778c <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007770:	f107 0318 	add.w	r3, r7, #24
 8007774:	3b11      	subs	r3, #17
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <f_open+0x210>
						res = FR_EXIST;
 8007780:	2308      	movs	r3, #8
 8007782:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007786:	f102 0217 	add.w	r2, r2, #23
 800778a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800778c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007790:	f103 0317 	add.w	r3, r3, #23
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 8122 	bne.w	80079e0 <f_open+0x464>
 800779c:	f107 0318 	add.w	r3, r7, #24
 80077a0:	3b11      	subs	r3, #17
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 8119 	beq.w	80079e0 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 80077ae:	f7fc fc21 	bl	8003ff4 <get_fattime>
 80077b2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077b6:	f103 030c 	add.w	r3, r3, #12
 80077ba:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80077bc:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077c0:	f103 0310 	add.w	r3, r3, #16
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330e      	adds	r3, #14
 80077c8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80077cc:	f102 020c 	add.w	r2, r2, #12
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077da:	f103 030c 	add.w	r3, r3, #12
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077ea:	f103 0310 	add.w	r3, r3, #16
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330f      	adds	r3, #15
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80077fa:	f103 030c 	add.w	r3, r3, #12
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	0c1a      	lsrs	r2, r3, #16
 8007802:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007806:	f103 0310 	add.w	r3, r3, #16
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3310      	adds	r3, #16
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]
 8007812:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007816:	f103 030c 	add.w	r3, r3, #12
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	0e1a      	lsrs	r2, r3, #24
 800781e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007822:	f103 0310 	add.w	r3, r3, #16
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3311      	adds	r3, #17
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800782e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007832:	f103 0310 	add.w	r3, r3, #16
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330b      	adds	r3, #11
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800783e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007842:	f103 0310 	add.w	r3, r3, #16
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	331c      	adds	r3, #28
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007852:	f103 0310 	add.w	r3, r3, #16
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	331d      	adds	r3, #29
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007862:	f103 0310 	add.w	r3, r3, #16
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	331e      	adds	r3, #30
 800786a:	2200      	movs	r2, #0
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007872:	f103 0310 	add.w	r3, r3, #16
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	331f      	adds	r3, #31
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800787e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007882:	3b18      	subs	r3, #24
 8007884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800788e:	f102 0210 	add.w	r2, r2, #16
 8007892:	6811      	ldr	r1, [r2, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fbb4 	bl	8006002 <ld_clust>
 800789a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800789e:	f103 0308 	add.w	r3, r3, #8
 80078a2:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80078a4:	2100      	movs	r1, #0
 80078a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078aa:	f103 0310 	add.w	r3, r3, #16
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	f7fe fbd5 	bl	800605e <st_clust>
				dj.fs->wflag = 1;
 80078b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078b8:	3b18      	subs	r3, #24
 80078ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c4:	3304      	adds	r3, #4
 80078c6:	2201      	movs	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 80078ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80078ce:	f103 0308 	add.w	r3, r3, #8
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8083 	beq.w	80079e0 <f_open+0x464>
					dw = dj.fs->winsect;
 80078da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078de:	3b18      	subs	r3, #24
 80078e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80078ea:	330c      	adds	r3, #12
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80078f2:	f102 020c 	add.w	r2, r2, #12
 80078f6:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80078f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078fc:	3b18      	subs	r3, #24
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007908:	f102 0208 	add.w	r2, r2, #8
 800790c:	6811      	ldr	r1, [r2, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f7fd ff8d 	bl	800582e <remove_chain>
 8007914:	4603      	mov	r3, r0
 8007916:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800791a:	f102 0217 	add.w	r2, r2, #23
 800791e:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8007920:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007924:	f103 0317 	add.w	r3, r3, #23
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d158      	bne.n	80079e0 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800792e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007932:	3b18      	subs	r3, #24
 8007934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800793e:	f102 0208 	add.w	r2, r2, #8
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	3a01      	subs	r2, #1
 8007946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800794a:	330c      	adds	r3, #12
 800794c:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 800794e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007952:	3b18      	subs	r3, #24
 8007954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800795e:	f102 020c 	add.w	r2, r2, #12
 8007962:	6811      	ldr	r1, [r2, #0]
 8007964:	4618      	mov	r0, r3
 8007966:	f7fd fbd3 	bl	8005110 <move_window>
 800796a:	4603      	mov	r3, r0
 800796c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007970:	f102 0217 	add.w	r2, r2, #23
 8007974:	7013      	strb	r3, [r2, #0]
 8007976:	e033      	b.n	80079e0 <f_open+0x464>
 8007978:	20000338 	.word	0x20000338
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800797c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007980:	f103 0317 	add.w	r3, r3, #23
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d12a      	bne.n	80079e0 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800798a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800798e:	f103 0310 	add.w	r3, r3, #16
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330b      	adds	r3, #11
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	f003 0310 	and.w	r3, r3, #16
 800799c:	2b00      	cmp	r3, #0
 800799e:	d006      	beq.n	80079ae <f_open+0x432>
					res = FR_NO_FILE;
 80079a0:	2304      	movs	r3, #4
 80079a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079a6:	f102 0217 	add.w	r2, r2, #23
 80079aa:	7013      	strb	r3, [r2, #0]
 80079ac:	e018      	b.n	80079e0 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80079ae:	f107 0318 	add.w	r3, r7, #24
 80079b2:	3b11      	subs	r3, #17
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d010      	beq.n	80079e0 <f_open+0x464>
 80079be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079c2:	f103 0310 	add.w	r3, r3, #16
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	330b      	adds	r3, #11
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <f_open+0x464>
						res = FR_DENIED;
 80079d4:	2307      	movs	r3, #7
 80079d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80079da:	f102 0217 	add.w	r2, r2, #23
 80079de:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 80079e0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80079e4:	f103 0317 	add.w	r3, r3, #23
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d15b      	bne.n	8007aa6 <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	3b11      	subs	r3, #17
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <f_open+0x496>
				mode |= FA__WRITTEN;
 80079fe:	f107 0318 	add.w	r3, r7, #24
 8007a02:	3b11      	subs	r3, #17
 8007a04:	f107 0218 	add.w	r2, r7, #24
 8007a08:	3a11      	subs	r2, #17
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	f042 0220 	orr.w	r2, r2, #32
 8007a10:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007a12:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a16:	3b18      	subs	r3, #24
 8007a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a22:	330c      	adds	r3, #12
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	f107 0318 	add.w	r3, r7, #24
 8007a2a:	3b0c      	subs	r3, #12
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a32:	331c      	adds	r3, #28
 8007a34:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 8007a36:	f107 0318 	add.w	r3, r7, #24
 8007a3a:	3b0c      	subs	r3, #12
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007a46:	f102 0210 	add.w	r2, r2, #16
 8007a4a:	6812      	ldr	r2, [r2, #0]
 8007a4c:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a4e:	f107 0318 	add.w	r3, r7, #24
 8007a52:	3b11      	subs	r3, #17
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	bf14      	ite	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	2300      	moveq	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a6a:	3b18      	subs	r3, #24
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fd f9c6 	bl	8004e00 <inc_lock>
 8007a74:	4602      	mov	r2, r0
 8007a76:	f107 0318 	add.w	r3, r7, #24
 8007a7a:	3b0c      	subs	r3, #12
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a82:	3308      	adds	r3, #8
 8007a84:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8007a86:	f107 0318 	add.w	r3, r7, #24
 8007a8a:	3b0c      	subs	r3, #12
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007a92:	3308      	adds	r3, #8
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <f_open+0x52a>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007aa0:	f102 0217 	add.w	r2, r2, #23
 8007aa4:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007aa6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007aaa:	f103 0317 	add.w	r3, r3, #23
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 8091 	bne.w	8007bd8 <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 8007ab6:	f107 0318 	add.w	r3, r7, #24
 8007aba:	3b0c      	subs	r3, #12
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac2:	3306      	adds	r3, #6
 8007ac4:	f107 0218 	add.w	r2, r7, #24
 8007ac8:	3a11      	subs	r2, #17
 8007aca:	7812      	ldrb	r2, [r2, #0]
 8007acc:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8007ace:	f107 0318 	add.w	r3, r7, #24
 8007ad2:	3b0c      	subs	r3, #12
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ada:	3307      	adds	r3, #7
 8007adc:	2200      	movs	r2, #0
 8007ade:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8007ae0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007ae4:	3b18      	subs	r3, #24
 8007ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007af0:	f102 0210 	add.w	r2, r2, #16
 8007af4:	6811      	ldr	r1, [r2, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fe fa83 	bl	8006002 <ld_clust>
 8007afc:	4602      	mov	r2, r0
 8007afe:	f107 0318 	add.w	r3, r7, #24
 8007b02:	3b0c      	subs	r3, #12
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0a:	3310      	adds	r3, #16
 8007b0c:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007b0e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b12:	f103 0310 	add.w	r3, r3, #16
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	331f      	adds	r3, #31
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	061a      	lsls	r2, r3, #24
 8007b1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007b22:	f103 0310 	add.w	r3, r3, #16
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	331e      	adds	r3, #30
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b34:	f102 0210 	add.w	r2, r2, #16
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	321d      	adds	r2, #29
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	0212      	lsls	r2, r2, #8
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8007b46:	f102 0210 	add.w	r2, r2, #16
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	321c      	adds	r2, #28
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	f107 0318 	add.w	r3, r7, #24
 8007b56:	3b0c      	subs	r3, #12
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b5e:	330c      	adds	r3, #12
 8007b60:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8007b62:	f107 0318 	add.w	r3, r7, #24
 8007b66:	3b0c      	subs	r3, #12
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b6e:	3308      	adds	r3, #8
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8007b74:	f107 0318 	add.w	r3, r7, #24
 8007b78:	3b0c      	subs	r3, #12
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	3318      	adds	r3, #24
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007b86:	f107 0318 	add.w	r3, r7, #24
 8007b8a:	3b0c      	subs	r3, #12
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007b92:	3304      	adds	r3, #4
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007b9c:	3b18      	subs	r3, #24
 8007b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	f107 0318 	add.w	r3, r7, #24
 8007ba8:	3b0c      	subs	r3, #12
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb0:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	3b0c      	subs	r3, #12
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc4:	3306      	adds	r3, #6
 8007bc6:	881a      	ldrh	r2, [r3, #0]
 8007bc8:	f107 0318 	add.w	r3, r7, #24
 8007bcc:	3b0c      	subs	r3, #12
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8007bd8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8007bdc:	f103 0317 	add.w	r3, r3, #23
 8007be0:	781b      	ldrb	r3, [r3, #0]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop

08007bf0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08c      	sub	sp, #48	; 0x30
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fc2f 	bl	800746c <validate>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007c12:	7ffb      	ldrb	r3, [r7, #31]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <f_read+0x2c>
 8007c18:	7ffb      	ldrb	r3, [r7, #31]
 8007c1a:	e1fb      	b.n	8008014 <f_read+0x424>
	if (fp->err)								/* Check error */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c22:	3307      	adds	r3, #7
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c30:	3307      	adds	r3, #7
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	e1ee      	b.n	8008014 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c3c:	3306      	adds	r3, #6
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007c48:	2307      	movs	r3, #7
 8007c4a:	e1e3      	b.n	8008014 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c52:	330c      	adds	r3, #12
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	f240 81ce 	bls.w	800800a <f_read+0x41a>
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007c72:	e1ca      	b.n	800800a <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c8a:	330a      	adds	r3, #10
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c92:	fb03 f301 	mul.w	r3, r3, r1
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 8160 	bne.w	8007f5e <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	330a      	adds	r3, #10
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cca:	3302      	adds	r3, #2
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d14a      	bne.n	8007d72 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf0:	3310      	adds	r3, #16
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cf6:	e01f      	b.n	8007d38 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007cfe:	3304      	adds	r3, #4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7fd fea4 	bl	8005a60 <clmt_clust>
 8007d18:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d1a:	e00d      	b.n	8007d38 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	4610      	mov	r0, r2
 8007d32:	f7fd fb17 	bl	8005364 <get_fat>
 8007d36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d807      	bhi.n	8007d4e <f_read+0x15e>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d44:	3307      	adds	r3, #7
 8007d46:	2202      	movs	r2, #2
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e162      	b.n	8008014 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d107      	bne.n	8007d66 <f_read+0x176>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5c:	3307      	adds	r3, #7
 8007d5e:	2201      	movs	r2, #1
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	2301      	movs	r3, #1
 8007d64:	e156      	b.n	8008014 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6c:	3314      	adds	r3, #20
 8007d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d70:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d80:	3314      	adds	r3, #20
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	4610      	mov	r0, r2
 8007d88:	f7fd fac5 	bl	8005316 <clust2sect>
 8007d8c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d107      	bne.n	8007da4 <f_read+0x1b4>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9a:	3307      	adds	r3, #7
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
 8007da0:	2302      	movs	r3, #2
 8007da2:	e137      	b.n	8008014 <f_read+0x424>
			sect += csect;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4413      	add	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007db8:	330a      	adds	r3, #10
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dc4:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d070      	beq.n	8007eae <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007dcc:	7dfa      	ldrb	r2, [r7, #23]
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dde:	3302      	adds	r3, #2
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d90b      	bls.n	8007dfe <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df2:	3302      	adds	r3, #2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	7818      	ldrb	r0, [r3, #0]
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	6a39      	ldr	r1, [r7, #32]
 8007e14:	f7fc fe88 	bl	8004b28 <disk_read>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e24:	3307      	adds	r3, #7
 8007e26:	2201      	movs	r2, #1
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e0f2      	b.n	8008014 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e34:	3306      	adds	r3, #6
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d028      	beq.n	8007e92 <f_read+0x2a2>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e46:	3318      	adds	r3, #24
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d91e      	bls.n	8007e92 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e5a:	3318      	adds	r3, #24
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1ad2      	subs	r2, r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e6e:	330a      	adds	r3, #10
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	fb03 f302 	mul.w	r3, r3, r2
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	18d0      	adds	r0, r2, r3
 8007e7a:	68f9      	ldr	r1, [r7, #12]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e88:	330a      	adds	r3, #10
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f7fc fea9 	bl	8004be4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e9e:	330a      	adds	r3, #10
 8007ea0:	881b      	ldrh	r3, [r3, #0]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	fb02 f303 	mul.w	r3, r2, r3
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007eac:	e093      	b.n	8007fd6 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb4:	3318      	adds	r3, #24
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d049      	beq.n	8007f52 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec4:	3306      	adds	r3, #6
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d028      	beq.n	8007f22 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007edc:	3301      	adds	r3, #1
 8007ede:	7818      	ldrb	r0, [r3, #0]
 8007ee0:	68f9      	ldr	r1, [r7, #12]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee8:	3318      	adds	r3, #24
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	2301      	movs	r3, #1
 8007eee:	f7fc fe3b 	bl	8004b68 <disk_write>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007efe:	3307      	adds	r3, #7
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	2301      	movs	r3, #1
 8007f06:	e085      	b.n	8008014 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f0e:	3306      	adds	r3, #6
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f1e:	3306      	adds	r3, #6
 8007f20:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f2e:	3301      	adds	r3, #1
 8007f30:	7818      	ldrb	r0, [r3, #0]
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	2301      	movs	r3, #1
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	f7fc fdf6 	bl	8004b28 <disk_read>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f48:	3307      	adds	r3, #7
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e060      	b.n	8008014 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f58:	3318      	adds	r3, #24
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f6a:	330a      	adds	r3, #10
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f76:	3308      	adds	r3, #8
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f86:	330a      	adds	r3, #10
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f8e:	fb03 f301 	mul.w	r3, r3, r1
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	1ac3      	subs	r3, r0, r3
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d901      	bls.n	8007fa4 <f_read+0x3b4>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007faa:	3308      	adds	r3, #8
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fba:	330a      	adds	r3, #10
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fc2:	fb03 f301 	mul.w	r3, r3, r1
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6a38      	ldr	r0, [r7, #32]
 8007fd2:	f7fc fe07 	bl	8004be4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007fd6:	6a3a      	ldr	r2, [r7, #32]
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	4413      	add	r3, r2
 8007fdc:	623b      	str	r3, [r7, #32]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	441a      	add	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff2:	3308      	adds	r3, #8
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	441a      	add	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f ae31 	bne.w	8007c74 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3730      	adds	r7, #48	; 0x30
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f7ff fa19 	bl	800746c <validate>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <f_write+0x2c>
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	e258      	b.n	80084fa <f_write+0x4de>
	if (fp->err)							/* Check error */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804e:	3307      	adds	r3, #7
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800805c:	3307      	adds	r3, #7
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	e24b      	b.n	80084fa <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008068:	3306      	adds	r3, #6
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008074:	2307      	movs	r3, #7
 8008076:	e240      	b.n	80084fa <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	3308      	adds	r3, #8
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	441a      	add	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808c:	3308      	adds	r3, #8
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	429a      	cmp	r2, r3
 8008092:	f080 8208 	bcs.w	80084a6 <f_write+0x48a>
 8008096:	2300      	movs	r3, #0
 8008098:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800809a:	e204      	b.n	80084a6 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	3308      	adds	r3, #8
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b2:	330a      	adds	r3, #10
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80080ba:	fb03 f301 	mul.w	r3, r3, r1
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 818d 	bne.w	80083e0 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080cc:	3308      	adds	r3, #8
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080dc:	330a      	adds	r3, #10
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080f2:	3302      	adds	r3, #2
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	4013      	ands	r3, r2
 80080fc:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80080fe:	7dbb      	ldrb	r3, [r7, #22]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d167      	bne.n	80081d4 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810a:	3308      	adds	r3, #8
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d112      	bne.n	8008138 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008118:	3310      	adds	r3, #16
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d129      	bne.n	8008178 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f7fd fbe5 	bl	80058fe <create_chain>
 8008134:	6278      	str	r0, [r7, #36]	; 0x24
 8008136:	e01f      	b.n	8008178 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800813e:	3304      	adds	r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800814c:	3308      	adds	r3, #8
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4619      	mov	r1, r3
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7fd fc84 	bl	8005a60 <clmt_clust>
 8008158:	6278      	str	r0, [r7, #36]	; 0x24
 800815a:	e00d      	b.n	8008178 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800816a:	3314      	adds	r3, #20
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f7fd fbc4 	bl	80058fe <create_chain>
 8008176:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8198 	beq.w	80084b0 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	2b01      	cmp	r3, #1
 8008184:	d107      	bne.n	8008196 <f_write+0x17a>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818c:	3307      	adds	r3, #7
 800818e:	2202      	movs	r2, #2
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	2302      	movs	r3, #2
 8008194:	e1b1      	b.n	80084fa <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819c:	d107      	bne.n	80081ae <f_write+0x192>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081a4:	3307      	adds	r3, #7
 80081a6:	2201      	movs	r2, #1
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	2301      	movs	r3, #1
 80081ac:	e1a5      	b.n	80084fa <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	3314      	adds	r3, #20
 80081b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b8:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c0:	3310      	adds	r3, #16
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d105      	bne.n	80081d4 <f_write+0x1b8>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ce:	3310      	adds	r3, #16
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081da:	3306      	adds	r3, #6
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d028      	beq.n	8008238 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f2:	3301      	adds	r3, #1
 80081f4:	7818      	ldrb	r0, [r3, #0]
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081fe:	3318      	adds	r3, #24
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	2301      	movs	r3, #1
 8008204:	f7fc fcb0 	bl	8004b68 <disk_write>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d007      	beq.n	800821e <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008214:	3307      	adds	r3, #7
 8008216:	2201      	movs	r2, #1
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	2301      	movs	r3, #1
 800821c:	e16d      	b.n	80084fa <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008224:	3306      	adds	r3, #6
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822c:	b2da      	uxtb	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	3306      	adds	r3, #6
 8008236:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008246:	3314      	adds	r3, #20
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4619      	mov	r1, r3
 800824c:	4610      	mov	r0, r2
 800824e:	f7fd f862 	bl	8005316 <clust2sect>
 8008252:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <f_write+0x24e>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008260:	3307      	adds	r3, #7
 8008262:	2202      	movs	r2, #2
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	2302      	movs	r3, #2
 8008268:	e147      	b.n	80084fa <f_write+0x4de>
			sect += csect;
 800826a:	7dbb      	ldrb	r3, [r7, #22]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4413      	add	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827e:	330a      	adds	r3, #10
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	fbb3 f3f2 	udiv	r3, r3, r2
 800828a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d074      	beq.n	800837c <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8008292:	7dba      	ldrb	r2, [r7, #22]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a4:	3302      	adds	r3, #2
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d90b      	bls.n	80082c4 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082b8:	3302      	adds	r3, #2
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	7dbb      	ldrb	r3, [r7, #22]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082d0:	3301      	adds	r3, #1
 80082d2:	7818      	ldrb	r0, [r3, #0]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	69b9      	ldr	r1, [r7, #24]
 80082da:	f7fc fc45 	bl	8004b68 <disk_write>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ea:	3307      	adds	r3, #7
 80082ec:	2201      	movs	r2, #1
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	2301      	movs	r3, #1
 80082f2:	e102      	b.n	80084fa <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fa:	3318      	adds	r3, #24
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	429a      	cmp	r2, r3
 8008306:	d92b      	bls.n	8008360 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008310:	3318      	adds	r3, #24
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008324:	330a      	adds	r3, #10
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	fb03 f302 	mul.w	r3, r3, r2
 800832c:	69ba      	ldr	r2, [r7, #24]
 800832e:	18d1      	adds	r1, r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800833c:	330a      	adds	r3, #10
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f7fc fc4f 	bl	8004be4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	3306      	adds	r3, #6
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	b2da      	uxtb	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835c:	3306      	adds	r3, #6
 800835e:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800836c:	330a      	adds	r3, #10
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	fb02 f303 	mul.w	r3, r2, r3
 8008378:	623b      	str	r3, [r7, #32]
				continue;
 800837a:	e07a      	b.n	8008472 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008382:	3318      	adds	r3, #24
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	429a      	cmp	r2, r3
 800838a:	d023      	beq.n	80083d4 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008392:	3308      	adds	r3, #8
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	330c      	adds	r3, #12
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d217      	bcs.n	80083d4 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b0:	3301      	adds	r3, #1
 80083b2:	7818      	ldrb	r0, [r3, #0]
 80083b4:	68f9      	ldr	r1, [r7, #12]
 80083b6:	2301      	movs	r3, #1
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	f7fc fbb5 	bl	8004b28 <disk_read>
 80083be:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ca:	3307      	adds	r3, #7
 80083cc:	2201      	movs	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	2301      	movs	r3, #1
 80083d2:	e092      	b.n	80084fa <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083da:	3318      	adds	r3, #24
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ec:	330a      	adds	r3, #10
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	4618      	mov	r0, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083f8:	3308      	adds	r3, #8
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008408:	330a      	adds	r3, #10
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008410:	fb03 f301 	mul.w	r3, r3, r1
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	1ac3      	subs	r3, r0, r3
 8008418:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800841a:	6a3a      	ldr	r2, [r7, #32]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	429a      	cmp	r2, r3
 8008420:	d901      	bls.n	8008426 <f_write+0x40a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800842c:	3308      	adds	r3, #8
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843c:	330a      	adds	r3, #10
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	fbb2 f1f3 	udiv	r1, r2, r3
 8008444:	fb03 f301 	mul.w	r3, r3, r1
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	6a3a      	ldr	r2, [r7, #32]
 8008450:	69b9      	ldr	r1, [r7, #24]
 8008452:	4618      	mov	r0, r3
 8008454:	f7fc fbc6 	bl	8004be4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845e:	3306      	adds	r3, #6
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008466:	b2da      	uxtb	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846e:	3306      	adds	r3, #6
 8008470:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8008472:	69ba      	ldr	r2, [r7, #24]
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	4413      	add	r3, r2
 8008478:	61bb      	str	r3, [r7, #24]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008480:	3308      	adds	r3, #8
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848e:	3308      	adds	r3, #8
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	441a      	add	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f47f adf7 	bne.w	800809c <f_write+0x80>
 80084ae:	e000      	b.n	80084b2 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084b0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b8:	3308      	adds	r3, #8
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084c2:	330c      	adds	r3, #12
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d909      	bls.n	80084de <f_write+0x4c2>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084d0:	3308      	adds	r3, #8
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084da:	330c      	adds	r3, #12
 80084dc:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084e4:	3306      	adds	r3, #6
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f043 0320 	orr.w	r3, r3, #32
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084f4:	3306      	adds	r3, #6
 80084f6:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3728      	adds	r7, #40	; 0x28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b086      	sub	sp, #24
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f7fe ffae 	bl	800746c <validate>
 8008510:	4603      	mov	r3, r0
 8008512:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 80cc 	bne.w	80086b4 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008522:	3306      	adds	r3, #6
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 0320 	and.w	r3, r3, #32
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 80c2 	beq.w	80086b4 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008536:	3306      	adds	r3, #6
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d022      	beq.n	8008588 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800854e:	3301      	adds	r3, #1
 8008550:	7818      	ldrb	r0, [r3, #0]
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800855a:	3318      	adds	r3, #24
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	2301      	movs	r3, #1
 8008560:	f7fc fb02 	bl	8004b68 <disk_write>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800856a:	2301      	movs	r3, #1
 800856c:	e0a3      	b.n	80086b6 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008574:	3306      	adds	r3, #6
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857c:	b2da      	uxtb	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008584:	3306      	adds	r3, #6
 8008586:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008596:	331c      	adds	r3, #28
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f7fc fdb7 	bl	8005110 <move_window>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f040 8083 	bne.w	80086b4 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	330b      	adds	r3, #11
 80085bc:	781a      	ldrb	r2, [r3, #0]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	330b      	adds	r3, #11
 80085c2:	f042 0220 	orr.w	r2, r2, #32
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085d0:	330c      	adds	r3, #12
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	331c      	adds	r3, #28
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085e2:	330c      	adds	r3, #12
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	331d      	adds	r3, #29
 80085f0:	b2d2      	uxtb	r2, r2
 80085f2:	701a      	strb	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fa:	330c      	adds	r3, #12
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	0c1a      	lsrs	r2, r3, #16
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	331e      	adds	r3, #30
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860e:	330c      	adds	r3, #12
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	0e1a      	lsrs	r2, r3, #24
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	331f      	adds	r3, #31
 8008618:	b2d2      	uxtb	r2, r2
 800861a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008622:	3310      	adds	r3, #16
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4619      	mov	r1, r3
 8008628:	6938      	ldr	r0, [r7, #16]
 800862a:	f7fd fd18 	bl	800605e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800862e:	f7fb fce1 	bl	8003ff4 <get_fattime>
 8008632:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	3316      	adds	r3, #22
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	b29b      	uxth	r3, r3
 8008642:	0a1b      	lsrs	r3, r3, #8
 8008644:	b29a      	uxth	r2, r3
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3317      	adds	r3, #23
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	701a      	strb	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	0c1a      	lsrs	r2, r3, #16
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	3318      	adds	r3, #24
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	701a      	strb	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	0e1a      	lsrs	r2, r3, #24
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3319      	adds	r3, #25
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	3312      	adds	r3, #18
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3313      	adds	r3, #19
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800867c:	3306      	adds	r3, #6
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f023 0320 	bic.w	r3, r3, #32
 8008684:	b2da      	uxtb	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800868c:	3306      	adds	r3, #6
 800868e:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869c:	3304      	adds	r3, #4
 800869e:	2201      	movs	r2, #1
 80086a0:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fc fd64 	bl	8005178 <sync_fs>
 80086b0:	4603      	mov	r3, r0
 80086b2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7ff ff1b 	bl	8008502 <f_sync>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d119      	bne.n	800870a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fe fec8 	bl	800746c <validate>
 80086dc:	4603      	mov	r3, r0
 80086de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d111      	bne.n	800870a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80086ec:	3308      	adds	r3, #8
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fc fc45 	bl	8004f80 <dec_lock>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d104      	bne.n	800870a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08e      	sub	sp, #56	; 0x38
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8008720:	f107 030c 	add.w	r3, r7, #12
 8008724:	2200      	movs	r2, #0
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7fe fb43 	bl	8006db4 <find_volume>
 800872e:	4603      	mov	r3, r0
 8008730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800873a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 80c4 	bne.w	80088cc <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800874a:	3310      	adds	r3, #16
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008754:	3314      	adds	r3, #20
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3b02      	subs	r3, #2
 800875a:	429a      	cmp	r2, r3
 800875c:	d807      	bhi.n	800876e <f_getfree+0x5a>
			*nclst = fs->free_clust;
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008764:	3310      	adds	r3, #16
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	e0ae      	b.n	80088cc <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8008778:	2300      	movs	r3, #0
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800877c:	7efb      	ldrb	r3, [r7, #27]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d127      	bne.n	80087d2 <f_getfree+0xbe>
				clst = 2;
 8008782:	2302      	movs	r3, #2
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8008786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008788:	69f8      	ldr	r0, [r7, #28]
 800878a:	f7fc fdeb 	bl	8005364 <get_fat>
 800878e:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008796:	d103      	bne.n	80087a0 <f_getfree+0x8c>
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800879e:	e07f      	b.n	80088a0 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d103      	bne.n	80087ae <f_getfree+0x9a>
 80087a6:	2302      	movs	r3, #2
 80087a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087ac:	e078      	b.n	80088a0 <f_getfree+0x18c>
					if (stat == 0) n++;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <f_getfree+0xa6>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b6:	3301      	adds	r3, #1
 80087b8:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80087ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087bc:	3301      	adds	r3, #1
 80087be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c6:	3314      	adds	r3, #20
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d3da      	bcc.n	8008786 <f_getfree+0x72>
 80087d0:	e066      	b.n	80088a0 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087d8:	3314      	adds	r3, #20
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
 80087ec:	2300      	movs	r3, #0
 80087ee:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d115      	bne.n	8008822 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80087fc:	4619      	mov	r1, r3
 80087fe:	69f8      	ldr	r0, [r7, #28]
 8008800:	f7fc fc86 	bl	8005110 <move_window>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800880a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800880e:	2b00      	cmp	r3, #0
 8008810:	d145      	bne.n	800889e <f_getfree+0x18a>
						p = fs->win.d8;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800881c:	330a      	adds	r3, #10
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8008822:	7efb      	ldrb	r3, [r7, #27]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d115      	bne.n	8008854 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	3301      	adds	r3, #1
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	b21a      	sxth	r2, r3
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	b21b      	sxth	r3, r3
 8008838:	4313      	orrs	r3, r2
 800883a:	b21b      	sxth	r3, r3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d102      	bne.n	8008846 <f_getfree+0x132>
 8008840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008842:	3301      	adds	r3, #1
 8008844:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	3302      	adds	r3, #2
 800884a:	623b      	str	r3, [r7, #32]
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	3b02      	subs	r3, #2
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
 8008852:	e01d      	b.n	8008890 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	3303      	adds	r3, #3
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	061a      	lsls	r2, r3, #24
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	3302      	adds	r3, #2
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	4313      	orrs	r3, r2
 8008866:	6a3a      	ldr	r2, [r7, #32]
 8008868:	3201      	adds	r2, #1
 800886a:	7812      	ldrb	r2, [r2, #0]
 800886c:	0212      	lsls	r2, r2, #8
 800886e:	4313      	orrs	r3, r2
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	7812      	ldrb	r2, [r2, #0]
 8008874:	4313      	orrs	r3, r2
 8008876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d102      	bne.n	8008884 <f_getfree+0x170>
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	3301      	adds	r3, #1
 8008882:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	3304      	adds	r3, #4
 8008888:	623b      	str	r3, [r7, #32]
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	3b04      	subs	r3, #4
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	3b01      	subs	r3, #1
 8008894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1a9      	bne.n	80087f0 <f_getfree+0xdc>
 800889c:	e000      	b.n	80088a0 <f_getfree+0x18c>
						if (res != FR_OK) break;
 800889e:	bf00      	nop
			}
			fs->free_clust = n;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a6:	3310      	adds	r3, #16
 80088a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088aa:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b2:	3305      	adds	r3, #5
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	f043 0301 	orr.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c2:	3305      	adds	r3, #5
 80088c4:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ca:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 80088cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3738      	adds	r7, #56	; 0x38
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80088ec:	e01b      	b.n	8008926 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80088ee:	f107 0310 	add.w	r3, r7, #16
 80088f2:	f107 0114 	add.w	r1, r7, #20
 80088f6:	2201      	movs	r2, #1
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff f979 	bl	8007bf0 <f_read>
		if (rc != 1) break;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d116      	bne.n	8008932 <f_gets+0x5a>
		c = s[0];
 8008904:	7d3b      	ldrb	r3, [r7, #20]
 8008906:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b0d      	cmp	r3, #13
 800890c:	d100      	bne.n	8008910 <f_gets+0x38>
 800890e:	e00a      	b.n	8008926 <f_gets+0x4e>
		*p++ = c;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	61ba      	str	r2, [r7, #24]
 8008916:	7dfa      	ldrb	r2, [r7, #23]
 8008918:	701a      	strb	r2, [r3, #0]
		n++;
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	3301      	adds	r3, #1
 800891e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	2b0a      	cmp	r3, #10
 8008924:	d007      	beq.n	8008936 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3b01      	subs	r3, #1
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	429a      	cmp	r2, r3
 800892e:	dbde      	blt.n	80088ee <f_gets+0x16>
 8008930:	e002      	b.n	8008938 <f_gets+0x60>
		if (rc != 1) break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008936:	bf00      	nop
	}
	*p = 0;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2200      	movs	r2, #0
 800893c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <f_gets+0x70>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	e000      	b.n	800894a <f_gets+0x72>
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3720      	adds	r7, #32
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008962:	2301      	movs	r3, #1
 8008964:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800896a:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 800896c:	7a5b      	ldrb	r3, [r3, #9]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	d831      	bhi.n	80089d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008974:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 8008976:	7a5b      	ldrb	r3, [r3, #9]
 8008978:	b2db      	uxtb	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	4b19      	ldr	r3, [pc, #100]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 800897e:	2100      	movs	r1, #0
 8008980:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008982:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 8008984:	7a5b      	ldrb	r3, [r3, #9]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	4a16      	ldr	r2, [pc, #88]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008992:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 8008994:	7a5b      	ldrb	r3, [r3, #9]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 800899c:	4413      	add	r3, r2
 800899e:	79fa      	ldrb	r2, [r7, #7]
 80089a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80089a2:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 80089a4:	7a5b      	ldrb	r3, [r3, #9]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	b2d1      	uxtb	r1, r2
 80089ac:	4a0d      	ldr	r2, [pc, #52]	; (80089e4 <FATFS_LinkDriverEx+0x90>)
 80089ae:	7251      	strb	r1, [r2, #9]
 80089b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80089b2:	7dbb      	ldrb	r3, [r7, #22]
 80089b4:	3330      	adds	r3, #48	; 0x30
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	3301      	adds	r3, #1
 80089c0:	223a      	movs	r2, #58	; 0x3a
 80089c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	3302      	adds	r3, #2
 80089c8:	222f      	movs	r2, #47	; 0x2f
 80089ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	3303      	adds	r3, #3
 80089d0:	2200      	movs	r2, #0
 80089d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr
 80089e4:	20000538 	.word	0x20000538

080089e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff ffac 	bl	8008954 <FATFS_LinkDriverEx>
 80089fc:	4603      	mov	r3, r0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	4603      	mov	r3, r0
 8008a10:	6039      	str	r1, [r7, #0]
 8008a12:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008a14:	88fb      	ldrh	r3, [r7, #6]
 8008a16:	2b7f      	cmp	r3, #127	; 0x7f
 8008a18:	d802      	bhi.n	8008a20 <ff_convert+0x18>
		c = chr;
 8008a1a:	88fb      	ldrh	r3, [r7, #6]
 8008a1c:	81fb      	strh	r3, [r7, #14]
 8008a1e:	e025      	b.n	8008a6c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	2bff      	cmp	r3, #255	; 0xff
 8008a2a:	d805      	bhi.n	8008a38 <ff_convert+0x30>
 8008a2c:	88fb      	ldrh	r3, [r7, #6]
 8008a2e:	3b80      	subs	r3, #128	; 0x80
 8008a30:	4a11      	ldr	r2, [pc, #68]	; (8008a78 <ff_convert+0x70>)
 8008a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a36:	e000      	b.n	8008a3a <ff_convert+0x32>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	81fb      	strh	r3, [r7, #14]
 8008a3c:	e016      	b.n	8008a6c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8008a3e:	2300      	movs	r3, #0
 8008a40:	81fb      	strh	r3, [r7, #14]
 8008a42:	e009      	b.n	8008a58 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008a44:	89fb      	ldrh	r3, [r7, #14]
 8008a46:	4a0c      	ldr	r2, [pc, #48]	; (8008a78 <ff_convert+0x70>)
 8008a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a4c:	88fa      	ldrh	r2, [r7, #6]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d006      	beq.n	8008a60 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008a52:	89fb      	ldrh	r3, [r7, #14]
 8008a54:	3301      	adds	r3, #1
 8008a56:	81fb      	strh	r3, [r7, #14]
 8008a58:	89fb      	ldrh	r3, [r7, #14]
 8008a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a5c:	d9f2      	bls.n	8008a44 <ff_convert+0x3c>
 8008a5e:	e000      	b.n	8008a62 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008a60:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008a62:	89fb      	ldrh	r3, [r7, #14]
 8008a64:	3380      	adds	r3, #128	; 0x80
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr
 8008a78:	0800becc 	.word	0x0800becc

08008a7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	e002      	b.n	8008a92 <ff_wtoupper+0x16>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	4a0f      	ldr	r2, [pc, #60]	; (8008ad0 <ff_wtoupper+0x54>)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <ff_wtoupper+0x30>
 8008a9e:	4a0c      	ldr	r2, [pc, #48]	; (8008ad0 <ff_wtoupper+0x54>)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa6:	88fa      	ldrh	r2, [r7, #6]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d1ef      	bne.n	8008a8c <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8008aac:	4a08      	ldr	r2, [pc, #32]	; (8008ad0 <ff_wtoupper+0x54>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <ff_wtoupper+0x46>
 8008ab8:	4a06      	ldr	r2, [pc, #24]	; (8008ad4 <ff_wtoupper+0x58>)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac0:	e000      	b.n	8008ac4 <ff_wtoupper+0x48>
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	0800bfcc 	.word	0x0800bfcc
 8008ad4:	0800c1ac 	.word	0x0800c1ac

08008ad8 <__errno>:
 8008ad8:	4b01      	ldr	r3, [pc, #4]	; (8008ae0 <__errno+0x8>)
 8008ada:	6818      	ldr	r0, [r3, #0]
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000024 	.word	0x20000024

08008ae4 <__libc_init_array>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	2600      	movs	r6, #0
 8008ae8:	4d0c      	ldr	r5, [pc, #48]	; (8008b1c <__libc_init_array+0x38>)
 8008aea:	4c0d      	ldr	r4, [pc, #52]	; (8008b20 <__libc_init_array+0x3c>)
 8008aec:	1b64      	subs	r4, r4, r5
 8008aee:	10a4      	asrs	r4, r4, #2
 8008af0:	42a6      	cmp	r6, r4
 8008af2:	d109      	bne.n	8008b08 <__libc_init_array+0x24>
 8008af4:	f002 ff64 	bl	800b9c0 <_init>
 8008af8:	2600      	movs	r6, #0
 8008afa:	4d0a      	ldr	r5, [pc, #40]	; (8008b24 <__libc_init_array+0x40>)
 8008afc:	4c0a      	ldr	r4, [pc, #40]	; (8008b28 <__libc_init_array+0x44>)
 8008afe:	1b64      	subs	r4, r4, r5
 8008b00:	10a4      	asrs	r4, r4, #2
 8008b02:	42a6      	cmp	r6, r4
 8008b04:	d105      	bne.n	8008b12 <__libc_init_array+0x2e>
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0c:	4798      	blx	r3
 8008b0e:	3601      	adds	r6, #1
 8008b10:	e7ee      	b.n	8008af0 <__libc_init_array+0xc>
 8008b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b16:	4798      	blx	r3
 8008b18:	3601      	adds	r6, #1
 8008b1a:	e7f2      	b.n	8008b02 <__libc_init_array+0x1e>
 8008b1c:	0800c76c 	.word	0x0800c76c
 8008b20:	0800c76c 	.word	0x0800c76c
 8008b24:	0800c76c 	.word	0x0800c76c
 8008b28:	0800c770 	.word	0x0800c770

08008b2c <memcpy>:
 8008b2c:	440a      	add	r2, r1
 8008b2e:	4291      	cmp	r1, r2
 8008b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b34:	d100      	bne.n	8008b38 <memcpy+0xc>
 8008b36:	4770      	bx	lr
 8008b38:	b510      	push	{r4, lr}
 8008b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b3e:	4291      	cmp	r1, r2
 8008b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b44:	d1f9      	bne.n	8008b3a <memcpy+0xe>
 8008b46:	bd10      	pop	{r4, pc}

08008b48 <memset>:
 8008b48:	4603      	mov	r3, r0
 8008b4a:	4402      	add	r2, r0
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d100      	bne.n	8008b52 <memset+0xa>
 8008b50:	4770      	bx	lr
 8008b52:	f803 1b01 	strb.w	r1, [r3], #1
 8008b56:	e7f9      	b.n	8008b4c <memset+0x4>

08008b58 <__cvt>:
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5e:	461f      	mov	r7, r3
 8008b60:	bfbb      	ittet	lt
 8008b62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008b66:	461f      	movlt	r7, r3
 8008b68:	2300      	movge	r3, #0
 8008b6a:	232d      	movlt	r3, #45	; 0x2d
 8008b6c:	b088      	sub	sp, #32
 8008b6e:	4614      	mov	r4, r2
 8008b70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008b74:	7013      	strb	r3, [r2, #0]
 8008b76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b78:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008b7c:	f023 0820 	bic.w	r8, r3, #32
 8008b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b84:	d005      	beq.n	8008b92 <__cvt+0x3a>
 8008b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b8a:	d100      	bne.n	8008b8e <__cvt+0x36>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e000      	b.n	8008b94 <__cvt+0x3c>
 8008b92:	2303      	movs	r3, #3
 8008b94:	aa07      	add	r2, sp, #28
 8008b96:	9204      	str	r2, [sp, #16]
 8008b98:	aa06      	add	r2, sp, #24
 8008b9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008b9e:	e9cd 3500 	strd	r3, r5, [sp]
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	f000 fe4f 	bl	8009848 <_dtoa_r>
 8008baa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008bae:	4606      	mov	r6, r0
 8008bb0:	d102      	bne.n	8008bb8 <__cvt+0x60>
 8008bb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bb4:	07db      	lsls	r3, r3, #31
 8008bb6:	d522      	bpl.n	8008bfe <__cvt+0xa6>
 8008bb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bbc:	eb06 0905 	add.w	r9, r6, r5
 8008bc0:	d110      	bne.n	8008be4 <__cvt+0x8c>
 8008bc2:	7833      	ldrb	r3, [r6, #0]
 8008bc4:	2b30      	cmp	r3, #48	; 0x30
 8008bc6:	d10a      	bne.n	8008bde <__cvt+0x86>
 8008bc8:	2200      	movs	r2, #0
 8008bca:	2300      	movs	r3, #0
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 feea 	bl	80009a8 <__aeabi_dcmpeq>
 8008bd4:	b918      	cbnz	r0, 8008bde <__cvt+0x86>
 8008bd6:	f1c5 0501 	rsb	r5, r5, #1
 8008bda:	f8ca 5000 	str.w	r5, [sl]
 8008bde:	f8da 3000 	ldr.w	r3, [sl]
 8008be2:	4499      	add	r9, r3
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	4620      	mov	r0, r4
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 fedc 	bl	80009a8 <__aeabi_dcmpeq>
 8008bf0:	b108      	cbz	r0, 8008bf6 <__cvt+0x9e>
 8008bf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008bf6:	2230      	movs	r2, #48	; 0x30
 8008bf8:	9b07      	ldr	r3, [sp, #28]
 8008bfa:	454b      	cmp	r3, r9
 8008bfc:	d307      	bcc.n	8008c0e <__cvt+0xb6>
 8008bfe:	4630      	mov	r0, r6
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008c04:	1b9b      	subs	r3, r3, r6
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	b008      	add	sp, #32
 8008c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0e:	1c59      	adds	r1, r3, #1
 8008c10:	9107      	str	r1, [sp, #28]
 8008c12:	701a      	strb	r2, [r3, #0]
 8008c14:	e7f0      	b.n	8008bf8 <__cvt+0xa0>

08008c16 <__exponent>:
 8008c16:	4603      	mov	r3, r0
 8008c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c1a:	2900      	cmp	r1, #0
 8008c1c:	f803 2b02 	strb.w	r2, [r3], #2
 8008c20:	bfb6      	itet	lt
 8008c22:	222d      	movlt	r2, #45	; 0x2d
 8008c24:	222b      	movge	r2, #43	; 0x2b
 8008c26:	4249      	neglt	r1, r1
 8008c28:	2909      	cmp	r1, #9
 8008c2a:	7042      	strb	r2, [r0, #1]
 8008c2c:	dd2b      	ble.n	8008c86 <__exponent+0x70>
 8008c2e:	f10d 0407 	add.w	r4, sp, #7
 8008c32:	46a4      	mov	ip, r4
 8008c34:	270a      	movs	r7, #10
 8008c36:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c3a:	460a      	mov	r2, r1
 8008c3c:	46a6      	mov	lr, r4
 8008c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8008c42:	2a63      	cmp	r2, #99	; 0x63
 8008c44:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008c48:	4631      	mov	r1, r6
 8008c4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c52:	dcf0      	bgt.n	8008c36 <__exponent+0x20>
 8008c54:	3130      	adds	r1, #48	; 0x30
 8008c56:	f1ae 0502 	sub.w	r5, lr, #2
 8008c5a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c5e:	4629      	mov	r1, r5
 8008c60:	1c44      	adds	r4, r0, #1
 8008c62:	4561      	cmp	r1, ip
 8008c64:	d30a      	bcc.n	8008c7c <__exponent+0x66>
 8008c66:	f10d 0209 	add.w	r2, sp, #9
 8008c6a:	eba2 020e 	sub.w	r2, r2, lr
 8008c6e:	4565      	cmp	r5, ip
 8008c70:	bf88      	it	hi
 8008c72:	2200      	movhi	r2, #0
 8008c74:	4413      	add	r3, r2
 8008c76:	1a18      	subs	r0, r3, r0
 8008c78:	b003      	add	sp, #12
 8008c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c80:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c84:	e7ed      	b.n	8008c62 <__exponent+0x4c>
 8008c86:	2330      	movs	r3, #48	; 0x30
 8008c88:	3130      	adds	r1, #48	; 0x30
 8008c8a:	7083      	strb	r3, [r0, #2]
 8008c8c:	70c1      	strb	r1, [r0, #3]
 8008c8e:	1d03      	adds	r3, r0, #4
 8008c90:	e7f1      	b.n	8008c76 <__exponent+0x60>
	...

08008c94 <_printf_float>:
 8008c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c98:	b091      	sub	sp, #68	; 0x44
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008ca0:	4616      	mov	r6, r2
 8008ca2:	461f      	mov	r7, r3
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	f001 fd75 	bl	800a794 <_localeconv_r>
 8008caa:	6803      	ldr	r3, [r0, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	f7f7 fa4e 	bl	8000150 <strlen>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	930e      	str	r3, [sp, #56]	; 0x38
 8008cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cbc:	900a      	str	r0, [sp, #40]	; 0x28
 8008cbe:	3307      	adds	r3, #7
 8008cc0:	f023 0307 	bic.w	r3, r3, #7
 8008cc4:	f103 0208 	add.w	r2, r3, #8
 8008cc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ccc:	f8d4 b000 	ldr.w	fp, [r4]
 8008cd0:	f8c8 2000 	str.w	r2, [r8]
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008cdc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008ce0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cea:	4640      	mov	r0, r8
 8008cec:	4b9c      	ldr	r3, [pc, #624]	; (8008f60 <_printf_float+0x2cc>)
 8008cee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cf0:	f7f7 fe8c 	bl	8000a0c <__aeabi_dcmpun>
 8008cf4:	bb70      	cbnz	r0, 8008d54 <_printf_float+0xc0>
 8008cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	4b98      	ldr	r3, [pc, #608]	; (8008f60 <_printf_float+0x2cc>)
 8008cfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d00:	f7f7 fe66 	bl	80009d0 <__aeabi_dcmple>
 8008d04:	bb30      	cbnz	r0, 8008d54 <_printf_float+0xc0>
 8008d06:	2200      	movs	r2, #0
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4640      	mov	r0, r8
 8008d0c:	4651      	mov	r1, sl
 8008d0e:	f7f7 fe55 	bl	80009bc <__aeabi_dcmplt>
 8008d12:	b110      	cbz	r0, 8008d1a <_printf_float+0x86>
 8008d14:	232d      	movs	r3, #45	; 0x2d
 8008d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d1a:	4b92      	ldr	r3, [pc, #584]	; (8008f64 <_printf_float+0x2d0>)
 8008d1c:	4892      	ldr	r0, [pc, #584]	; (8008f68 <_printf_float+0x2d4>)
 8008d1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008d22:	bf94      	ite	ls
 8008d24:	4698      	movls	r8, r3
 8008d26:	4680      	movhi	r8, r0
 8008d28:	2303      	movs	r3, #3
 8008d2a:	f04f 0a00 	mov.w	sl, #0
 8008d2e:	6123      	str	r3, [r4, #16]
 8008d30:	f02b 0304 	bic.w	r3, fp, #4
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	4633      	mov	r3, r6
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	9700      	str	r7, [sp, #0]
 8008d3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008d40:	f000 f9d4 	bl	80090ec <_printf_common>
 8008d44:	3001      	adds	r0, #1
 8008d46:	f040 8090 	bne.w	8008e6a <_printf_float+0x1d6>
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	b011      	add	sp, #68	; 0x44
 8008d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d54:	4642      	mov	r2, r8
 8008d56:	4653      	mov	r3, sl
 8008d58:	4640      	mov	r0, r8
 8008d5a:	4651      	mov	r1, sl
 8008d5c:	f7f7 fe56 	bl	8000a0c <__aeabi_dcmpun>
 8008d60:	b148      	cbz	r0, 8008d76 <_printf_float+0xe2>
 8008d62:	f1ba 0f00 	cmp.w	sl, #0
 8008d66:	bfb8      	it	lt
 8008d68:	232d      	movlt	r3, #45	; 0x2d
 8008d6a:	4880      	ldr	r0, [pc, #512]	; (8008f6c <_printf_float+0x2d8>)
 8008d6c:	bfb8      	it	lt
 8008d6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d72:	4b7f      	ldr	r3, [pc, #508]	; (8008f70 <_printf_float+0x2dc>)
 8008d74:	e7d3      	b.n	8008d1e <_printf_float+0x8a>
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	d142      	bne.n	8008e06 <_printf_float+0x172>
 8008d80:	2306      	movs	r3, #6
 8008d82:	6063      	str	r3, [r4, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	9206      	str	r2, [sp, #24]
 8008d88:	aa0e      	add	r2, sp, #56	; 0x38
 8008d8a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008d8e:	aa0d      	add	r2, sp, #52	; 0x34
 8008d90:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008d94:	9203      	str	r2, [sp, #12]
 8008d96:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008d9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d9e:	6023      	str	r3, [r4, #0]
 8008da0:	6863      	ldr	r3, [r4, #4]
 8008da2:	4642      	mov	r2, r8
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	4628      	mov	r0, r5
 8008da8:	4653      	mov	r3, sl
 8008daa:	910b      	str	r1, [sp, #44]	; 0x2c
 8008dac:	f7ff fed4 	bl	8008b58 <__cvt>
 8008db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008db2:	4680      	mov	r8, r0
 8008db4:	2947      	cmp	r1, #71	; 0x47
 8008db6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008db8:	d108      	bne.n	8008dcc <_printf_float+0x138>
 8008dba:	1cc8      	adds	r0, r1, #3
 8008dbc:	db02      	blt.n	8008dc4 <_printf_float+0x130>
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	4299      	cmp	r1, r3
 8008dc2:	dd40      	ble.n	8008e46 <_printf_float+0x1b2>
 8008dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8008dc8:	fa5f f989 	uxtb.w	r9, r9
 8008dcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008dd0:	d81f      	bhi.n	8008e12 <_printf_float+0x17e>
 8008dd2:	464a      	mov	r2, r9
 8008dd4:	3901      	subs	r1, #1
 8008dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dda:	910d      	str	r1, [sp, #52]	; 0x34
 8008ddc:	f7ff ff1b 	bl	8008c16 <__exponent>
 8008de0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008de2:	4682      	mov	sl, r0
 8008de4:	1813      	adds	r3, r2, r0
 8008de6:	2a01      	cmp	r2, #1
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	dc02      	bgt.n	8008df2 <_printf_float+0x15e>
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	07d2      	lsls	r2, r2, #31
 8008df0:	d501      	bpl.n	8008df6 <_printf_float+0x162>
 8008df2:	3301      	adds	r3, #1
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d09b      	beq.n	8008d36 <_printf_float+0xa2>
 8008dfe:	232d      	movs	r3, #45	; 0x2d
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e04:	e797      	b.n	8008d36 <_printf_float+0xa2>
 8008e06:	2947      	cmp	r1, #71	; 0x47
 8008e08:	d1bc      	bne.n	8008d84 <_printf_float+0xf0>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1ba      	bne.n	8008d84 <_printf_float+0xf0>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7b7      	b.n	8008d82 <_printf_float+0xee>
 8008e12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008e16:	d118      	bne.n	8008e4a <_printf_float+0x1b6>
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	dd0b      	ble.n	8008e36 <_printf_float+0x1a2>
 8008e1e:	6121      	str	r1, [r4, #16]
 8008e20:	b913      	cbnz	r3, 8008e28 <_printf_float+0x194>
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	07d0      	lsls	r0, r2, #31
 8008e26:	d502      	bpl.n	8008e2e <_printf_float+0x19a>
 8008e28:	3301      	adds	r3, #1
 8008e2a:	440b      	add	r3, r1
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	f04f 0a00 	mov.w	sl, #0
 8008e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e34:	e7df      	b.n	8008df6 <_printf_float+0x162>
 8008e36:	b913      	cbnz	r3, 8008e3e <_printf_float+0x1aa>
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	07d2      	lsls	r2, r2, #31
 8008e3c:	d501      	bpl.n	8008e42 <_printf_float+0x1ae>
 8008e3e:	3302      	adds	r3, #2
 8008e40:	e7f4      	b.n	8008e2c <_printf_float+0x198>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7f2      	b.n	8008e2c <_printf_float+0x198>
 8008e46:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	db05      	blt.n	8008e5c <_printf_float+0x1c8>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	6121      	str	r1, [r4, #16]
 8008e54:	07d8      	lsls	r0, r3, #31
 8008e56:	d5ea      	bpl.n	8008e2e <_printf_float+0x19a>
 8008e58:	1c4b      	adds	r3, r1, #1
 8008e5a:	e7e7      	b.n	8008e2c <_printf_float+0x198>
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	bfcc      	ite	gt
 8008e60:	2201      	movgt	r2, #1
 8008e62:	f1c1 0202 	rsble	r2, r1, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	e7e0      	b.n	8008e2c <_printf_float+0x198>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	055a      	lsls	r2, r3, #21
 8008e6e:	d407      	bmi.n	8008e80 <_printf_float+0x1ec>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	4642      	mov	r2, r8
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d12b      	bne.n	8008ed6 <_printf_float+0x242>
 8008e7e:	e764      	b.n	8008d4a <_printf_float+0xb6>
 8008e80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008e84:	f240 80dd 	bls.w	8009042 <_printf_float+0x3ae>
 8008e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f7f7 fd8a 	bl	80009a8 <__aeabi_dcmpeq>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d033      	beq.n	8008f00 <_printf_float+0x26c>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	4a35      	ldr	r2, [pc, #212]	; (8008f74 <_printf_float+0x2e0>)
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f43f af51 	beq.w	8008d4a <_printf_float+0xb6>
 8008ea8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008eac:	429a      	cmp	r2, r3
 8008eae:	db02      	blt.n	8008eb6 <_printf_float+0x222>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07d8      	lsls	r0, r3, #31
 8008eb4:	d50f      	bpl.n	8008ed6 <_printf_float+0x242>
 8008eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f af42 	beq.w	8008d4a <_printf_float+0xb6>
 8008ec6:	f04f 0800 	mov.w	r8, #0
 8008eca:	f104 091a 	add.w	r9, r4, #26
 8008ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	4543      	cmp	r3, r8
 8008ed4:	dc09      	bgt.n	8008eea <_printf_float+0x256>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	079b      	lsls	r3, r3, #30
 8008eda:	f100 8102 	bmi.w	80090e2 <_printf_float+0x44e>
 8008ede:	68e0      	ldr	r0, [r4, #12]
 8008ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ee2:	4298      	cmp	r0, r3
 8008ee4:	bfb8      	it	lt
 8008ee6:	4618      	movlt	r0, r3
 8008ee8:	e731      	b.n	8008d4e <_printf_float+0xba>
 8008eea:	2301      	movs	r3, #1
 8008eec:	464a      	mov	r2, r9
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f af28 	beq.w	8008d4a <_printf_float+0xb6>
 8008efa:	f108 0801 	add.w	r8, r8, #1
 8008efe:	e7e6      	b.n	8008ece <_printf_float+0x23a>
 8008f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	dc38      	bgt.n	8008f78 <_printf_float+0x2e4>
 8008f06:	2301      	movs	r3, #1
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	4a19      	ldr	r2, [pc, #100]	; (8008f74 <_printf_float+0x2e0>)
 8008f0e:	47b8      	blx	r7
 8008f10:	3001      	adds	r0, #1
 8008f12:	f43f af1a 	beq.w	8008d4a <_printf_float+0xb6>
 8008f16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	d102      	bne.n	8008f24 <_printf_float+0x290>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	07d9      	lsls	r1, r3, #31
 8008f22:	d5d8      	bpl.n	8008ed6 <_printf_float+0x242>
 8008f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f af0b 	beq.w	8008d4a <_printf_float+0xb6>
 8008f34:	f04f 0900 	mov.w	r9, #0
 8008f38:	f104 0a1a 	add.w	sl, r4, #26
 8008f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3e:	425b      	negs	r3, r3
 8008f40:	454b      	cmp	r3, r9
 8008f42:	dc01      	bgt.n	8008f48 <_printf_float+0x2b4>
 8008f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f46:	e794      	b.n	8008e72 <_printf_float+0x1de>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4652      	mov	r2, sl
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4628      	mov	r0, r5
 8008f50:	47b8      	blx	r7
 8008f52:	3001      	adds	r0, #1
 8008f54:	f43f aef9 	beq.w	8008d4a <_printf_float+0xb6>
 8008f58:	f109 0901 	add.w	r9, r9, #1
 8008f5c:	e7ee      	b.n	8008f3c <_printf_float+0x2a8>
 8008f5e:	bf00      	nop
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	0800c390 	.word	0x0800c390
 8008f68:	0800c394 	.word	0x0800c394
 8008f6c:	0800c39c 	.word	0x0800c39c
 8008f70:	0800c398 	.word	0x0800c398
 8008f74:	0800c3a0 	.word	0x0800c3a0
 8008f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	bfa8      	it	ge
 8008f80:	461a      	movge	r2, r3
 8008f82:	2a00      	cmp	r2, #0
 8008f84:	4691      	mov	r9, r2
 8008f86:	dc37      	bgt.n	8008ff8 <_printf_float+0x364>
 8008f88:	f04f 0b00 	mov.w	fp, #0
 8008f8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f90:	f104 021a 	add.w	r2, r4, #26
 8008f94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008f98:	ebaa 0309 	sub.w	r3, sl, r9
 8008f9c:	455b      	cmp	r3, fp
 8008f9e:	dc33      	bgt.n	8009008 <_printf_float+0x374>
 8008fa0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	db3b      	blt.n	8009020 <_printf_float+0x38c>
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	07da      	lsls	r2, r3, #31
 8008fac:	d438      	bmi.n	8009020 <_printf_float+0x38c>
 8008fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008fb2:	eba2 030a 	sub.w	r3, r2, sl
 8008fb6:	eba2 0901 	sub.w	r9, r2, r1
 8008fba:	4599      	cmp	r9, r3
 8008fbc:	bfa8      	it	ge
 8008fbe:	4699      	movge	r9, r3
 8008fc0:	f1b9 0f00 	cmp.w	r9, #0
 8008fc4:	dc34      	bgt.n	8009030 <_printf_float+0x39c>
 8008fc6:	f04f 0800 	mov.w	r8, #0
 8008fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fce:	f104 0a1a 	add.w	sl, r4, #26
 8008fd2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008fd6:	1a9b      	subs	r3, r3, r2
 8008fd8:	eba3 0309 	sub.w	r3, r3, r9
 8008fdc:	4543      	cmp	r3, r8
 8008fde:	f77f af7a 	ble.w	8008ed6 <_printf_float+0x242>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f aeac 	beq.w	8008d4a <_printf_float+0xb6>
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	e7ec      	b.n	8008fd2 <_printf_float+0x33e>
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	4631      	mov	r1, r6
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b8      	blx	r7
 8009002:	3001      	adds	r0, #1
 8009004:	d1c0      	bne.n	8008f88 <_printf_float+0x2f4>
 8009006:	e6a0      	b.n	8008d4a <_printf_float+0xb6>
 8009008:	2301      	movs	r3, #1
 800900a:	4631      	mov	r1, r6
 800900c:	4628      	mov	r0, r5
 800900e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009010:	47b8      	blx	r7
 8009012:	3001      	adds	r0, #1
 8009014:	f43f ae99 	beq.w	8008d4a <_printf_float+0xb6>
 8009018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800901a:	f10b 0b01 	add.w	fp, fp, #1
 800901e:	e7b9      	b.n	8008f94 <_printf_float+0x300>
 8009020:	4631      	mov	r1, r6
 8009022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	d1bf      	bne.n	8008fae <_printf_float+0x31a>
 800902e:	e68c      	b.n	8008d4a <_printf_float+0xb6>
 8009030:	464b      	mov	r3, r9
 8009032:	4631      	mov	r1, r6
 8009034:	4628      	mov	r0, r5
 8009036:	eb08 020a 	add.w	r2, r8, sl
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	d1c2      	bne.n	8008fc6 <_printf_float+0x332>
 8009040:	e683      	b.n	8008d4a <_printf_float+0xb6>
 8009042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009044:	2a01      	cmp	r2, #1
 8009046:	dc01      	bgt.n	800904c <_printf_float+0x3b8>
 8009048:	07db      	lsls	r3, r3, #31
 800904a:	d537      	bpl.n	80090bc <_printf_float+0x428>
 800904c:	2301      	movs	r3, #1
 800904e:	4642      	mov	r2, r8
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	47b8      	blx	r7
 8009056:	3001      	adds	r0, #1
 8009058:	f43f ae77 	beq.w	8008d4a <_printf_float+0xb6>
 800905c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f ae6f 	beq.w	8008d4a <_printf_float+0xb6>
 800906c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009070:	2200      	movs	r2, #0
 8009072:	2300      	movs	r3, #0
 8009074:	f7f7 fc98 	bl	80009a8 <__aeabi_dcmpeq>
 8009078:	b9d8      	cbnz	r0, 80090b2 <_printf_float+0x41e>
 800907a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800907c:	f108 0201 	add.w	r2, r8, #1
 8009080:	3b01      	subs	r3, #1
 8009082:	4631      	mov	r1, r6
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	d10e      	bne.n	80090aa <_printf_float+0x416>
 800908c:	e65d      	b.n	8008d4a <_printf_float+0xb6>
 800908e:	2301      	movs	r3, #1
 8009090:	464a      	mov	r2, r9
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	f43f ae56 	beq.w	8008d4a <_printf_float+0xb6>
 800909e:	f108 0801 	add.w	r8, r8, #1
 80090a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4543      	cmp	r3, r8
 80090a8:	dcf1      	bgt.n	800908e <_printf_float+0x3fa>
 80090aa:	4653      	mov	r3, sl
 80090ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090b0:	e6e0      	b.n	8008e74 <_printf_float+0x1e0>
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	f104 091a 	add.w	r9, r4, #26
 80090ba:	e7f2      	b.n	80090a2 <_printf_float+0x40e>
 80090bc:	2301      	movs	r3, #1
 80090be:	4642      	mov	r2, r8
 80090c0:	e7df      	b.n	8009082 <_printf_float+0x3ee>
 80090c2:	2301      	movs	r3, #1
 80090c4:	464a      	mov	r2, r9
 80090c6:	4631      	mov	r1, r6
 80090c8:	4628      	mov	r0, r5
 80090ca:	47b8      	blx	r7
 80090cc:	3001      	adds	r0, #1
 80090ce:	f43f ae3c 	beq.w	8008d4a <_printf_float+0xb6>
 80090d2:	f108 0801 	add.w	r8, r8, #1
 80090d6:	68e3      	ldr	r3, [r4, #12]
 80090d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80090da:	1a5b      	subs	r3, r3, r1
 80090dc:	4543      	cmp	r3, r8
 80090de:	dcf0      	bgt.n	80090c2 <_printf_float+0x42e>
 80090e0:	e6fd      	b.n	8008ede <_printf_float+0x24a>
 80090e2:	f04f 0800 	mov.w	r8, #0
 80090e6:	f104 0919 	add.w	r9, r4, #25
 80090ea:	e7f4      	b.n	80090d6 <_printf_float+0x442>

080090ec <_printf_common>:
 80090ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f0:	4616      	mov	r6, r2
 80090f2:	4699      	mov	r9, r3
 80090f4:	688a      	ldr	r2, [r1, #8]
 80090f6:	690b      	ldr	r3, [r1, #16]
 80090f8:	4607      	mov	r7, r0
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bfb8      	it	lt
 80090fe:	4613      	movlt	r3, r2
 8009100:	6033      	str	r3, [r6, #0]
 8009102:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009106:	460c      	mov	r4, r1
 8009108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800910c:	b10a      	cbz	r2, 8009112 <_printf_common+0x26>
 800910e:	3301      	adds	r3, #1
 8009110:	6033      	str	r3, [r6, #0]
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	0699      	lsls	r1, r3, #26
 8009116:	bf42      	ittt	mi
 8009118:	6833      	ldrmi	r3, [r6, #0]
 800911a:	3302      	addmi	r3, #2
 800911c:	6033      	strmi	r3, [r6, #0]
 800911e:	6825      	ldr	r5, [r4, #0]
 8009120:	f015 0506 	ands.w	r5, r5, #6
 8009124:	d106      	bne.n	8009134 <_printf_common+0x48>
 8009126:	f104 0a19 	add.w	sl, r4, #25
 800912a:	68e3      	ldr	r3, [r4, #12]
 800912c:	6832      	ldr	r2, [r6, #0]
 800912e:	1a9b      	subs	r3, r3, r2
 8009130:	42ab      	cmp	r3, r5
 8009132:	dc28      	bgt.n	8009186 <_printf_common+0x9a>
 8009134:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009138:	1e13      	subs	r3, r2, #0
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	bf18      	it	ne
 800913e:	2301      	movne	r3, #1
 8009140:	0692      	lsls	r2, r2, #26
 8009142:	d42d      	bmi.n	80091a0 <_printf_common+0xb4>
 8009144:	4649      	mov	r1, r9
 8009146:	4638      	mov	r0, r7
 8009148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800914c:	47c0      	blx	r8
 800914e:	3001      	adds	r0, #1
 8009150:	d020      	beq.n	8009194 <_printf_common+0xa8>
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	68e5      	ldr	r5, [r4, #12]
 8009156:	f003 0306 	and.w	r3, r3, #6
 800915a:	2b04      	cmp	r3, #4
 800915c:	bf18      	it	ne
 800915e:	2500      	movne	r5, #0
 8009160:	6832      	ldr	r2, [r6, #0]
 8009162:	f04f 0600 	mov.w	r6, #0
 8009166:	68a3      	ldr	r3, [r4, #8]
 8009168:	bf08      	it	eq
 800916a:	1aad      	subeq	r5, r5, r2
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	bf08      	it	eq
 8009170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009174:	4293      	cmp	r3, r2
 8009176:	bfc4      	itt	gt
 8009178:	1a9b      	subgt	r3, r3, r2
 800917a:	18ed      	addgt	r5, r5, r3
 800917c:	341a      	adds	r4, #26
 800917e:	42b5      	cmp	r5, r6
 8009180:	d11a      	bne.n	80091b8 <_printf_common+0xcc>
 8009182:	2000      	movs	r0, #0
 8009184:	e008      	b.n	8009198 <_printf_common+0xac>
 8009186:	2301      	movs	r3, #1
 8009188:	4652      	mov	r2, sl
 800918a:	4649      	mov	r1, r9
 800918c:	4638      	mov	r0, r7
 800918e:	47c0      	blx	r8
 8009190:	3001      	adds	r0, #1
 8009192:	d103      	bne.n	800919c <_printf_common+0xb0>
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800919c:	3501      	adds	r5, #1
 800919e:	e7c4      	b.n	800912a <_printf_common+0x3e>
 80091a0:	2030      	movs	r0, #48	; 0x30
 80091a2:	18e1      	adds	r1, r4, r3
 80091a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091ae:	4422      	add	r2, r4
 80091b0:	3302      	adds	r3, #2
 80091b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b6:	e7c5      	b.n	8009144 <_printf_common+0x58>
 80091b8:	2301      	movs	r3, #1
 80091ba:	4622      	mov	r2, r4
 80091bc:	4649      	mov	r1, r9
 80091be:	4638      	mov	r0, r7
 80091c0:	47c0      	blx	r8
 80091c2:	3001      	adds	r0, #1
 80091c4:	d0e6      	beq.n	8009194 <_printf_common+0xa8>
 80091c6:	3601      	adds	r6, #1
 80091c8:	e7d9      	b.n	800917e <_printf_common+0x92>
	...

080091cc <_printf_i>:
 80091cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	460c      	mov	r4, r1
 80091d2:	7e27      	ldrb	r7, [r4, #24]
 80091d4:	4691      	mov	r9, r2
 80091d6:	2f78      	cmp	r7, #120	; 0x78
 80091d8:	4680      	mov	r8, r0
 80091da:	469a      	mov	sl, r3
 80091dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091e2:	d807      	bhi.n	80091f4 <_printf_i+0x28>
 80091e4:	2f62      	cmp	r7, #98	; 0x62
 80091e6:	d80a      	bhi.n	80091fe <_printf_i+0x32>
 80091e8:	2f00      	cmp	r7, #0
 80091ea:	f000 80d9 	beq.w	80093a0 <_printf_i+0x1d4>
 80091ee:	2f58      	cmp	r7, #88	; 0x58
 80091f0:	f000 80a4 	beq.w	800933c <_printf_i+0x170>
 80091f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80091f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091fc:	e03a      	b.n	8009274 <_printf_i+0xa8>
 80091fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009202:	2b15      	cmp	r3, #21
 8009204:	d8f6      	bhi.n	80091f4 <_printf_i+0x28>
 8009206:	a001      	add	r0, pc, #4	; (adr r0, 800920c <_printf_i+0x40>)
 8009208:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800920c:	08009265 	.word	0x08009265
 8009210:	08009279 	.word	0x08009279
 8009214:	080091f5 	.word	0x080091f5
 8009218:	080091f5 	.word	0x080091f5
 800921c:	080091f5 	.word	0x080091f5
 8009220:	080091f5 	.word	0x080091f5
 8009224:	08009279 	.word	0x08009279
 8009228:	080091f5 	.word	0x080091f5
 800922c:	080091f5 	.word	0x080091f5
 8009230:	080091f5 	.word	0x080091f5
 8009234:	080091f5 	.word	0x080091f5
 8009238:	08009387 	.word	0x08009387
 800923c:	080092a9 	.word	0x080092a9
 8009240:	08009369 	.word	0x08009369
 8009244:	080091f5 	.word	0x080091f5
 8009248:	080091f5 	.word	0x080091f5
 800924c:	080093a9 	.word	0x080093a9
 8009250:	080091f5 	.word	0x080091f5
 8009254:	080092a9 	.word	0x080092a9
 8009258:	080091f5 	.word	0x080091f5
 800925c:	080091f5 	.word	0x080091f5
 8009260:	08009371 	.word	0x08009371
 8009264:	680b      	ldr	r3, [r1, #0]
 8009266:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	600a      	str	r2, [r1, #0]
 8009270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009274:	2301      	movs	r3, #1
 8009276:	e0a4      	b.n	80093c2 <_printf_i+0x1f6>
 8009278:	6825      	ldr	r5, [r4, #0]
 800927a:	6808      	ldr	r0, [r1, #0]
 800927c:	062e      	lsls	r6, r5, #24
 800927e:	f100 0304 	add.w	r3, r0, #4
 8009282:	d50a      	bpl.n	800929a <_printf_i+0xce>
 8009284:	6805      	ldr	r5, [r0, #0]
 8009286:	600b      	str	r3, [r1, #0]
 8009288:	2d00      	cmp	r5, #0
 800928a:	da03      	bge.n	8009294 <_printf_i+0xc8>
 800928c:	232d      	movs	r3, #45	; 0x2d
 800928e:	426d      	negs	r5, r5
 8009290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009294:	230a      	movs	r3, #10
 8009296:	485e      	ldr	r0, [pc, #376]	; (8009410 <_printf_i+0x244>)
 8009298:	e019      	b.n	80092ce <_printf_i+0x102>
 800929a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800929e:	6805      	ldr	r5, [r0, #0]
 80092a0:	600b      	str	r3, [r1, #0]
 80092a2:	bf18      	it	ne
 80092a4:	b22d      	sxthne	r5, r5
 80092a6:	e7ef      	b.n	8009288 <_printf_i+0xbc>
 80092a8:	680b      	ldr	r3, [r1, #0]
 80092aa:	6825      	ldr	r5, [r4, #0]
 80092ac:	1d18      	adds	r0, r3, #4
 80092ae:	6008      	str	r0, [r1, #0]
 80092b0:	0628      	lsls	r0, r5, #24
 80092b2:	d501      	bpl.n	80092b8 <_printf_i+0xec>
 80092b4:	681d      	ldr	r5, [r3, #0]
 80092b6:	e002      	b.n	80092be <_printf_i+0xf2>
 80092b8:	0669      	lsls	r1, r5, #25
 80092ba:	d5fb      	bpl.n	80092b4 <_printf_i+0xe8>
 80092bc:	881d      	ldrh	r5, [r3, #0]
 80092be:	2f6f      	cmp	r7, #111	; 0x6f
 80092c0:	bf0c      	ite	eq
 80092c2:	2308      	moveq	r3, #8
 80092c4:	230a      	movne	r3, #10
 80092c6:	4852      	ldr	r0, [pc, #328]	; (8009410 <_printf_i+0x244>)
 80092c8:	2100      	movs	r1, #0
 80092ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ce:	6866      	ldr	r6, [r4, #4]
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	bfa8      	it	ge
 80092d4:	6821      	ldrge	r1, [r4, #0]
 80092d6:	60a6      	str	r6, [r4, #8]
 80092d8:	bfa4      	itt	ge
 80092da:	f021 0104 	bicge.w	r1, r1, #4
 80092de:	6021      	strge	r1, [r4, #0]
 80092e0:	b90d      	cbnz	r5, 80092e6 <_printf_i+0x11a>
 80092e2:	2e00      	cmp	r6, #0
 80092e4:	d04d      	beq.n	8009382 <_printf_i+0x1b6>
 80092e6:	4616      	mov	r6, r2
 80092e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80092ec:	fb03 5711 	mls	r7, r3, r1, r5
 80092f0:	5dc7      	ldrb	r7, [r0, r7]
 80092f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092f6:	462f      	mov	r7, r5
 80092f8:	42bb      	cmp	r3, r7
 80092fa:	460d      	mov	r5, r1
 80092fc:	d9f4      	bls.n	80092e8 <_printf_i+0x11c>
 80092fe:	2b08      	cmp	r3, #8
 8009300:	d10b      	bne.n	800931a <_printf_i+0x14e>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	07df      	lsls	r7, r3, #31
 8009306:	d508      	bpl.n	800931a <_printf_i+0x14e>
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	6861      	ldr	r1, [r4, #4]
 800930c:	4299      	cmp	r1, r3
 800930e:	bfde      	ittt	le
 8009310:	2330      	movle	r3, #48	; 0x30
 8009312:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009316:	f106 36ff 	addle.w	r6, r6, #4294967295
 800931a:	1b92      	subs	r2, r2, r6
 800931c:	6122      	str	r2, [r4, #16]
 800931e:	464b      	mov	r3, r9
 8009320:	4621      	mov	r1, r4
 8009322:	4640      	mov	r0, r8
 8009324:	f8cd a000 	str.w	sl, [sp]
 8009328:	aa03      	add	r2, sp, #12
 800932a:	f7ff fedf 	bl	80090ec <_printf_common>
 800932e:	3001      	adds	r0, #1
 8009330:	d14c      	bne.n	80093cc <_printf_i+0x200>
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	b004      	add	sp, #16
 8009338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933c:	4834      	ldr	r0, [pc, #208]	; (8009410 <_printf_i+0x244>)
 800933e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009342:	680e      	ldr	r6, [r1, #0]
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	f856 5b04 	ldr.w	r5, [r6], #4
 800934a:	061f      	lsls	r7, r3, #24
 800934c:	600e      	str	r6, [r1, #0]
 800934e:	d514      	bpl.n	800937a <_printf_i+0x1ae>
 8009350:	07d9      	lsls	r1, r3, #31
 8009352:	bf44      	itt	mi
 8009354:	f043 0320 	orrmi.w	r3, r3, #32
 8009358:	6023      	strmi	r3, [r4, #0]
 800935a:	b91d      	cbnz	r5, 8009364 <_printf_i+0x198>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	f023 0320 	bic.w	r3, r3, #32
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	2310      	movs	r3, #16
 8009366:	e7af      	b.n	80092c8 <_printf_i+0xfc>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	f043 0320 	orr.w	r3, r3, #32
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	2378      	movs	r3, #120	; 0x78
 8009372:	4828      	ldr	r0, [pc, #160]	; (8009414 <_printf_i+0x248>)
 8009374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009378:	e7e3      	b.n	8009342 <_printf_i+0x176>
 800937a:	065e      	lsls	r6, r3, #25
 800937c:	bf48      	it	mi
 800937e:	b2ad      	uxthmi	r5, r5
 8009380:	e7e6      	b.n	8009350 <_printf_i+0x184>
 8009382:	4616      	mov	r6, r2
 8009384:	e7bb      	b.n	80092fe <_printf_i+0x132>
 8009386:	680b      	ldr	r3, [r1, #0]
 8009388:	6826      	ldr	r6, [r4, #0]
 800938a:	1d1d      	adds	r5, r3, #4
 800938c:	6960      	ldr	r0, [r4, #20]
 800938e:	600d      	str	r5, [r1, #0]
 8009390:	0635      	lsls	r5, r6, #24
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	d501      	bpl.n	800939a <_printf_i+0x1ce>
 8009396:	6018      	str	r0, [r3, #0]
 8009398:	e002      	b.n	80093a0 <_printf_i+0x1d4>
 800939a:	0671      	lsls	r1, r6, #25
 800939c:	d5fb      	bpl.n	8009396 <_printf_i+0x1ca>
 800939e:	8018      	strh	r0, [r3, #0]
 80093a0:	2300      	movs	r3, #0
 80093a2:	4616      	mov	r6, r2
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	e7ba      	b.n	800931e <_printf_i+0x152>
 80093a8:	680b      	ldr	r3, [r1, #0]
 80093aa:	1d1a      	adds	r2, r3, #4
 80093ac:	600a      	str	r2, [r1, #0]
 80093ae:	681e      	ldr	r6, [r3, #0]
 80093b0:	2100      	movs	r1, #0
 80093b2:	4630      	mov	r0, r6
 80093b4:	6862      	ldr	r2, [r4, #4]
 80093b6:	f001 fa61 	bl	800a87c <memchr>
 80093ba:	b108      	cbz	r0, 80093c0 <_printf_i+0x1f4>
 80093bc:	1b80      	subs	r0, r0, r6
 80093be:	6060      	str	r0, [r4, #4]
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	2300      	movs	r3, #0
 80093c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ca:	e7a8      	b.n	800931e <_printf_i+0x152>
 80093cc:	4632      	mov	r2, r6
 80093ce:	4649      	mov	r1, r9
 80093d0:	4640      	mov	r0, r8
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	47d0      	blx	sl
 80093d6:	3001      	adds	r0, #1
 80093d8:	d0ab      	beq.n	8009332 <_printf_i+0x166>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	079b      	lsls	r3, r3, #30
 80093de:	d413      	bmi.n	8009408 <_printf_i+0x23c>
 80093e0:	68e0      	ldr	r0, [r4, #12]
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	4298      	cmp	r0, r3
 80093e6:	bfb8      	it	lt
 80093e8:	4618      	movlt	r0, r3
 80093ea:	e7a4      	b.n	8009336 <_printf_i+0x16a>
 80093ec:	2301      	movs	r3, #1
 80093ee:	4632      	mov	r2, r6
 80093f0:	4649      	mov	r1, r9
 80093f2:	4640      	mov	r0, r8
 80093f4:	47d0      	blx	sl
 80093f6:	3001      	adds	r0, #1
 80093f8:	d09b      	beq.n	8009332 <_printf_i+0x166>
 80093fa:	3501      	adds	r5, #1
 80093fc:	68e3      	ldr	r3, [r4, #12]
 80093fe:	9903      	ldr	r1, [sp, #12]
 8009400:	1a5b      	subs	r3, r3, r1
 8009402:	42ab      	cmp	r3, r5
 8009404:	dcf2      	bgt.n	80093ec <_printf_i+0x220>
 8009406:	e7eb      	b.n	80093e0 <_printf_i+0x214>
 8009408:	2500      	movs	r5, #0
 800940a:	f104 0619 	add.w	r6, r4, #25
 800940e:	e7f5      	b.n	80093fc <_printf_i+0x230>
 8009410:	0800c3a2 	.word	0x0800c3a2
 8009414:	0800c3b3 	.word	0x0800c3b3

08009418 <iprintf>:
 8009418:	b40f      	push	{r0, r1, r2, r3}
 800941a:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <iprintf+0x2c>)
 800941c:	b513      	push	{r0, r1, r4, lr}
 800941e:	681c      	ldr	r4, [r3, #0]
 8009420:	b124      	cbz	r4, 800942c <iprintf+0x14>
 8009422:	69a3      	ldr	r3, [r4, #24]
 8009424:	b913      	cbnz	r3, 800942c <iprintf+0x14>
 8009426:	4620      	mov	r0, r4
 8009428:	f001 f916 	bl	800a658 <__sinit>
 800942c:	ab05      	add	r3, sp, #20
 800942e:	4620      	mov	r0, r4
 8009430:	9a04      	ldr	r2, [sp, #16]
 8009432:	68a1      	ldr	r1, [r4, #8]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	f001 ffe9 	bl	800b40c <_vfiprintf_r>
 800943a:	b002      	add	sp, #8
 800943c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009440:	b004      	add	sp, #16
 8009442:	4770      	bx	lr
 8009444:	20000024 	.word	0x20000024

08009448 <_puts_r>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	460e      	mov	r6, r1
 800944c:	4605      	mov	r5, r0
 800944e:	b118      	cbz	r0, 8009458 <_puts_r+0x10>
 8009450:	6983      	ldr	r3, [r0, #24]
 8009452:	b90b      	cbnz	r3, 8009458 <_puts_r+0x10>
 8009454:	f001 f900 	bl	800a658 <__sinit>
 8009458:	69ab      	ldr	r3, [r5, #24]
 800945a:	68ac      	ldr	r4, [r5, #8]
 800945c:	b913      	cbnz	r3, 8009464 <_puts_r+0x1c>
 800945e:	4628      	mov	r0, r5
 8009460:	f001 f8fa 	bl	800a658 <__sinit>
 8009464:	4b2c      	ldr	r3, [pc, #176]	; (8009518 <_puts_r+0xd0>)
 8009466:	429c      	cmp	r4, r3
 8009468:	d120      	bne.n	80094ac <_puts_r+0x64>
 800946a:	686c      	ldr	r4, [r5, #4]
 800946c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800946e:	07db      	lsls	r3, r3, #31
 8009470:	d405      	bmi.n	800947e <_puts_r+0x36>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	0598      	lsls	r0, r3, #22
 8009476:	d402      	bmi.n	800947e <_puts_r+0x36>
 8009478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947a:	f001 f990 	bl	800a79e <__retarget_lock_acquire_recursive>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	0719      	lsls	r1, r3, #28
 8009482:	d51d      	bpl.n	80094c0 <_puts_r+0x78>
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	b1db      	cbz	r3, 80094c0 <_puts_r+0x78>
 8009488:	3e01      	subs	r6, #1
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009490:	3b01      	subs	r3, #1
 8009492:	60a3      	str	r3, [r4, #8]
 8009494:	bb39      	cbnz	r1, 80094e6 <_puts_r+0x9e>
 8009496:	2b00      	cmp	r3, #0
 8009498:	da38      	bge.n	800950c <_puts_r+0xc4>
 800949a:	4622      	mov	r2, r4
 800949c:	210a      	movs	r1, #10
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 f882 	bl	80095a8 <__swbuf_r>
 80094a4:	3001      	adds	r0, #1
 80094a6:	d011      	beq.n	80094cc <_puts_r+0x84>
 80094a8:	250a      	movs	r5, #10
 80094aa:	e011      	b.n	80094d0 <_puts_r+0x88>
 80094ac:	4b1b      	ldr	r3, [pc, #108]	; (800951c <_puts_r+0xd4>)
 80094ae:	429c      	cmp	r4, r3
 80094b0:	d101      	bne.n	80094b6 <_puts_r+0x6e>
 80094b2:	68ac      	ldr	r4, [r5, #8]
 80094b4:	e7da      	b.n	800946c <_puts_r+0x24>
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <_puts_r+0xd8>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	bf08      	it	eq
 80094bc:	68ec      	ldreq	r4, [r5, #12]
 80094be:	e7d5      	b.n	800946c <_puts_r+0x24>
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	f000 f8c2 	bl	800964c <__swsetup_r>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d0dd      	beq.n	8009488 <_puts_r+0x40>
 80094cc:	f04f 35ff 	mov.w	r5, #4294967295
 80094d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094d2:	07da      	lsls	r2, r3, #31
 80094d4:	d405      	bmi.n	80094e2 <_puts_r+0x9a>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	059b      	lsls	r3, r3, #22
 80094da:	d402      	bmi.n	80094e2 <_puts_r+0x9a>
 80094dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094de:	f001 f95f 	bl	800a7a0 <__retarget_lock_release_recursive>
 80094e2:	4628      	mov	r0, r5
 80094e4:	bd70      	pop	{r4, r5, r6, pc}
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da04      	bge.n	80094f4 <_puts_r+0xac>
 80094ea:	69a2      	ldr	r2, [r4, #24]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	dc06      	bgt.n	80094fe <_puts_r+0xb6>
 80094f0:	290a      	cmp	r1, #10
 80094f2:	d004      	beq.n	80094fe <_puts_r+0xb6>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	6022      	str	r2, [r4, #0]
 80094fa:	7019      	strb	r1, [r3, #0]
 80094fc:	e7c5      	b.n	800948a <_puts_r+0x42>
 80094fe:	4622      	mov	r2, r4
 8009500:	4628      	mov	r0, r5
 8009502:	f000 f851 	bl	80095a8 <__swbuf_r>
 8009506:	3001      	adds	r0, #1
 8009508:	d1bf      	bne.n	800948a <_puts_r+0x42>
 800950a:	e7df      	b.n	80094cc <_puts_r+0x84>
 800950c:	250a      	movs	r5, #10
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	701d      	strb	r5, [r3, #0]
 8009516:	e7db      	b.n	80094d0 <_puts_r+0x88>
 8009518:	0800c478 	.word	0x0800c478
 800951c:	0800c498 	.word	0x0800c498
 8009520:	0800c458 	.word	0x0800c458

08009524 <puts>:
 8009524:	4b02      	ldr	r3, [pc, #8]	; (8009530 <puts+0xc>)
 8009526:	4601      	mov	r1, r0
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f7ff bf8d 	b.w	8009448 <_puts_r>
 800952e:	bf00      	nop
 8009530:	20000024 	.word	0x20000024

08009534 <_vsniprintf_r>:
 8009534:	b530      	push	{r4, r5, lr}
 8009536:	1e14      	subs	r4, r2, #0
 8009538:	4605      	mov	r5, r0
 800953a:	b09b      	sub	sp, #108	; 0x6c
 800953c:	4618      	mov	r0, r3
 800953e:	da05      	bge.n	800954c <_vsniprintf_r+0x18>
 8009540:	238b      	movs	r3, #139	; 0x8b
 8009542:	f04f 30ff 	mov.w	r0, #4294967295
 8009546:	602b      	str	r3, [r5, #0]
 8009548:	b01b      	add	sp, #108	; 0x6c
 800954a:	bd30      	pop	{r4, r5, pc}
 800954c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009550:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009554:	bf0c      	ite	eq
 8009556:	4623      	moveq	r3, r4
 8009558:	f104 33ff 	addne.w	r3, r4, #4294967295
 800955c:	9302      	str	r3, [sp, #8]
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009564:	4602      	mov	r2, r0
 8009566:	9100      	str	r1, [sp, #0]
 8009568:	9104      	str	r1, [sp, #16]
 800956a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800956e:	4669      	mov	r1, sp
 8009570:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009572:	4628      	mov	r0, r5
 8009574:	f001 fe22 	bl	800b1bc <_svfiprintf_r>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	bfbc      	itt	lt
 800957c:	238b      	movlt	r3, #139	; 0x8b
 800957e:	602b      	strlt	r3, [r5, #0]
 8009580:	2c00      	cmp	r4, #0
 8009582:	d0e1      	beq.n	8009548 <_vsniprintf_r+0x14>
 8009584:	2200      	movs	r2, #0
 8009586:	9b00      	ldr	r3, [sp, #0]
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e7dd      	b.n	8009548 <_vsniprintf_r+0x14>

0800958c <vsniprintf>:
 800958c:	b507      	push	{r0, r1, r2, lr}
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	460a      	mov	r2, r1
 8009594:	4601      	mov	r1, r0
 8009596:	4803      	ldr	r0, [pc, #12]	; (80095a4 <vsniprintf+0x18>)
 8009598:	6800      	ldr	r0, [r0, #0]
 800959a:	f7ff ffcb 	bl	8009534 <_vsniprintf_r>
 800959e:	b003      	add	sp, #12
 80095a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80095a4:	20000024 	.word	0x20000024

080095a8 <__swbuf_r>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	460e      	mov	r6, r1
 80095ac:	4614      	mov	r4, r2
 80095ae:	4605      	mov	r5, r0
 80095b0:	b118      	cbz	r0, 80095ba <__swbuf_r+0x12>
 80095b2:	6983      	ldr	r3, [r0, #24]
 80095b4:	b90b      	cbnz	r3, 80095ba <__swbuf_r+0x12>
 80095b6:	f001 f84f 	bl	800a658 <__sinit>
 80095ba:	4b21      	ldr	r3, [pc, #132]	; (8009640 <__swbuf_r+0x98>)
 80095bc:	429c      	cmp	r4, r3
 80095be:	d12b      	bne.n	8009618 <__swbuf_r+0x70>
 80095c0:	686c      	ldr	r4, [r5, #4]
 80095c2:	69a3      	ldr	r3, [r4, #24]
 80095c4:	60a3      	str	r3, [r4, #8]
 80095c6:	89a3      	ldrh	r3, [r4, #12]
 80095c8:	071a      	lsls	r2, r3, #28
 80095ca:	d52f      	bpl.n	800962c <__swbuf_r+0x84>
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	b36b      	cbz	r3, 800962c <__swbuf_r+0x84>
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	6820      	ldr	r0, [r4, #0]
 80095d4:	b2f6      	uxtb	r6, r6
 80095d6:	1ac0      	subs	r0, r0, r3
 80095d8:	6963      	ldr	r3, [r4, #20]
 80095da:	4637      	mov	r7, r6
 80095dc:	4283      	cmp	r3, r0
 80095de:	dc04      	bgt.n	80095ea <__swbuf_r+0x42>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f000 ffa4 	bl	800a530 <_fflush_r>
 80095e8:	bb30      	cbnz	r0, 8009638 <__swbuf_r+0x90>
 80095ea:	68a3      	ldr	r3, [r4, #8]
 80095ec:	3001      	adds	r0, #1
 80095ee:	3b01      	subs	r3, #1
 80095f0:	60a3      	str	r3, [r4, #8]
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	6022      	str	r2, [r4, #0]
 80095f8:	701e      	strb	r6, [r3, #0]
 80095fa:	6963      	ldr	r3, [r4, #20]
 80095fc:	4283      	cmp	r3, r0
 80095fe:	d004      	beq.n	800960a <__swbuf_r+0x62>
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	07db      	lsls	r3, r3, #31
 8009604:	d506      	bpl.n	8009614 <__swbuf_r+0x6c>
 8009606:	2e0a      	cmp	r6, #10
 8009608:	d104      	bne.n	8009614 <__swbuf_r+0x6c>
 800960a:	4621      	mov	r1, r4
 800960c:	4628      	mov	r0, r5
 800960e:	f000 ff8f 	bl	800a530 <_fflush_r>
 8009612:	b988      	cbnz	r0, 8009638 <__swbuf_r+0x90>
 8009614:	4638      	mov	r0, r7
 8009616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009618:	4b0a      	ldr	r3, [pc, #40]	; (8009644 <__swbuf_r+0x9c>)
 800961a:	429c      	cmp	r4, r3
 800961c:	d101      	bne.n	8009622 <__swbuf_r+0x7a>
 800961e:	68ac      	ldr	r4, [r5, #8]
 8009620:	e7cf      	b.n	80095c2 <__swbuf_r+0x1a>
 8009622:	4b09      	ldr	r3, [pc, #36]	; (8009648 <__swbuf_r+0xa0>)
 8009624:	429c      	cmp	r4, r3
 8009626:	bf08      	it	eq
 8009628:	68ec      	ldreq	r4, [r5, #12]
 800962a:	e7ca      	b.n	80095c2 <__swbuf_r+0x1a>
 800962c:	4621      	mov	r1, r4
 800962e:	4628      	mov	r0, r5
 8009630:	f000 f80c 	bl	800964c <__swsetup_r>
 8009634:	2800      	cmp	r0, #0
 8009636:	d0cb      	beq.n	80095d0 <__swbuf_r+0x28>
 8009638:	f04f 37ff 	mov.w	r7, #4294967295
 800963c:	e7ea      	b.n	8009614 <__swbuf_r+0x6c>
 800963e:	bf00      	nop
 8009640:	0800c478 	.word	0x0800c478
 8009644:	0800c498 	.word	0x0800c498
 8009648:	0800c458 	.word	0x0800c458

0800964c <__swsetup_r>:
 800964c:	4b32      	ldr	r3, [pc, #200]	; (8009718 <__swsetup_r+0xcc>)
 800964e:	b570      	push	{r4, r5, r6, lr}
 8009650:	681d      	ldr	r5, [r3, #0]
 8009652:	4606      	mov	r6, r0
 8009654:	460c      	mov	r4, r1
 8009656:	b125      	cbz	r5, 8009662 <__swsetup_r+0x16>
 8009658:	69ab      	ldr	r3, [r5, #24]
 800965a:	b913      	cbnz	r3, 8009662 <__swsetup_r+0x16>
 800965c:	4628      	mov	r0, r5
 800965e:	f000 fffb 	bl	800a658 <__sinit>
 8009662:	4b2e      	ldr	r3, [pc, #184]	; (800971c <__swsetup_r+0xd0>)
 8009664:	429c      	cmp	r4, r3
 8009666:	d10f      	bne.n	8009688 <__swsetup_r+0x3c>
 8009668:	686c      	ldr	r4, [r5, #4]
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009670:	0719      	lsls	r1, r3, #28
 8009672:	d42c      	bmi.n	80096ce <__swsetup_r+0x82>
 8009674:	06dd      	lsls	r5, r3, #27
 8009676:	d411      	bmi.n	800969c <__swsetup_r+0x50>
 8009678:	2309      	movs	r3, #9
 800967a:	6033      	str	r3, [r6, #0]
 800967c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e03e      	b.n	8009706 <__swsetup_r+0xba>
 8009688:	4b25      	ldr	r3, [pc, #148]	; (8009720 <__swsetup_r+0xd4>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d101      	bne.n	8009692 <__swsetup_r+0x46>
 800968e:	68ac      	ldr	r4, [r5, #8]
 8009690:	e7eb      	b.n	800966a <__swsetup_r+0x1e>
 8009692:	4b24      	ldr	r3, [pc, #144]	; (8009724 <__swsetup_r+0xd8>)
 8009694:	429c      	cmp	r4, r3
 8009696:	bf08      	it	eq
 8009698:	68ec      	ldreq	r4, [r5, #12]
 800969a:	e7e6      	b.n	800966a <__swsetup_r+0x1e>
 800969c:	0758      	lsls	r0, r3, #29
 800969e:	d512      	bpl.n	80096c6 <__swsetup_r+0x7a>
 80096a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096a2:	b141      	cbz	r1, 80096b6 <__swsetup_r+0x6a>
 80096a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096a8:	4299      	cmp	r1, r3
 80096aa:	d002      	beq.n	80096b2 <__swsetup_r+0x66>
 80096ac:	4630      	mov	r0, r6
 80096ae:	f001 fc83 	bl	800afb8 <_free_r>
 80096b2:	2300      	movs	r3, #0
 80096b4:	6363      	str	r3, [r4, #52]	; 0x34
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	2300      	movs	r3, #0
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f043 0308 	orr.w	r3, r3, #8
 80096cc:	81a3      	strh	r3, [r4, #12]
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	b94b      	cbnz	r3, 80096e6 <__swsetup_r+0x9a>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096dc:	d003      	beq.n	80096e6 <__swsetup_r+0x9a>
 80096de:	4621      	mov	r1, r4
 80096e0:	4630      	mov	r0, r6
 80096e2:	f001 f883 	bl	800a7ec <__smakebuf_r>
 80096e6:	89a0      	ldrh	r0, [r4, #12]
 80096e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096ec:	f010 0301 	ands.w	r3, r0, #1
 80096f0:	d00a      	beq.n	8009708 <__swsetup_r+0xbc>
 80096f2:	2300      	movs	r3, #0
 80096f4:	60a3      	str	r3, [r4, #8]
 80096f6:	6963      	ldr	r3, [r4, #20]
 80096f8:	425b      	negs	r3, r3
 80096fa:	61a3      	str	r3, [r4, #24]
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	b943      	cbnz	r3, 8009712 <__swsetup_r+0xc6>
 8009700:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009704:	d1ba      	bne.n	800967c <__swsetup_r+0x30>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	0781      	lsls	r1, r0, #30
 800970a:	bf58      	it	pl
 800970c:	6963      	ldrpl	r3, [r4, #20]
 800970e:	60a3      	str	r3, [r4, #8]
 8009710:	e7f4      	b.n	80096fc <__swsetup_r+0xb0>
 8009712:	2000      	movs	r0, #0
 8009714:	e7f7      	b.n	8009706 <__swsetup_r+0xba>
 8009716:	bf00      	nop
 8009718:	20000024 	.word	0x20000024
 800971c:	0800c478 	.word	0x0800c478
 8009720:	0800c498 	.word	0x0800c498
 8009724:	0800c458 	.word	0x0800c458

08009728 <quorem>:
 8009728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	6903      	ldr	r3, [r0, #16]
 800972e:	690c      	ldr	r4, [r1, #16]
 8009730:	4607      	mov	r7, r0
 8009732:	42a3      	cmp	r3, r4
 8009734:	f2c0 8083 	blt.w	800983e <quorem+0x116>
 8009738:	3c01      	subs	r4, #1
 800973a:	f100 0514 	add.w	r5, r0, #20
 800973e:	f101 0814 	add.w	r8, r1, #20
 8009742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800974c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009750:	3301      	adds	r3, #1
 8009752:	429a      	cmp	r2, r3
 8009754:	fbb2 f6f3 	udiv	r6, r2, r3
 8009758:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800975c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009760:	d332      	bcc.n	80097c8 <quorem+0xa0>
 8009762:	f04f 0e00 	mov.w	lr, #0
 8009766:	4640      	mov	r0, r8
 8009768:	46ac      	mov	ip, r5
 800976a:	46f2      	mov	sl, lr
 800976c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009770:	b293      	uxth	r3, r2
 8009772:	fb06 e303 	mla	r3, r6, r3, lr
 8009776:	0c12      	lsrs	r2, r2, #16
 8009778:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800977c:	fb06 e202 	mla	r2, r6, r2, lr
 8009780:	b29b      	uxth	r3, r3
 8009782:	ebaa 0303 	sub.w	r3, sl, r3
 8009786:	f8dc a000 	ldr.w	sl, [ip]
 800978a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800978e:	fa1f fa8a 	uxth.w	sl, sl
 8009792:	4453      	add	r3, sl
 8009794:	fa1f fa82 	uxth.w	sl, r2
 8009798:	f8dc 2000 	ldr.w	r2, [ip]
 800979c:	4581      	cmp	r9, r0
 800979e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80097a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097b0:	f84c 3b04 	str.w	r3, [ip], #4
 80097b4:	d2da      	bcs.n	800976c <quorem+0x44>
 80097b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80097ba:	b92b      	cbnz	r3, 80097c8 <quorem+0xa0>
 80097bc:	9b01      	ldr	r3, [sp, #4]
 80097be:	3b04      	subs	r3, #4
 80097c0:	429d      	cmp	r5, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	d32f      	bcc.n	8009826 <quorem+0xfe>
 80097c6:	613c      	str	r4, [r7, #16]
 80097c8:	4638      	mov	r0, r7
 80097ca:	f001 fadf 	bl	800ad8c <__mcmp>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	db25      	blt.n	800981e <quorem+0xf6>
 80097d2:	4628      	mov	r0, r5
 80097d4:	f04f 0c00 	mov.w	ip, #0
 80097d8:	3601      	adds	r6, #1
 80097da:	f858 1b04 	ldr.w	r1, [r8], #4
 80097de:	f8d0 e000 	ldr.w	lr, [r0]
 80097e2:	b28b      	uxth	r3, r1
 80097e4:	ebac 0303 	sub.w	r3, ip, r3
 80097e8:	fa1f f28e 	uxth.w	r2, lr
 80097ec:	4413      	add	r3, r2
 80097ee:	0c0a      	lsrs	r2, r1, #16
 80097f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097fe:	45c1      	cmp	r9, r8
 8009800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009804:	f840 3b04 	str.w	r3, [r0], #4
 8009808:	d2e7      	bcs.n	80097da <quorem+0xb2>
 800980a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800980e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009812:	b922      	cbnz	r2, 800981e <quorem+0xf6>
 8009814:	3b04      	subs	r3, #4
 8009816:	429d      	cmp	r5, r3
 8009818:	461a      	mov	r2, r3
 800981a:	d30a      	bcc.n	8009832 <quorem+0x10a>
 800981c:	613c      	str	r4, [r7, #16]
 800981e:	4630      	mov	r0, r6
 8009820:	b003      	add	sp, #12
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	3b04      	subs	r3, #4
 800982a:	2a00      	cmp	r2, #0
 800982c:	d1cb      	bne.n	80097c6 <quorem+0x9e>
 800982e:	3c01      	subs	r4, #1
 8009830:	e7c6      	b.n	80097c0 <quorem+0x98>
 8009832:	6812      	ldr	r2, [r2, #0]
 8009834:	3b04      	subs	r3, #4
 8009836:	2a00      	cmp	r2, #0
 8009838:	d1f0      	bne.n	800981c <quorem+0xf4>
 800983a:	3c01      	subs	r4, #1
 800983c:	e7eb      	b.n	8009816 <quorem+0xee>
 800983e:	2000      	movs	r0, #0
 8009840:	e7ee      	b.n	8009820 <quorem+0xf8>
 8009842:	0000      	movs	r0, r0
 8009844:	0000      	movs	r0, r0
	...

08009848 <_dtoa_r>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	4616      	mov	r6, r2
 800984e:	461f      	mov	r7, r3
 8009850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009852:	b099      	sub	sp, #100	; 0x64
 8009854:	4605      	mov	r5, r0
 8009856:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800985a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800985e:	b974      	cbnz	r4, 800987e <_dtoa_r+0x36>
 8009860:	2010      	movs	r0, #16
 8009862:	f001 f803 	bl	800a86c <malloc>
 8009866:	4602      	mov	r2, r0
 8009868:	6268      	str	r0, [r5, #36]	; 0x24
 800986a:	b920      	cbnz	r0, 8009876 <_dtoa_r+0x2e>
 800986c:	21ea      	movs	r1, #234	; 0xea
 800986e:	4bae      	ldr	r3, [pc, #696]	; (8009b28 <_dtoa_r+0x2e0>)
 8009870:	48ae      	ldr	r0, [pc, #696]	; (8009b2c <_dtoa_r+0x2e4>)
 8009872:	f001 ff61 	bl	800b738 <__assert_func>
 8009876:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800987a:	6004      	str	r4, [r0, #0]
 800987c:	60c4      	str	r4, [r0, #12]
 800987e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	b151      	cbz	r1, 800989a <_dtoa_r+0x52>
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	2301      	movs	r3, #1
 8009888:	4093      	lsls	r3, r2
 800988a:	604a      	str	r2, [r1, #4]
 800988c:	608b      	str	r3, [r1, #8]
 800988e:	4628      	mov	r0, r5
 8009890:	f001 f842 	bl	800a918 <_Bfree>
 8009894:	2200      	movs	r2, #0
 8009896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	1e3b      	subs	r3, r7, #0
 800989c:	bfaf      	iteee	ge
 800989e:	2300      	movge	r3, #0
 80098a0:	2201      	movlt	r2, #1
 80098a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a6:	9305      	strlt	r3, [sp, #20]
 80098a8:	bfa8      	it	ge
 80098aa:	f8c8 3000 	strge.w	r3, [r8]
 80098ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80098b2:	4b9f      	ldr	r3, [pc, #636]	; (8009b30 <_dtoa_r+0x2e8>)
 80098b4:	bfb8      	it	lt
 80098b6:	f8c8 2000 	strlt.w	r2, [r8]
 80098ba:	ea33 0309 	bics.w	r3, r3, r9
 80098be:	d119      	bne.n	80098f4 <_dtoa_r+0xac>
 80098c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098cc:	4333      	orrs	r3, r6
 80098ce:	f000 8580 	beq.w	800a3d2 <_dtoa_r+0xb8a>
 80098d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098d4:	b953      	cbnz	r3, 80098ec <_dtoa_r+0xa4>
 80098d6:	4b97      	ldr	r3, [pc, #604]	; (8009b34 <_dtoa_r+0x2ec>)
 80098d8:	e022      	b.n	8009920 <_dtoa_r+0xd8>
 80098da:	4b97      	ldr	r3, [pc, #604]	; (8009b38 <_dtoa_r+0x2f0>)
 80098dc:	9308      	str	r3, [sp, #32]
 80098de:	3308      	adds	r3, #8
 80098e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	9808      	ldr	r0, [sp, #32]
 80098e6:	b019      	add	sp, #100	; 0x64
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	4b91      	ldr	r3, [pc, #580]	; (8009b34 <_dtoa_r+0x2ec>)
 80098ee:	9308      	str	r3, [sp, #32]
 80098f0:	3303      	adds	r3, #3
 80098f2:	e7f5      	b.n	80098e0 <_dtoa_r+0x98>
 80098f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80098fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	f7f7 f850 	bl	80009a8 <__aeabi_dcmpeq>
 8009908:	4680      	mov	r8, r0
 800990a:	b158      	cbz	r0, 8009924 <_dtoa_r+0xdc>
 800990c:	2301      	movs	r3, #1
 800990e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8559 	beq.w	800a3cc <_dtoa_r+0xb84>
 800991a:	4888      	ldr	r0, [pc, #544]	; (8009b3c <_dtoa_r+0x2f4>)
 800991c:	6018      	str	r0, [r3, #0]
 800991e:	1e43      	subs	r3, r0, #1
 8009920:	9308      	str	r3, [sp, #32]
 8009922:	e7df      	b.n	80098e4 <_dtoa_r+0x9c>
 8009924:	ab16      	add	r3, sp, #88	; 0x58
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	ab17      	add	r3, sp, #92	; 0x5c
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4628      	mov	r0, r5
 800992e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009932:	f001 fad7 	bl	800aee4 <__d2b>
 8009936:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800993a:	4682      	mov	sl, r0
 800993c:	2c00      	cmp	r4, #0
 800993e:	d07e      	beq.n	8009a3e <_dtoa_r+0x1f6>
 8009940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009946:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800994a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800994e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009952:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009956:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800995a:	2200      	movs	r2, #0
 800995c:	4b78      	ldr	r3, [pc, #480]	; (8009b40 <_dtoa_r+0x2f8>)
 800995e:	f7f6 fc03 	bl	8000168 <__aeabi_dsub>
 8009962:	a36b      	add	r3, pc, #428	; (adr r3, 8009b10 <_dtoa_r+0x2c8>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fdb6 	bl	80004d8 <__aeabi_dmul>
 800996c:	a36a      	add	r3, pc, #424	; (adr r3, 8009b18 <_dtoa_r+0x2d0>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fbfb 	bl	800016c <__adddf3>
 8009976:	4606      	mov	r6, r0
 8009978:	4620      	mov	r0, r4
 800997a:	460f      	mov	r7, r1
 800997c:	f7f6 fd42 	bl	8000404 <__aeabi_i2d>
 8009980:	a367      	add	r3, pc, #412	; (adr r3, 8009b20 <_dtoa_r+0x2d8>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fda7 	bl	80004d8 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 fbeb 	bl	800016c <__adddf3>
 8009996:	4606      	mov	r6, r0
 8009998:	460f      	mov	r7, r1
 800999a:	f7f7 f84d 	bl	8000a38 <__aeabi_d2iz>
 800999e:	2200      	movs	r2, #0
 80099a0:	4681      	mov	r9, r0
 80099a2:	2300      	movs	r3, #0
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f7 f808 	bl	80009bc <__aeabi_dcmplt>
 80099ac:	b148      	cbz	r0, 80099c2 <_dtoa_r+0x17a>
 80099ae:	4648      	mov	r0, r9
 80099b0:	f7f6 fd28 	bl	8000404 <__aeabi_i2d>
 80099b4:	4632      	mov	r2, r6
 80099b6:	463b      	mov	r3, r7
 80099b8:	f7f6 fff6 	bl	80009a8 <__aeabi_dcmpeq>
 80099bc:	b908      	cbnz	r0, 80099c2 <_dtoa_r+0x17a>
 80099be:	f109 39ff 	add.w	r9, r9, #4294967295
 80099c2:	f1b9 0f16 	cmp.w	r9, #22
 80099c6:	d857      	bhi.n	8009a78 <_dtoa_r+0x230>
 80099c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099cc:	4b5d      	ldr	r3, [pc, #372]	; (8009b44 <_dtoa_r+0x2fc>)
 80099ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fff1 	bl	80009bc <__aeabi_dcmplt>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d04e      	beq.n	8009a7c <_dtoa_r+0x234>
 80099de:	2300      	movs	r3, #0
 80099e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80099e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099e8:	1b1c      	subs	r4, r3, r4
 80099ea:	1e63      	subs	r3, r4, #1
 80099ec:	9309      	str	r3, [sp, #36]	; 0x24
 80099ee:	bf49      	itett	mi
 80099f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80099f4:	2300      	movpl	r3, #0
 80099f6:	9306      	strmi	r3, [sp, #24]
 80099f8:	2300      	movmi	r3, #0
 80099fa:	bf54      	ite	pl
 80099fc:	9306      	strpl	r3, [sp, #24]
 80099fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	db3c      	blt.n	8009a80 <_dtoa_r+0x238>
 8009a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009a0c:	444b      	add	r3, r9
 8009a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a10:	2300      	movs	r3, #0
 8009a12:	930a      	str	r3, [sp, #40]	; 0x28
 8009a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a16:	2b09      	cmp	r3, #9
 8009a18:	d86c      	bhi.n	8009af4 <_dtoa_r+0x2ac>
 8009a1a:	2b05      	cmp	r3, #5
 8009a1c:	bfc4      	itt	gt
 8009a1e:	3b04      	subgt	r3, #4
 8009a20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009a22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a24:	bfc8      	it	gt
 8009a26:	2400      	movgt	r4, #0
 8009a28:	f1a3 0302 	sub.w	r3, r3, #2
 8009a2c:	bfd8      	it	le
 8009a2e:	2401      	movle	r4, #1
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	f200 808b 	bhi.w	8009b4c <_dtoa_r+0x304>
 8009a36:	e8df f003 	tbb	[pc, r3]
 8009a3a:	4f2d      	.short	0x4f2d
 8009a3c:	5b4d      	.short	0x5b4d
 8009a3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009a42:	441c      	add	r4, r3
 8009a44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009a48:	2b20      	cmp	r3, #32
 8009a4a:	bfc3      	ittte	gt
 8009a4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009a54:	fa09 f303 	lslgt.w	r3, r9, r3
 8009a58:	f1c3 0320 	rsble	r3, r3, #32
 8009a5c:	bfc6      	itte	gt
 8009a5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a62:	4318      	orrgt	r0, r3
 8009a64:	fa06 f003 	lslle.w	r0, r6, r3
 8009a68:	f7f6 fcbc 	bl	80003e4 <__aeabi_ui2d>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a72:	3c01      	subs	r4, #1
 8009a74:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a76:	e770      	b.n	800995a <_dtoa_r+0x112>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e7b3      	b.n	80099e4 <_dtoa_r+0x19c>
 8009a7c:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a7e:	e7b2      	b.n	80099e6 <_dtoa_r+0x19e>
 8009a80:	9b06      	ldr	r3, [sp, #24]
 8009a82:	eba3 0309 	sub.w	r3, r3, r9
 8009a86:	9306      	str	r3, [sp, #24]
 8009a88:	f1c9 0300 	rsb	r3, r9, #0
 8009a8c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a8e:	2300      	movs	r3, #0
 8009a90:	930e      	str	r3, [sp, #56]	; 0x38
 8009a92:	e7bf      	b.n	8009a14 <_dtoa_r+0x1cc>
 8009a94:	2300      	movs	r3, #0
 8009a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	dc59      	bgt.n	8009b52 <_dtoa_r+0x30a>
 8009a9e:	f04f 0b01 	mov.w	fp, #1
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	f8cd b008 	str.w	fp, [sp, #8]
 8009aa8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009aac:	2200      	movs	r2, #0
 8009aae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009ab0:	6042      	str	r2, [r0, #4]
 8009ab2:	2204      	movs	r2, #4
 8009ab4:	f102 0614 	add.w	r6, r2, #20
 8009ab8:	429e      	cmp	r6, r3
 8009aba:	6841      	ldr	r1, [r0, #4]
 8009abc:	d94f      	bls.n	8009b5e <_dtoa_r+0x316>
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 feea 	bl	800a898 <_Balloc>
 8009ac4:	9008      	str	r0, [sp, #32]
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d14d      	bne.n	8009b66 <_dtoa_r+0x31e>
 8009aca:	4602      	mov	r2, r0
 8009acc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ad0:	4b1d      	ldr	r3, [pc, #116]	; (8009b48 <_dtoa_r+0x300>)
 8009ad2:	e6cd      	b.n	8009870 <_dtoa_r+0x28>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e7de      	b.n	8009a96 <_dtoa_r+0x24e>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8009adc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ade:	eb09 0b03 	add.w	fp, r9, r3
 8009ae2:	f10b 0301 	add.w	r3, fp, #1
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	bfb8      	it	lt
 8009aec:	2301      	movlt	r3, #1
 8009aee:	e7dd      	b.n	8009aac <_dtoa_r+0x264>
 8009af0:	2301      	movs	r3, #1
 8009af2:	e7f2      	b.n	8009ada <_dtoa_r+0x292>
 8009af4:	2401      	movs	r4, #1
 8009af6:	2300      	movs	r3, #0
 8009af8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009afa:	9322      	str	r3, [sp, #136]	; 0x88
 8009afc:	f04f 3bff 	mov.w	fp, #4294967295
 8009b00:	2200      	movs	r2, #0
 8009b02:	2312      	movs	r3, #18
 8009b04:	f8cd b008 	str.w	fp, [sp, #8]
 8009b08:	9223      	str	r2, [sp, #140]	; 0x8c
 8009b0a:	e7cf      	b.n	8009aac <_dtoa_r+0x264>
 8009b0c:	f3af 8000 	nop.w
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	0800c3d1 	.word	0x0800c3d1
 8009b2c:	0800c3e8 	.word	0x0800c3e8
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	0800c3cd 	.word	0x0800c3cd
 8009b38:	0800c3c4 	.word	0x0800c3c4
 8009b3c:	0800c3a1 	.word	0x0800c3a1
 8009b40:	3ff80000 	.word	0x3ff80000
 8009b44:	0800c540 	.word	0x0800c540
 8009b48:	0800c447 	.word	0x0800c447
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b50:	e7d4      	b.n	8009afc <_dtoa_r+0x2b4>
 8009b52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8009b56:	465b      	mov	r3, fp
 8009b58:	f8cd b008 	str.w	fp, [sp, #8]
 8009b5c:	e7a6      	b.n	8009aac <_dtoa_r+0x264>
 8009b5e:	3101      	adds	r1, #1
 8009b60:	6041      	str	r1, [r0, #4]
 8009b62:	0052      	lsls	r2, r2, #1
 8009b64:	e7a6      	b.n	8009ab4 <_dtoa_r+0x26c>
 8009b66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b68:	9a08      	ldr	r2, [sp, #32]
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	2b0e      	cmp	r3, #14
 8009b70:	f200 80a8 	bhi.w	8009cc4 <_dtoa_r+0x47c>
 8009b74:	2c00      	cmp	r4, #0
 8009b76:	f000 80a5 	beq.w	8009cc4 <_dtoa_r+0x47c>
 8009b7a:	f1b9 0f00 	cmp.w	r9, #0
 8009b7e:	dd34      	ble.n	8009bea <_dtoa_r+0x3a2>
 8009b80:	4a9a      	ldr	r2, [pc, #616]	; (8009dec <_dtoa_r+0x5a4>)
 8009b82:	f009 030f 	and.w	r3, r9, #15
 8009b86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b8a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009b8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b96:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009b9a:	d016      	beq.n	8009bca <_dtoa_r+0x382>
 8009b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ba0:	4b93      	ldr	r3, [pc, #588]	; (8009df0 <_dtoa_r+0x5a8>)
 8009ba2:	2703      	movs	r7, #3
 8009ba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ba8:	f7f6 fdc0 	bl	800072c <__aeabi_ddiv>
 8009bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bb0:	f004 040f 	and.w	r4, r4, #15
 8009bb4:	4e8e      	ldr	r6, [pc, #568]	; (8009df0 <_dtoa_r+0x5a8>)
 8009bb6:	b954      	cbnz	r4, 8009bce <_dtoa_r+0x386>
 8009bb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bc0:	f7f6 fdb4 	bl	800072c <__aeabi_ddiv>
 8009bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bc8:	e029      	b.n	8009c1e <_dtoa_r+0x3d6>
 8009bca:	2702      	movs	r7, #2
 8009bcc:	e7f2      	b.n	8009bb4 <_dtoa_r+0x36c>
 8009bce:	07e1      	lsls	r1, r4, #31
 8009bd0:	d508      	bpl.n	8009be4 <_dtoa_r+0x39c>
 8009bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bda:	f7f6 fc7d 	bl	80004d8 <__aeabi_dmul>
 8009bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009be2:	3701      	adds	r7, #1
 8009be4:	1064      	asrs	r4, r4, #1
 8009be6:	3608      	adds	r6, #8
 8009be8:	e7e5      	b.n	8009bb6 <_dtoa_r+0x36e>
 8009bea:	f000 80a5 	beq.w	8009d38 <_dtoa_r+0x4f0>
 8009bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bf2:	f1c9 0400 	rsb	r4, r9, #0
 8009bf6:	4b7d      	ldr	r3, [pc, #500]	; (8009dec <_dtoa_r+0x5a4>)
 8009bf8:	f004 020f 	and.w	r2, r4, #15
 8009bfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 fc68 	bl	80004d8 <__aeabi_dmul>
 8009c08:	2702      	movs	r7, #2
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c10:	4e77      	ldr	r6, [pc, #476]	; (8009df0 <_dtoa_r+0x5a8>)
 8009c12:	1124      	asrs	r4, r4, #4
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	f040 8084 	bne.w	8009d22 <_dtoa_r+0x4da>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d2      	bne.n	8009bc4 <_dtoa_r+0x37c>
 8009c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 808b 	beq.w	8009d3c <_dtoa_r+0x4f4>
 8009c26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009c2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c32:	2200      	movs	r2, #0
 8009c34:	4b6f      	ldr	r3, [pc, #444]	; (8009df4 <_dtoa_r+0x5ac>)
 8009c36:	f7f6 fec1 	bl	80009bc <__aeabi_dcmplt>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d07e      	beq.n	8009d3c <_dtoa_r+0x4f4>
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d07b      	beq.n	8009d3c <_dtoa_r+0x4f4>
 8009c44:	f1bb 0f00 	cmp.w	fp, #0
 8009c48:	dd38      	ble.n	8009cbc <_dtoa_r+0x474>
 8009c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4b69      	ldr	r3, [pc, #420]	; (8009df8 <_dtoa_r+0x5b0>)
 8009c52:	f7f6 fc41 	bl	80004d8 <__aeabi_dmul>
 8009c56:	465c      	mov	r4, fp
 8009c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5c:	f109 38ff 	add.w	r8, r9, #4294967295
 8009c60:	3701      	adds	r7, #1
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7f6 fbce 	bl	8000404 <__aeabi_i2d>
 8009c68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c6c:	f7f6 fc34 	bl	80004d8 <__aeabi_dmul>
 8009c70:	2200      	movs	r2, #0
 8009c72:	4b62      	ldr	r3, [pc, #392]	; (8009dfc <_dtoa_r+0x5b4>)
 8009c74:	f7f6 fa7a 	bl	800016c <__adddf3>
 8009c78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c80:	9611      	str	r6, [sp, #68]	; 0x44
 8009c82:	2c00      	cmp	r4, #0
 8009c84:	d15d      	bne.n	8009d42 <_dtoa_r+0x4fa>
 8009c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	4b5c      	ldr	r3, [pc, #368]	; (8009e00 <_dtoa_r+0x5b8>)
 8009c8e:	f7f6 fa6b 	bl	8000168 <__aeabi_dsub>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c9a:	4633      	mov	r3, r6
 8009c9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c9e:	f7f6 feab 	bl	80009f8 <__aeabi_dcmpgt>
 8009ca2:	2800      	cmp	r0, #0
 8009ca4:	f040 829e 	bne.w	800a1e4 <_dtoa_r+0x99c>
 8009ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009cae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009cb2:	f7f6 fe83 	bl	80009bc <__aeabi_dcmplt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f040 8292 	bne.w	800a1e0 <_dtoa_r+0x998>
 8009cbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009cc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f2c0 8153 	blt.w	8009f72 <_dtoa_r+0x72a>
 8009ccc:	f1b9 0f0e 	cmp.w	r9, #14
 8009cd0:	f300 814f 	bgt.w	8009f72 <_dtoa_r+0x72a>
 8009cd4:	4b45      	ldr	r3, [pc, #276]	; (8009dec <_dtoa_r+0x5a4>)
 8009cd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009cda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009ce2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f280 80db 	bge.w	8009ea0 <_dtoa_r+0x658>
 8009cea:	9b02      	ldr	r3, [sp, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f300 80d7 	bgt.w	8009ea0 <_dtoa_r+0x658>
 8009cf2:	f040 8274 	bne.w	800a1de <_dtoa_r+0x996>
 8009cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b40      	ldr	r3, [pc, #256]	; (8009e00 <_dtoa_r+0x5b8>)
 8009cfe:	f7f6 fbeb 	bl	80004d8 <__aeabi_dmul>
 8009d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d06:	f7f6 fe6d 	bl	80009e4 <__aeabi_dcmpge>
 8009d0a:	9c02      	ldr	r4, [sp, #8]
 8009d0c:	4626      	mov	r6, r4
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f040 824a 	bne.w	800a1a8 <_dtoa_r+0x960>
 8009d14:	2331      	movs	r3, #49	; 0x31
 8009d16:	9f08      	ldr	r7, [sp, #32]
 8009d18:	f109 0901 	add.w	r9, r9, #1
 8009d1c:	f807 3b01 	strb.w	r3, [r7], #1
 8009d20:	e246      	b.n	800a1b0 <_dtoa_r+0x968>
 8009d22:	07e2      	lsls	r2, r4, #31
 8009d24:	d505      	bpl.n	8009d32 <_dtoa_r+0x4ea>
 8009d26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d2a:	f7f6 fbd5 	bl	80004d8 <__aeabi_dmul>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	3701      	adds	r7, #1
 8009d32:	1064      	asrs	r4, r4, #1
 8009d34:	3608      	adds	r6, #8
 8009d36:	e76d      	b.n	8009c14 <_dtoa_r+0x3cc>
 8009d38:	2702      	movs	r7, #2
 8009d3a:	e770      	b.n	8009c1e <_dtoa_r+0x3d6>
 8009d3c:	46c8      	mov	r8, r9
 8009d3e:	9c02      	ldr	r4, [sp, #8]
 8009d40:	e78f      	b.n	8009c62 <_dtoa_r+0x41a>
 8009d42:	9908      	ldr	r1, [sp, #32]
 8009d44:	4b29      	ldr	r3, [pc, #164]	; (8009dec <_dtoa_r+0x5a4>)
 8009d46:	4421      	add	r1, r4
 8009d48:	9112      	str	r1, [sp, #72]	; 0x48
 8009d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	d055      	beq.n	8009e08 <_dtoa_r+0x5c0>
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	4929      	ldr	r1, [pc, #164]	; (8009e04 <_dtoa_r+0x5bc>)
 8009d60:	f7f6 fce4 	bl	800072c <__aeabi_ddiv>
 8009d64:	463b      	mov	r3, r7
 8009d66:	4632      	mov	r2, r6
 8009d68:	f7f6 f9fe 	bl	8000168 <__aeabi_dsub>
 8009d6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d70:	9f08      	ldr	r7, [sp, #32]
 8009d72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d76:	f7f6 fe5f 	bl	8000a38 <__aeabi_d2iz>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	f7f6 fb42 	bl	8000404 <__aeabi_i2d>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d88:	f7f6 f9ee 	bl	8000168 <__aeabi_dsub>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	3430      	adds	r4, #48	; 0x30
 8009d92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d9a:	f807 4b01 	strb.w	r4, [r7], #1
 8009d9e:	f7f6 fe0d 	bl	80009bc <__aeabi_dcmplt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d174      	bne.n	8009e90 <_dtoa_r+0x648>
 8009da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009daa:	2000      	movs	r0, #0
 8009dac:	4911      	ldr	r1, [pc, #68]	; (8009df4 <_dtoa_r+0x5ac>)
 8009dae:	f7f6 f9db 	bl	8000168 <__aeabi_dsub>
 8009db2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009db6:	f7f6 fe01 	bl	80009bc <__aeabi_dcmplt>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f040 80b6 	bne.w	8009f2c <_dtoa_r+0x6e4>
 8009dc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dc2:	429f      	cmp	r7, r3
 8009dc4:	f43f af7a 	beq.w	8009cbc <_dtoa_r+0x474>
 8009dc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dcc:	2200      	movs	r2, #0
 8009dce:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <_dtoa_r+0x5b0>)
 8009dd0:	f7f6 fb82 	bl	80004d8 <__aeabi_dmul>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <_dtoa_r+0x5b0>)
 8009de0:	f7f6 fb7a 	bl	80004d8 <__aeabi_dmul>
 8009de4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009de8:	e7c3      	b.n	8009d72 <_dtoa_r+0x52a>
 8009dea:	bf00      	nop
 8009dec:	0800c540 	.word	0x0800c540
 8009df0:	0800c518 	.word	0x0800c518
 8009df4:	3ff00000 	.word	0x3ff00000
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	401c0000 	.word	0x401c0000
 8009e00:	40140000 	.word	0x40140000
 8009e04:	3fe00000 	.word	0x3fe00000
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fb64 	bl	80004d8 <__aeabi_dmul>
 8009e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e16:	9c08      	ldr	r4, [sp, #32]
 8009e18:	9314      	str	r3, [sp, #80]	; 0x50
 8009e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e1e:	f7f6 fe0b 	bl	8000a38 <__aeabi_d2iz>
 8009e22:	9015      	str	r0, [sp, #84]	; 0x54
 8009e24:	f7f6 faee 	bl	8000404 <__aeabi_i2d>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e30:	f7f6 f99a 	bl	8000168 <__aeabi_dsub>
 8009e34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e36:	4606      	mov	r6, r0
 8009e38:	3330      	adds	r3, #48	; 0x30
 8009e3a:	f804 3b01 	strb.w	r3, [r4], #1
 8009e3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e40:	460f      	mov	r7, r1
 8009e42:	429c      	cmp	r4, r3
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	d124      	bne.n	8009e94 <_dtoa_r+0x64c>
 8009e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e4e:	4bb3      	ldr	r3, [pc, #716]	; (800a11c <_dtoa_r+0x8d4>)
 8009e50:	f7f6 f98c 	bl	800016c <__adddf3>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d162      	bne.n	8009f2a <_dtoa_r+0x6e2>
 8009e64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e68:	2000      	movs	r0, #0
 8009e6a:	49ac      	ldr	r1, [pc, #688]	; (800a11c <_dtoa_r+0x8d4>)
 8009e6c:	f7f6 f97c 	bl	8000168 <__aeabi_dsub>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4630      	mov	r0, r6
 8009e76:	4639      	mov	r1, r7
 8009e78:	f7f6 fda0 	bl	80009bc <__aeabi_dcmplt>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f43f af1d 	beq.w	8009cbc <_dtoa_r+0x474>
 8009e82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e84:	1e7b      	subs	r3, r7, #1
 8009e86:	9314      	str	r3, [sp, #80]	; 0x50
 8009e88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e8c:	2b30      	cmp	r3, #48	; 0x30
 8009e8e:	d0f8      	beq.n	8009e82 <_dtoa_r+0x63a>
 8009e90:	46c1      	mov	r9, r8
 8009e92:	e03a      	b.n	8009f0a <_dtoa_r+0x6c2>
 8009e94:	4ba2      	ldr	r3, [pc, #648]	; (800a120 <_dtoa_r+0x8d8>)
 8009e96:	f7f6 fb1f 	bl	80004d8 <__aeabi_dmul>
 8009e9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e9e:	e7bc      	b.n	8009e1a <_dtoa_r+0x5d2>
 8009ea0:	9f08      	ldr	r7, [sp, #32]
 8009ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eaa:	f7f6 fc3f 	bl	800072c <__aeabi_ddiv>
 8009eae:	f7f6 fdc3 	bl	8000a38 <__aeabi_d2iz>
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	f7f6 faa6 	bl	8000404 <__aeabi_i2d>
 8009eb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ebc:	f7f6 fb0c 	bl	80004d8 <__aeabi_dmul>
 8009ec0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ecc:	f7f6 f94c 	bl	8000168 <__aeabi_dsub>
 8009ed0:	f807 6b01 	strb.w	r6, [r7], #1
 8009ed4:	9e08      	ldr	r6, [sp, #32]
 8009ed6:	9b02      	ldr	r3, [sp, #8]
 8009ed8:	1bbe      	subs	r6, r7, r6
 8009eda:	42b3      	cmp	r3, r6
 8009edc:	d13a      	bne.n	8009f54 <_dtoa_r+0x70c>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	f7f6 f943 	bl	800016c <__adddf3>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009eee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ef2:	f7f6 fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8009ef6:	bb58      	cbnz	r0, 8009f50 <_dtoa_r+0x708>
 8009ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f00:	f7f6 fd52 	bl	80009a8 <__aeabi_dcmpeq>
 8009f04:	b108      	cbz	r0, 8009f0a <_dtoa_r+0x6c2>
 8009f06:	07e1      	lsls	r1, r4, #31
 8009f08:	d422      	bmi.n	8009f50 <_dtoa_r+0x708>
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	4651      	mov	r1, sl
 8009f0e:	f000 fd03 	bl	800a918 <_Bfree>
 8009f12:	2300      	movs	r3, #0
 8009f14:	703b      	strb	r3, [r7, #0]
 8009f16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f18:	f109 0001 	add.w	r0, r9, #1
 8009f1c:	6018      	str	r0, [r3, #0]
 8009f1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f43f acdf 	beq.w	80098e4 <_dtoa_r+0x9c>
 8009f26:	601f      	str	r7, [r3, #0]
 8009f28:	e4dc      	b.n	80098e4 <_dtoa_r+0x9c>
 8009f2a:	4627      	mov	r7, r4
 8009f2c:	463b      	mov	r3, r7
 8009f2e:	461f      	mov	r7, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a39      	cmp	r2, #57	; 0x39
 8009f36:	d107      	bne.n	8009f48 <_dtoa_r+0x700>
 8009f38:	9a08      	ldr	r2, [sp, #32]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d1f7      	bne.n	8009f2e <_dtoa_r+0x6e6>
 8009f3e:	2230      	movs	r2, #48	; 0x30
 8009f40:	9908      	ldr	r1, [sp, #32]
 8009f42:	f108 0801 	add.w	r8, r8, #1
 8009f46:	700a      	strb	r2, [r1, #0]
 8009f48:	781a      	ldrb	r2, [r3, #0]
 8009f4a:	3201      	adds	r2, #1
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	e79f      	b.n	8009e90 <_dtoa_r+0x648>
 8009f50:	46c8      	mov	r8, r9
 8009f52:	e7eb      	b.n	8009f2c <_dtoa_r+0x6e4>
 8009f54:	2200      	movs	r2, #0
 8009f56:	4b72      	ldr	r3, [pc, #456]	; (800a120 <_dtoa_r+0x8d8>)
 8009f58:	f7f6 fabe 	bl	80004d8 <__aeabi_dmul>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f64:	2200      	movs	r2, #0
 8009f66:	2300      	movs	r3, #0
 8009f68:	f7f6 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d098      	beq.n	8009ea2 <_dtoa_r+0x65a>
 8009f70:	e7cb      	b.n	8009f0a <_dtoa_r+0x6c2>
 8009f72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	f000 80cd 	beq.w	800a114 <_dtoa_r+0x8cc>
 8009f7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f7c:	2a01      	cmp	r2, #1
 8009f7e:	f300 80af 	bgt.w	800a0e0 <_dtoa_r+0x898>
 8009f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	f000 80a7 	beq.w	800a0d8 <_dtoa_r+0x890>
 8009f8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f90:	9f06      	ldr	r7, [sp, #24]
 8009f92:	9a06      	ldr	r2, [sp, #24]
 8009f94:	2101      	movs	r1, #1
 8009f96:	441a      	add	r2, r3
 8009f98:	9206      	str	r2, [sp, #24]
 8009f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	441a      	add	r2, r3
 8009fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa2:	f000 fd73 	bl	800aa8c <__i2b>
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	2f00      	cmp	r7, #0
 8009faa:	dd0c      	ble.n	8009fc6 <_dtoa_r+0x77e>
 8009fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	dd09      	ble.n	8009fc6 <_dtoa_r+0x77e>
 8009fb2:	42bb      	cmp	r3, r7
 8009fb4:	bfa8      	it	ge
 8009fb6:	463b      	movge	r3, r7
 8009fb8:	9a06      	ldr	r2, [sp, #24]
 8009fba:	1aff      	subs	r7, r7, r3
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	9206      	str	r2, [sp, #24]
 8009fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc8:	b1f3      	cbz	r3, 800a008 <_dtoa_r+0x7c0>
 8009fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80a9 	beq.w	800a124 <_dtoa_r+0x8dc>
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	dd10      	ble.n	8009ff8 <_dtoa_r+0x7b0>
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4622      	mov	r2, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fe10 	bl	800ac00 <__pow5mult>
 8009fe0:	4652      	mov	r2, sl
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f000 fd66 	bl	800aab8 <__multiply>
 8009fec:	4680      	mov	r8, r0
 8009fee:	4651      	mov	r1, sl
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 fc91 	bl	800a918 <_Bfree>
 8009ff6:	46c2      	mov	sl, r8
 8009ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffa:	1b1a      	subs	r2, r3, r4
 8009ffc:	d004      	beq.n	800a008 <_dtoa_r+0x7c0>
 8009ffe:	4651      	mov	r1, sl
 800a000:	4628      	mov	r0, r5
 800a002:	f000 fdfd 	bl	800ac00 <__pow5mult>
 800a006:	4682      	mov	sl, r0
 800a008:	2101      	movs	r1, #1
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 fd3e 	bl	800aa8c <__i2b>
 800a010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a012:	4604      	mov	r4, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	f340 8087 	ble.w	800a128 <_dtoa_r+0x8e0>
 800a01a:	461a      	mov	r2, r3
 800a01c:	4601      	mov	r1, r0
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 fdee 	bl	800ac00 <__pow5mult>
 800a024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a026:	4604      	mov	r4, r0
 800a028:	2b01      	cmp	r3, #1
 800a02a:	f340 8080 	ble.w	800a12e <_dtoa_r+0x8e6>
 800a02e:	f04f 0800 	mov.w	r8, #0
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a038:	6918      	ldr	r0, [r3, #16]
 800a03a:	f000 fcd9 	bl	800a9f0 <__hi0bits>
 800a03e:	f1c0 0020 	rsb	r0, r0, #32
 800a042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a044:	4418      	add	r0, r3
 800a046:	f010 001f 	ands.w	r0, r0, #31
 800a04a:	f000 8092 	beq.w	800a172 <_dtoa_r+0x92a>
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	2b04      	cmp	r3, #4
 800a054:	f340 808a 	ble.w	800a16c <_dtoa_r+0x924>
 800a058:	f1c0 001c 	rsb	r0, r0, #28
 800a05c:	9b06      	ldr	r3, [sp, #24]
 800a05e:	4407      	add	r7, r0
 800a060:	4403      	add	r3, r0
 800a062:	9306      	str	r3, [sp, #24]
 800a064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a066:	4403      	add	r3, r0
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	9b06      	ldr	r3, [sp, #24]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	dd05      	ble.n	800a07c <_dtoa_r+0x834>
 800a070:	4651      	mov	r1, sl
 800a072:	461a      	mov	r2, r3
 800a074:	4628      	mov	r0, r5
 800a076:	f000 fe1d 	bl	800acb4 <__lshift>
 800a07a:	4682      	mov	sl, r0
 800a07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dd05      	ble.n	800a08e <_dtoa_r+0x846>
 800a082:	4621      	mov	r1, r4
 800a084:	461a      	mov	r2, r3
 800a086:	4628      	mov	r0, r5
 800a088:	f000 fe14 	bl	800acb4 <__lshift>
 800a08c:	4604      	mov	r4, r0
 800a08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d070      	beq.n	800a176 <_dtoa_r+0x92e>
 800a094:	4621      	mov	r1, r4
 800a096:	4650      	mov	r0, sl
 800a098:	f000 fe78 	bl	800ad8c <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	da6a      	bge.n	800a176 <_dtoa_r+0x92e>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4651      	mov	r1, sl
 800a0a4:	220a      	movs	r2, #10
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 fc58 	bl	800a95c <__multadd>
 800a0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 8193 	beq.w	800a3e0 <_dtoa_r+0xb98>
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	2300      	movs	r3, #0
 800a0be:	220a      	movs	r2, #10
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f000 fc4b 	bl	800a95c <__multadd>
 800a0c6:	f1bb 0f00 	cmp.w	fp, #0
 800a0ca:	4606      	mov	r6, r0
 800a0cc:	f300 8093 	bgt.w	800a1f6 <_dtoa_r+0x9ae>
 800a0d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	dc57      	bgt.n	800a186 <_dtoa_r+0x93e>
 800a0d6:	e08e      	b.n	800a1f6 <_dtoa_r+0x9ae>
 800a0d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0de:	e756      	b.n	8009f8e <_dtoa_r+0x746>
 800a0e0:	9b02      	ldr	r3, [sp, #8]
 800a0e2:	1e5c      	subs	r4, r3, #1
 800a0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	bfb7      	itett	lt
 800a0ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0ec:	1b1c      	subge	r4, r3, r4
 800a0ee:	1ae2      	sublt	r2, r4, r3
 800a0f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a0f2:	bfbe      	ittt	lt
 800a0f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a0f6:	189b      	addlt	r3, r3, r2
 800a0f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a0fa:	9b02      	ldr	r3, [sp, #8]
 800a0fc:	bfb8      	it	lt
 800a0fe:	2400      	movlt	r4, #0
 800a100:	2b00      	cmp	r3, #0
 800a102:	bfbb      	ittet	lt
 800a104:	9b06      	ldrlt	r3, [sp, #24]
 800a106:	9a02      	ldrlt	r2, [sp, #8]
 800a108:	9f06      	ldrge	r7, [sp, #24]
 800a10a:	1a9f      	sublt	r7, r3, r2
 800a10c:	bfac      	ite	ge
 800a10e:	9b02      	ldrge	r3, [sp, #8]
 800a110:	2300      	movlt	r3, #0
 800a112:	e73e      	b.n	8009f92 <_dtoa_r+0x74a>
 800a114:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a116:	9f06      	ldr	r7, [sp, #24]
 800a118:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a11a:	e745      	b.n	8009fa8 <_dtoa_r+0x760>
 800a11c:	3fe00000 	.word	0x3fe00000
 800a120:	40240000 	.word	0x40240000
 800a124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a126:	e76a      	b.n	8009ffe <_dtoa_r+0x7b6>
 800a128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	dc19      	bgt.n	800a162 <_dtoa_r+0x91a>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	b9bb      	cbnz	r3, 800a162 <_dtoa_r+0x91a>
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a138:	b99b      	cbnz	r3, 800a162 <_dtoa_r+0x91a>
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a140:	0d1b      	lsrs	r3, r3, #20
 800a142:	051b      	lsls	r3, r3, #20
 800a144:	b183      	cbz	r3, 800a168 <_dtoa_r+0x920>
 800a146:	f04f 0801 	mov.w	r8, #1
 800a14a:	9b06      	ldr	r3, [sp, #24]
 800a14c:	3301      	adds	r3, #1
 800a14e:	9306      	str	r3, [sp, #24]
 800a150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a152:	3301      	adds	r3, #1
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f47f af6a 	bne.w	800a032 <_dtoa_r+0x7ea>
 800a15e:	2001      	movs	r0, #1
 800a160:	e76f      	b.n	800a042 <_dtoa_r+0x7fa>
 800a162:	f04f 0800 	mov.w	r8, #0
 800a166:	e7f6      	b.n	800a156 <_dtoa_r+0x90e>
 800a168:	4698      	mov	r8, r3
 800a16a:	e7f4      	b.n	800a156 <_dtoa_r+0x90e>
 800a16c:	f43f af7d 	beq.w	800a06a <_dtoa_r+0x822>
 800a170:	4618      	mov	r0, r3
 800a172:	301c      	adds	r0, #28
 800a174:	e772      	b.n	800a05c <_dtoa_r+0x814>
 800a176:	9b02      	ldr	r3, [sp, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dc36      	bgt.n	800a1ea <_dtoa_r+0x9a2>
 800a17c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a17e:	2b02      	cmp	r3, #2
 800a180:	dd33      	ble.n	800a1ea <_dtoa_r+0x9a2>
 800a182:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a186:	f1bb 0f00 	cmp.w	fp, #0
 800a18a:	d10d      	bne.n	800a1a8 <_dtoa_r+0x960>
 800a18c:	4621      	mov	r1, r4
 800a18e:	465b      	mov	r3, fp
 800a190:	2205      	movs	r2, #5
 800a192:	4628      	mov	r0, r5
 800a194:	f000 fbe2 	bl	800a95c <__multadd>
 800a198:	4601      	mov	r1, r0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4650      	mov	r0, sl
 800a19e:	f000 fdf5 	bl	800ad8c <__mcmp>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f73f adb6 	bgt.w	8009d14 <_dtoa_r+0x4cc>
 800a1a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1aa:	9f08      	ldr	r7, [sp, #32]
 800a1ac:	ea6f 0903 	mvn.w	r9, r3
 800a1b0:	f04f 0800 	mov.w	r8, #0
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f000 fbae 	bl	800a918 <_Bfree>
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	f43f aea4 	beq.w	8009f0a <_dtoa_r+0x6c2>
 800a1c2:	f1b8 0f00 	cmp.w	r8, #0
 800a1c6:	d005      	beq.n	800a1d4 <_dtoa_r+0x98c>
 800a1c8:	45b0      	cmp	r8, r6
 800a1ca:	d003      	beq.n	800a1d4 <_dtoa_r+0x98c>
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	f000 fba2 	bl	800a918 <_Bfree>
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	f000 fb9e 	bl	800a918 <_Bfree>
 800a1dc:	e695      	b.n	8009f0a <_dtoa_r+0x6c2>
 800a1de:	2400      	movs	r4, #0
 800a1e0:	4626      	mov	r6, r4
 800a1e2:	e7e1      	b.n	800a1a8 <_dtoa_r+0x960>
 800a1e4:	46c1      	mov	r9, r8
 800a1e6:	4626      	mov	r6, r4
 800a1e8:	e594      	b.n	8009d14 <_dtoa_r+0x4cc>
 800a1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80fc 	beq.w	800a3ee <_dtoa_r+0xba6>
 800a1f6:	2f00      	cmp	r7, #0
 800a1f8:	dd05      	ble.n	800a206 <_dtoa_r+0x9be>
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	463a      	mov	r2, r7
 800a1fe:	4628      	mov	r0, r5
 800a200:	f000 fd58 	bl	800acb4 <__lshift>
 800a204:	4606      	mov	r6, r0
 800a206:	f1b8 0f00 	cmp.w	r8, #0
 800a20a:	d05c      	beq.n	800a2c6 <_dtoa_r+0xa7e>
 800a20c:	4628      	mov	r0, r5
 800a20e:	6871      	ldr	r1, [r6, #4]
 800a210:	f000 fb42 	bl	800a898 <_Balloc>
 800a214:	4607      	mov	r7, r0
 800a216:	b928      	cbnz	r0, 800a224 <_dtoa_r+0x9dc>
 800a218:	4602      	mov	r2, r0
 800a21a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a21e:	4b7e      	ldr	r3, [pc, #504]	; (800a418 <_dtoa_r+0xbd0>)
 800a220:	f7ff bb26 	b.w	8009870 <_dtoa_r+0x28>
 800a224:	6932      	ldr	r2, [r6, #16]
 800a226:	f106 010c 	add.w	r1, r6, #12
 800a22a:	3202      	adds	r2, #2
 800a22c:	0092      	lsls	r2, r2, #2
 800a22e:	300c      	adds	r0, #12
 800a230:	f7fe fc7c 	bl	8008b2c <memcpy>
 800a234:	2201      	movs	r2, #1
 800a236:	4639      	mov	r1, r7
 800a238:	4628      	mov	r0, r5
 800a23a:	f000 fd3b 	bl	800acb4 <__lshift>
 800a23e:	46b0      	mov	r8, r6
 800a240:	4606      	mov	r6, r0
 800a242:	9b08      	ldr	r3, [sp, #32]
 800a244:	3301      	adds	r3, #1
 800a246:	9302      	str	r3, [sp, #8]
 800a248:	9b08      	ldr	r3, [sp, #32]
 800a24a:	445b      	add	r3, fp
 800a24c:	930a      	str	r3, [sp, #40]	; 0x28
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	9309      	str	r3, [sp, #36]	; 0x24
 800a256:	9b02      	ldr	r3, [sp, #8]
 800a258:	4621      	mov	r1, r4
 800a25a:	4650      	mov	r0, sl
 800a25c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a260:	f7ff fa62 	bl	8009728 <quorem>
 800a264:	4603      	mov	r3, r0
 800a266:	4641      	mov	r1, r8
 800a268:	3330      	adds	r3, #48	; 0x30
 800a26a:	9004      	str	r0, [sp, #16]
 800a26c:	4650      	mov	r0, sl
 800a26e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a270:	f000 fd8c 	bl	800ad8c <__mcmp>
 800a274:	4632      	mov	r2, r6
 800a276:	9006      	str	r0, [sp, #24]
 800a278:	4621      	mov	r1, r4
 800a27a:	4628      	mov	r0, r5
 800a27c:	f000 fda2 	bl	800adc4 <__mdiff>
 800a280:	68c2      	ldr	r2, [r0, #12]
 800a282:	4607      	mov	r7, r0
 800a284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a286:	bb02      	cbnz	r2, 800a2ca <_dtoa_r+0xa82>
 800a288:	4601      	mov	r1, r0
 800a28a:	4650      	mov	r0, sl
 800a28c:	f000 fd7e 	bl	800ad8c <__mcmp>
 800a290:	4602      	mov	r2, r0
 800a292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a294:	4639      	mov	r1, r7
 800a296:	4628      	mov	r0, r5
 800a298:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a29c:	f000 fb3c 	bl	800a918 <_Bfree>
 800a2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2a4:	9f02      	ldr	r7, [sp, #8]
 800a2a6:	ea43 0102 	orr.w	r1, r3, r2
 800a2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b0:	d10d      	bne.n	800a2ce <_dtoa_r+0xa86>
 800a2b2:	2b39      	cmp	r3, #57	; 0x39
 800a2b4:	d027      	beq.n	800a306 <_dtoa_r+0xabe>
 800a2b6:	9a06      	ldr	r2, [sp, #24]
 800a2b8:	2a00      	cmp	r2, #0
 800a2ba:	dd01      	ble.n	800a2c0 <_dtoa_r+0xa78>
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	3331      	adds	r3, #49	; 0x31
 800a2c0:	f88b 3000 	strb.w	r3, [fp]
 800a2c4:	e776      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	e7b9      	b.n	800a23e <_dtoa_r+0x9f6>
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	e7e2      	b.n	800a294 <_dtoa_r+0xa4c>
 800a2ce:	9906      	ldr	r1, [sp, #24]
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	db04      	blt.n	800a2de <_dtoa_r+0xa96>
 800a2d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a2d6:	4301      	orrs	r1, r0
 800a2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2da:	4301      	orrs	r1, r0
 800a2dc:	d120      	bne.n	800a320 <_dtoa_r+0xad8>
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	ddee      	ble.n	800a2c0 <_dtoa_r+0xa78>
 800a2e2:	4651      	mov	r1, sl
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	9302      	str	r3, [sp, #8]
 800a2ea:	f000 fce3 	bl	800acb4 <__lshift>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4682      	mov	sl, r0
 800a2f2:	f000 fd4b 	bl	800ad8c <__mcmp>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	dc02      	bgt.n	800a302 <_dtoa_r+0xaba>
 800a2fc:	d1e0      	bne.n	800a2c0 <_dtoa_r+0xa78>
 800a2fe:	07da      	lsls	r2, r3, #31
 800a300:	d5de      	bpl.n	800a2c0 <_dtoa_r+0xa78>
 800a302:	2b39      	cmp	r3, #57	; 0x39
 800a304:	d1da      	bne.n	800a2bc <_dtoa_r+0xa74>
 800a306:	2339      	movs	r3, #57	; 0x39
 800a308:	f88b 3000 	strb.w	r3, [fp]
 800a30c:	463b      	mov	r3, r7
 800a30e:	461f      	mov	r7, r3
 800a310:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a314:	3b01      	subs	r3, #1
 800a316:	2a39      	cmp	r2, #57	; 0x39
 800a318:	d050      	beq.n	800a3bc <_dtoa_r+0xb74>
 800a31a:	3201      	adds	r2, #1
 800a31c:	701a      	strb	r2, [r3, #0]
 800a31e:	e749      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a320:	2a00      	cmp	r2, #0
 800a322:	dd03      	ble.n	800a32c <_dtoa_r+0xae4>
 800a324:	2b39      	cmp	r3, #57	; 0x39
 800a326:	d0ee      	beq.n	800a306 <_dtoa_r+0xabe>
 800a328:	3301      	adds	r3, #1
 800a32a:	e7c9      	b.n	800a2c0 <_dtoa_r+0xa78>
 800a32c:	9a02      	ldr	r2, [sp, #8]
 800a32e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a330:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a334:	428a      	cmp	r2, r1
 800a336:	d02a      	beq.n	800a38e <_dtoa_r+0xb46>
 800a338:	4651      	mov	r1, sl
 800a33a:	2300      	movs	r3, #0
 800a33c:	220a      	movs	r2, #10
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 fb0c 	bl	800a95c <__multadd>
 800a344:	45b0      	cmp	r8, r6
 800a346:	4682      	mov	sl, r0
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	f04f 020a 	mov.w	r2, #10
 800a350:	4641      	mov	r1, r8
 800a352:	4628      	mov	r0, r5
 800a354:	d107      	bne.n	800a366 <_dtoa_r+0xb1e>
 800a356:	f000 fb01 	bl	800a95c <__multadd>
 800a35a:	4680      	mov	r8, r0
 800a35c:	4606      	mov	r6, r0
 800a35e:	9b02      	ldr	r3, [sp, #8]
 800a360:	3301      	adds	r3, #1
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	e777      	b.n	800a256 <_dtoa_r+0xa0e>
 800a366:	f000 faf9 	bl	800a95c <__multadd>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4680      	mov	r8, r0
 800a36e:	2300      	movs	r3, #0
 800a370:	220a      	movs	r2, #10
 800a372:	4628      	mov	r0, r5
 800a374:	f000 faf2 	bl	800a95c <__multadd>
 800a378:	4606      	mov	r6, r0
 800a37a:	e7f0      	b.n	800a35e <_dtoa_r+0xb16>
 800a37c:	f1bb 0f00 	cmp.w	fp, #0
 800a380:	bfcc      	ite	gt
 800a382:	465f      	movgt	r7, fp
 800a384:	2701      	movle	r7, #1
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	9a08      	ldr	r2, [sp, #32]
 800a38c:	4417      	add	r7, r2
 800a38e:	4651      	mov	r1, sl
 800a390:	2201      	movs	r2, #1
 800a392:	4628      	mov	r0, r5
 800a394:	9302      	str	r3, [sp, #8]
 800a396:	f000 fc8d 	bl	800acb4 <__lshift>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4682      	mov	sl, r0
 800a39e:	f000 fcf5 	bl	800ad8c <__mcmp>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	dcb2      	bgt.n	800a30c <_dtoa_r+0xac4>
 800a3a6:	d102      	bne.n	800a3ae <_dtoa_r+0xb66>
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	07db      	lsls	r3, r3, #31
 800a3ac:	d4ae      	bmi.n	800a30c <_dtoa_r+0xac4>
 800a3ae:	463b      	mov	r3, r7
 800a3b0:	461f      	mov	r7, r3
 800a3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3b6:	2a30      	cmp	r2, #48	; 0x30
 800a3b8:	d0fa      	beq.n	800a3b0 <_dtoa_r+0xb68>
 800a3ba:	e6fb      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a3bc:	9a08      	ldr	r2, [sp, #32]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d1a5      	bne.n	800a30e <_dtoa_r+0xac6>
 800a3c2:	2331      	movs	r3, #49	; 0x31
 800a3c4:	f109 0901 	add.w	r9, r9, #1
 800a3c8:	7013      	strb	r3, [r2, #0]
 800a3ca:	e6f3      	b.n	800a1b4 <_dtoa_r+0x96c>
 800a3cc:	4b13      	ldr	r3, [pc, #76]	; (800a41c <_dtoa_r+0xbd4>)
 800a3ce:	f7ff baa7 	b.w	8009920 <_dtoa_r+0xd8>
 800a3d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f47f aa80 	bne.w	80098da <_dtoa_r+0x92>
 800a3da:	4b11      	ldr	r3, [pc, #68]	; (800a420 <_dtoa_r+0xbd8>)
 800a3dc:	f7ff baa0 	b.w	8009920 <_dtoa_r+0xd8>
 800a3e0:	f1bb 0f00 	cmp.w	fp, #0
 800a3e4:	dc03      	bgt.n	800a3ee <_dtoa_r+0xba6>
 800a3e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	f73f aecc 	bgt.w	800a186 <_dtoa_r+0x93e>
 800a3ee:	9f08      	ldr	r7, [sp, #32]
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	f7ff f998 	bl	8009728 <quorem>
 800a3f8:	9a08      	ldr	r2, [sp, #32]
 800a3fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3fe:	f807 3b01 	strb.w	r3, [r7], #1
 800a402:	1aba      	subs	r2, r7, r2
 800a404:	4593      	cmp	fp, r2
 800a406:	ddb9      	ble.n	800a37c <_dtoa_r+0xb34>
 800a408:	4651      	mov	r1, sl
 800a40a:	2300      	movs	r3, #0
 800a40c:	220a      	movs	r2, #10
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 faa4 	bl	800a95c <__multadd>
 800a414:	4682      	mov	sl, r0
 800a416:	e7eb      	b.n	800a3f0 <_dtoa_r+0xba8>
 800a418:	0800c447 	.word	0x0800c447
 800a41c:	0800c3a0 	.word	0x0800c3a0
 800a420:	0800c3c4 	.word	0x0800c3c4

0800a424 <__sflush_r>:
 800a424:	898a      	ldrh	r2, [r1, #12]
 800a426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42a:	4605      	mov	r5, r0
 800a42c:	0710      	lsls	r0, r2, #28
 800a42e:	460c      	mov	r4, r1
 800a430:	d458      	bmi.n	800a4e4 <__sflush_r+0xc0>
 800a432:	684b      	ldr	r3, [r1, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	dc05      	bgt.n	800a444 <__sflush_r+0x20>
 800a438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dc02      	bgt.n	800a444 <__sflush_r+0x20>
 800a43e:	2000      	movs	r0, #0
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a446:	2e00      	cmp	r6, #0
 800a448:	d0f9      	beq.n	800a43e <__sflush_r+0x1a>
 800a44a:	2300      	movs	r3, #0
 800a44c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a450:	682f      	ldr	r7, [r5, #0]
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	d032      	beq.n	800a4bc <__sflush_r+0x98>
 800a456:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	075a      	lsls	r2, r3, #29
 800a45c:	d505      	bpl.n	800a46a <__sflush_r+0x46>
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	1ac0      	subs	r0, r0, r3
 800a462:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a464:	b10b      	cbz	r3, 800a46a <__sflush_r+0x46>
 800a466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a468:	1ac0      	subs	r0, r0, r3
 800a46a:	2300      	movs	r3, #0
 800a46c:	4602      	mov	r2, r0
 800a46e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a470:	4628      	mov	r0, r5
 800a472:	6a21      	ldr	r1, [r4, #32]
 800a474:	47b0      	blx	r6
 800a476:	1c43      	adds	r3, r0, #1
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	d106      	bne.n	800a48a <__sflush_r+0x66>
 800a47c:	6829      	ldr	r1, [r5, #0]
 800a47e:	291d      	cmp	r1, #29
 800a480:	d82c      	bhi.n	800a4dc <__sflush_r+0xb8>
 800a482:	4a2a      	ldr	r2, [pc, #168]	; (800a52c <__sflush_r+0x108>)
 800a484:	40ca      	lsrs	r2, r1
 800a486:	07d6      	lsls	r6, r2, #31
 800a488:	d528      	bpl.n	800a4dc <__sflush_r+0xb8>
 800a48a:	2200      	movs	r2, #0
 800a48c:	6062      	str	r2, [r4, #4]
 800a48e:	6922      	ldr	r2, [r4, #16]
 800a490:	04d9      	lsls	r1, r3, #19
 800a492:	6022      	str	r2, [r4, #0]
 800a494:	d504      	bpl.n	800a4a0 <__sflush_r+0x7c>
 800a496:	1c42      	adds	r2, r0, #1
 800a498:	d101      	bne.n	800a49e <__sflush_r+0x7a>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b903      	cbnz	r3, 800a4a0 <__sflush_r+0x7c>
 800a49e:	6560      	str	r0, [r4, #84]	; 0x54
 800a4a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a2:	602f      	str	r7, [r5, #0]
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d0ca      	beq.n	800a43e <__sflush_r+0x1a>
 800a4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ac:	4299      	cmp	r1, r3
 800a4ae:	d002      	beq.n	800a4b6 <__sflush_r+0x92>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	f000 fd81 	bl	800afb8 <_free_r>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	6360      	str	r0, [r4, #52]	; 0x34
 800a4ba:	e7c1      	b.n	800a440 <__sflush_r+0x1c>
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b0      	blx	r6
 800a4c4:	1c41      	adds	r1, r0, #1
 800a4c6:	d1c7      	bne.n	800a458 <__sflush_r+0x34>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0c4      	beq.n	800a458 <__sflush_r+0x34>
 800a4ce:	2b1d      	cmp	r3, #29
 800a4d0:	d001      	beq.n	800a4d6 <__sflush_r+0xb2>
 800a4d2:	2b16      	cmp	r3, #22
 800a4d4:	d101      	bne.n	800a4da <__sflush_r+0xb6>
 800a4d6:	602f      	str	r7, [r5, #0]
 800a4d8:	e7b1      	b.n	800a43e <__sflush_r+0x1a>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	e7ad      	b.n	800a440 <__sflush_r+0x1c>
 800a4e4:	690f      	ldr	r7, [r1, #16]
 800a4e6:	2f00      	cmp	r7, #0
 800a4e8:	d0a9      	beq.n	800a43e <__sflush_r+0x1a>
 800a4ea:	0793      	lsls	r3, r2, #30
 800a4ec:	bf18      	it	ne
 800a4ee:	2300      	movne	r3, #0
 800a4f0:	680e      	ldr	r6, [r1, #0]
 800a4f2:	bf08      	it	eq
 800a4f4:	694b      	ldreq	r3, [r1, #20]
 800a4f6:	eba6 0807 	sub.w	r8, r6, r7
 800a4fa:	600f      	str	r7, [r1, #0]
 800a4fc:	608b      	str	r3, [r1, #8]
 800a4fe:	f1b8 0f00 	cmp.w	r8, #0
 800a502:	dd9c      	ble.n	800a43e <__sflush_r+0x1a>
 800a504:	4643      	mov	r3, r8
 800a506:	463a      	mov	r2, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	6a21      	ldr	r1, [r4, #32]
 800a50c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a50e:	47b0      	blx	r6
 800a510:	2800      	cmp	r0, #0
 800a512:	dc06      	bgt.n	800a522 <__sflush_r+0xfe>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f04f 30ff 	mov.w	r0, #4294967295
 800a51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	e78e      	b.n	800a440 <__sflush_r+0x1c>
 800a522:	4407      	add	r7, r0
 800a524:	eba8 0800 	sub.w	r8, r8, r0
 800a528:	e7e9      	b.n	800a4fe <__sflush_r+0xda>
 800a52a:	bf00      	nop
 800a52c:	20400001 	.word	0x20400001

0800a530 <_fflush_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b913      	cbnz	r3, 800a540 <_fflush_r+0x10>
 800a53a:	2500      	movs	r5, #0
 800a53c:	4628      	mov	r0, r5
 800a53e:	bd38      	pop	{r3, r4, r5, pc}
 800a540:	b118      	cbz	r0, 800a54a <_fflush_r+0x1a>
 800a542:	6983      	ldr	r3, [r0, #24]
 800a544:	b90b      	cbnz	r3, 800a54a <_fflush_r+0x1a>
 800a546:	f000 f887 	bl	800a658 <__sinit>
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <_fflush_r+0x6c>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d11b      	bne.n	800a588 <_fflush_r+0x58>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0ef      	beq.n	800a53a <_fflush_r+0xa>
 800a55a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a55c:	07d0      	lsls	r0, r2, #31
 800a55e:	d404      	bmi.n	800a56a <_fflush_r+0x3a>
 800a560:	0599      	lsls	r1, r3, #22
 800a562:	d402      	bmi.n	800a56a <_fflush_r+0x3a>
 800a564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a566:	f000 f91a 	bl	800a79e <__retarget_lock_acquire_recursive>
 800a56a:	4628      	mov	r0, r5
 800a56c:	4621      	mov	r1, r4
 800a56e:	f7ff ff59 	bl	800a424 <__sflush_r>
 800a572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a574:	4605      	mov	r5, r0
 800a576:	07da      	lsls	r2, r3, #31
 800a578:	d4e0      	bmi.n	800a53c <_fflush_r+0xc>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	059b      	lsls	r3, r3, #22
 800a57e:	d4dd      	bmi.n	800a53c <_fflush_r+0xc>
 800a580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a582:	f000 f90d 	bl	800a7a0 <__retarget_lock_release_recursive>
 800a586:	e7d9      	b.n	800a53c <_fflush_r+0xc>
 800a588:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <_fflush_r+0x70>)
 800a58a:	429c      	cmp	r4, r3
 800a58c:	d101      	bne.n	800a592 <_fflush_r+0x62>
 800a58e:	68ac      	ldr	r4, [r5, #8]
 800a590:	e7df      	b.n	800a552 <_fflush_r+0x22>
 800a592:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <_fflush_r+0x74>)
 800a594:	429c      	cmp	r4, r3
 800a596:	bf08      	it	eq
 800a598:	68ec      	ldreq	r4, [r5, #12]
 800a59a:	e7da      	b.n	800a552 <_fflush_r+0x22>
 800a59c:	0800c478 	.word	0x0800c478
 800a5a0:	0800c498 	.word	0x0800c498
 800a5a4:	0800c458 	.word	0x0800c458

0800a5a8 <std>:
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5b6:	6083      	str	r3, [r0, #8]
 800a5b8:	8181      	strh	r1, [r0, #12]
 800a5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800a5bc:	81c2      	strh	r2, [r0, #14]
 800a5be:	6183      	str	r3, [r0, #24]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	2208      	movs	r2, #8
 800a5c4:	305c      	adds	r0, #92	; 0x5c
 800a5c6:	f7fe fabf 	bl	8008b48 <memset>
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <std+0x38>)
 800a5cc:	6224      	str	r4, [r4, #32]
 800a5ce:	6263      	str	r3, [r4, #36]	; 0x24
 800a5d0:	4b04      	ldr	r3, [pc, #16]	; (800a5e4 <std+0x3c>)
 800a5d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <std+0x40>)
 800a5d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5d8:	4b04      	ldr	r3, [pc, #16]	; (800a5ec <std+0x44>)
 800a5da:	6323      	str	r3, [r4, #48]	; 0x30
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800b68d 	.word	0x0800b68d
 800a5e4:	0800b6af 	.word	0x0800b6af
 800a5e8:	0800b6e7 	.word	0x0800b6e7
 800a5ec:	0800b70b 	.word	0x0800b70b

0800a5f0 <_cleanup_r>:
 800a5f0:	4901      	ldr	r1, [pc, #4]	; (800a5f8 <_cleanup_r+0x8>)
 800a5f2:	f000 b8af 	b.w	800a754 <_fwalk_reent>
 800a5f6:	bf00      	nop
 800a5f8:	0800a531 	.word	0x0800a531

0800a5fc <__sfmoreglue>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	2568      	movs	r5, #104	; 0x68
 800a600:	1e4a      	subs	r2, r1, #1
 800a602:	4355      	muls	r5, r2
 800a604:	460e      	mov	r6, r1
 800a606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a60a:	f000 fd21 	bl	800b050 <_malloc_r>
 800a60e:	4604      	mov	r4, r0
 800a610:	b140      	cbz	r0, 800a624 <__sfmoreglue+0x28>
 800a612:	2100      	movs	r1, #0
 800a614:	e9c0 1600 	strd	r1, r6, [r0]
 800a618:	300c      	adds	r0, #12
 800a61a:	60a0      	str	r0, [r4, #8]
 800a61c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a620:	f7fe fa92 	bl	8008b48 <memset>
 800a624:	4620      	mov	r0, r4
 800a626:	bd70      	pop	{r4, r5, r6, pc}

0800a628 <__sfp_lock_acquire>:
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <__sfp_lock_acquire+0x8>)
 800a62a:	f000 b8b8 	b.w	800a79e <__retarget_lock_acquire_recursive>
 800a62e:	bf00      	nop
 800a630:	2000478c 	.word	0x2000478c

0800a634 <__sfp_lock_release>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__sfp_lock_release+0x8>)
 800a636:	f000 b8b3 	b.w	800a7a0 <__retarget_lock_release_recursive>
 800a63a:	bf00      	nop
 800a63c:	2000478c 	.word	0x2000478c

0800a640 <__sinit_lock_acquire>:
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <__sinit_lock_acquire+0x8>)
 800a642:	f000 b8ac 	b.w	800a79e <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	20004787 	.word	0x20004787

0800a64c <__sinit_lock_release>:
 800a64c:	4801      	ldr	r0, [pc, #4]	; (800a654 <__sinit_lock_release+0x8>)
 800a64e:	f000 b8a7 	b.w	800a7a0 <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	20004787 	.word	0x20004787

0800a658 <__sinit>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	4604      	mov	r4, r0
 800a65c:	f7ff fff0 	bl	800a640 <__sinit_lock_acquire>
 800a660:	69a3      	ldr	r3, [r4, #24]
 800a662:	b11b      	cbz	r3, 800a66c <__sinit+0x14>
 800a664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a668:	f7ff bff0 	b.w	800a64c <__sinit_lock_release>
 800a66c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a670:	6523      	str	r3, [r4, #80]	; 0x50
 800a672:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <__sinit+0x68>)
 800a674:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <__sinit+0x6c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	62a2      	str	r2, [r4, #40]	; 0x28
 800a67a:	42a3      	cmp	r3, r4
 800a67c:	bf08      	it	eq
 800a67e:	2301      	moveq	r3, #1
 800a680:	4620      	mov	r0, r4
 800a682:	bf08      	it	eq
 800a684:	61a3      	streq	r3, [r4, #24]
 800a686:	f000 f81f 	bl	800a6c8 <__sfp>
 800a68a:	6060      	str	r0, [r4, #4]
 800a68c:	4620      	mov	r0, r4
 800a68e:	f000 f81b 	bl	800a6c8 <__sfp>
 800a692:	60a0      	str	r0, [r4, #8]
 800a694:	4620      	mov	r0, r4
 800a696:	f000 f817 	bl	800a6c8 <__sfp>
 800a69a:	2200      	movs	r2, #0
 800a69c:	2104      	movs	r1, #4
 800a69e:	60e0      	str	r0, [r4, #12]
 800a6a0:	6860      	ldr	r0, [r4, #4]
 800a6a2:	f7ff ff81 	bl	800a5a8 <std>
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	2109      	movs	r1, #9
 800a6aa:	68a0      	ldr	r0, [r4, #8]
 800a6ac:	f7ff ff7c 	bl	800a5a8 <std>
 800a6b0:	2202      	movs	r2, #2
 800a6b2:	2112      	movs	r1, #18
 800a6b4:	68e0      	ldr	r0, [r4, #12]
 800a6b6:	f7ff ff77 	bl	800a5a8 <std>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	61a3      	str	r3, [r4, #24]
 800a6be:	e7d1      	b.n	800a664 <__sinit+0xc>
 800a6c0:	0800c38c 	.word	0x0800c38c
 800a6c4:	0800a5f1 	.word	0x0800a5f1

0800a6c8 <__sfp>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	4607      	mov	r7, r0
 800a6cc:	f7ff ffac 	bl	800a628 <__sfp_lock_acquire>
 800a6d0:	4b1e      	ldr	r3, [pc, #120]	; (800a74c <__sfp+0x84>)
 800a6d2:	681e      	ldr	r6, [r3, #0]
 800a6d4:	69b3      	ldr	r3, [r6, #24]
 800a6d6:	b913      	cbnz	r3, 800a6de <__sfp+0x16>
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7ff ffbd 	bl	800a658 <__sinit>
 800a6de:	3648      	adds	r6, #72	; 0x48
 800a6e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	d503      	bpl.n	800a6f0 <__sfp+0x28>
 800a6e8:	6833      	ldr	r3, [r6, #0]
 800a6ea:	b30b      	cbz	r3, 800a730 <__sfp+0x68>
 800a6ec:	6836      	ldr	r6, [r6, #0]
 800a6ee:	e7f7      	b.n	800a6e0 <__sfp+0x18>
 800a6f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f4:	b9d5      	cbnz	r5, 800a72c <__sfp+0x64>
 800a6f6:	4b16      	ldr	r3, [pc, #88]	; (800a750 <__sfp+0x88>)
 800a6f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6fc:	60e3      	str	r3, [r4, #12]
 800a6fe:	6665      	str	r5, [r4, #100]	; 0x64
 800a700:	f000 f84c 	bl	800a79c <__retarget_lock_init_recursive>
 800a704:	f7ff ff96 	bl	800a634 <__sfp_lock_release>
 800a708:	2208      	movs	r2, #8
 800a70a:	4629      	mov	r1, r5
 800a70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a714:	6025      	str	r5, [r4, #0]
 800a716:	61a5      	str	r5, [r4, #24]
 800a718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a71c:	f7fe fa14 	bl	8008b48 <memset>
 800a720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a728:	4620      	mov	r0, r4
 800a72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a72c:	3468      	adds	r4, #104	; 0x68
 800a72e:	e7d9      	b.n	800a6e4 <__sfp+0x1c>
 800a730:	2104      	movs	r1, #4
 800a732:	4638      	mov	r0, r7
 800a734:	f7ff ff62 	bl	800a5fc <__sfmoreglue>
 800a738:	4604      	mov	r4, r0
 800a73a:	6030      	str	r0, [r6, #0]
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d1d5      	bne.n	800a6ec <__sfp+0x24>
 800a740:	f7ff ff78 	bl	800a634 <__sfp_lock_release>
 800a744:	230c      	movs	r3, #12
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	e7ee      	b.n	800a728 <__sfp+0x60>
 800a74a:	bf00      	nop
 800a74c:	0800c38c 	.word	0x0800c38c
 800a750:	ffff0001 	.word	0xffff0001

0800a754 <_fwalk_reent>:
 800a754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a758:	4606      	mov	r6, r0
 800a75a:	4688      	mov	r8, r1
 800a75c:	2700      	movs	r7, #0
 800a75e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a766:	f1b9 0901 	subs.w	r9, r9, #1
 800a76a:	d505      	bpl.n	800a778 <_fwalk_reent+0x24>
 800a76c:	6824      	ldr	r4, [r4, #0]
 800a76e:	2c00      	cmp	r4, #0
 800a770:	d1f7      	bne.n	800a762 <_fwalk_reent+0xe>
 800a772:	4638      	mov	r0, r7
 800a774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a778:	89ab      	ldrh	r3, [r5, #12]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d907      	bls.n	800a78e <_fwalk_reent+0x3a>
 800a77e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a782:	3301      	adds	r3, #1
 800a784:	d003      	beq.n	800a78e <_fwalk_reent+0x3a>
 800a786:	4629      	mov	r1, r5
 800a788:	4630      	mov	r0, r6
 800a78a:	47c0      	blx	r8
 800a78c:	4307      	orrs	r7, r0
 800a78e:	3568      	adds	r5, #104	; 0x68
 800a790:	e7e9      	b.n	800a766 <_fwalk_reent+0x12>
	...

0800a794 <_localeconv_r>:
 800a794:	4800      	ldr	r0, [pc, #0]	; (800a798 <_localeconv_r+0x4>)
 800a796:	4770      	bx	lr
 800a798:	20000178 	.word	0x20000178

0800a79c <__retarget_lock_init_recursive>:
 800a79c:	4770      	bx	lr

0800a79e <__retarget_lock_acquire_recursive>:
 800a79e:	4770      	bx	lr

0800a7a0 <__retarget_lock_release_recursive>:
 800a7a0:	4770      	bx	lr

0800a7a2 <__swhatbuf_r>:
 800a7a2:	b570      	push	{r4, r5, r6, lr}
 800a7a4:	460e      	mov	r6, r1
 800a7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7aa:	4614      	mov	r4, r2
 800a7ac:	2900      	cmp	r1, #0
 800a7ae:	461d      	mov	r5, r3
 800a7b0:	b096      	sub	sp, #88	; 0x58
 800a7b2:	da07      	bge.n	800a7c4 <__swhatbuf_r+0x22>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	602b      	str	r3, [r5, #0]
 800a7b8:	89b3      	ldrh	r3, [r6, #12]
 800a7ba:	061a      	lsls	r2, r3, #24
 800a7bc:	d410      	bmi.n	800a7e0 <__swhatbuf_r+0x3e>
 800a7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7c2:	e00e      	b.n	800a7e2 <__swhatbuf_r+0x40>
 800a7c4:	466a      	mov	r2, sp
 800a7c6:	f000 fff7 	bl	800b7b8 <_fstat_r>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	dbf2      	blt.n	800a7b4 <__swhatbuf_r+0x12>
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7d8:	425a      	negs	r2, r3
 800a7da:	415a      	adcs	r2, r3
 800a7dc:	602a      	str	r2, [r5, #0]
 800a7de:	e7ee      	b.n	800a7be <__swhatbuf_r+0x1c>
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	b016      	add	sp, #88	; 0x58
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7ec <__smakebuf_r>:
 800a7ec:	898b      	ldrh	r3, [r1, #12]
 800a7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7f0:	079d      	lsls	r5, r3, #30
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	d507      	bpl.n	800a808 <__smakebuf_r+0x1c>
 800a7f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	6123      	str	r3, [r4, #16]
 800a800:	2301      	movs	r3, #1
 800a802:	6163      	str	r3, [r4, #20]
 800a804:	b002      	add	sp, #8
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	466a      	mov	r2, sp
 800a80a:	ab01      	add	r3, sp, #4
 800a80c:	f7ff ffc9 	bl	800a7a2 <__swhatbuf_r>
 800a810:	9900      	ldr	r1, [sp, #0]
 800a812:	4605      	mov	r5, r0
 800a814:	4630      	mov	r0, r6
 800a816:	f000 fc1b 	bl	800b050 <_malloc_r>
 800a81a:	b948      	cbnz	r0, 800a830 <__smakebuf_r+0x44>
 800a81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a820:	059a      	lsls	r2, r3, #22
 800a822:	d4ef      	bmi.n	800a804 <__smakebuf_r+0x18>
 800a824:	f023 0303 	bic.w	r3, r3, #3
 800a828:	f043 0302 	orr.w	r3, r3, #2
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	e7e3      	b.n	800a7f8 <__smakebuf_r+0xc>
 800a830:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <__smakebuf_r+0x7c>)
 800a832:	62b3      	str	r3, [r6, #40]	; 0x28
 800a834:	89a3      	ldrh	r3, [r4, #12]
 800a836:	6020      	str	r0, [r4, #0]
 800a838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	9b00      	ldr	r3, [sp, #0]
 800a840:	6120      	str	r0, [r4, #16]
 800a842:	6163      	str	r3, [r4, #20]
 800a844:	9b01      	ldr	r3, [sp, #4]
 800a846:	b15b      	cbz	r3, 800a860 <__smakebuf_r+0x74>
 800a848:	4630      	mov	r0, r6
 800a84a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a84e:	f000 ffc5 	bl	800b7dc <_isatty_r>
 800a852:	b128      	cbz	r0, 800a860 <__smakebuf_r+0x74>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f023 0303 	bic.w	r3, r3, #3
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	89a0      	ldrh	r0, [r4, #12]
 800a862:	4305      	orrs	r5, r0
 800a864:	81a5      	strh	r5, [r4, #12]
 800a866:	e7cd      	b.n	800a804 <__smakebuf_r+0x18>
 800a868:	0800a5f1 	.word	0x0800a5f1

0800a86c <malloc>:
 800a86c:	4b02      	ldr	r3, [pc, #8]	; (800a878 <malloc+0xc>)
 800a86e:	4601      	mov	r1, r0
 800a870:	6818      	ldr	r0, [r3, #0]
 800a872:	f000 bbed 	b.w	800b050 <_malloc_r>
 800a876:	bf00      	nop
 800a878:	20000024 	.word	0x20000024

0800a87c <memchr>:
 800a87c:	4603      	mov	r3, r0
 800a87e:	b510      	push	{r4, lr}
 800a880:	b2c9      	uxtb	r1, r1
 800a882:	4402      	add	r2, r0
 800a884:	4293      	cmp	r3, r2
 800a886:	4618      	mov	r0, r3
 800a888:	d101      	bne.n	800a88e <memchr+0x12>
 800a88a:	2000      	movs	r0, #0
 800a88c:	e003      	b.n	800a896 <memchr+0x1a>
 800a88e:	7804      	ldrb	r4, [r0, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	428c      	cmp	r4, r1
 800a894:	d1f6      	bne.n	800a884 <memchr+0x8>
 800a896:	bd10      	pop	{r4, pc}

0800a898 <_Balloc>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a89c:	4604      	mov	r4, r0
 800a89e:	460d      	mov	r5, r1
 800a8a0:	b976      	cbnz	r6, 800a8c0 <_Balloc+0x28>
 800a8a2:	2010      	movs	r0, #16
 800a8a4:	f7ff ffe2 	bl	800a86c <malloc>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	6260      	str	r0, [r4, #36]	; 0x24
 800a8ac:	b920      	cbnz	r0, 800a8b8 <_Balloc+0x20>
 800a8ae:	2166      	movs	r1, #102	; 0x66
 800a8b0:	4b17      	ldr	r3, [pc, #92]	; (800a910 <_Balloc+0x78>)
 800a8b2:	4818      	ldr	r0, [pc, #96]	; (800a914 <_Balloc+0x7c>)
 800a8b4:	f000 ff40 	bl	800b738 <__assert_func>
 800a8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8bc:	6006      	str	r6, [r0, #0]
 800a8be:	60c6      	str	r6, [r0, #12]
 800a8c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8c2:	68f3      	ldr	r3, [r6, #12]
 800a8c4:	b183      	cbz	r3, 800a8e8 <_Balloc+0x50>
 800a8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8ce:	b9b8      	cbnz	r0, 800a900 <_Balloc+0x68>
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8d6:	1d72      	adds	r2, r6, #5
 800a8d8:	4620      	mov	r0, r4
 800a8da:	0092      	lsls	r2, r2, #2
 800a8dc:	f000 fb5e 	bl	800af9c <_calloc_r>
 800a8e0:	b160      	cbz	r0, 800a8fc <_Balloc+0x64>
 800a8e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8e6:	e00e      	b.n	800a906 <_Balloc+0x6e>
 800a8e8:	2221      	movs	r2, #33	; 0x21
 800a8ea:	2104      	movs	r1, #4
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fb55 	bl	800af9c <_calloc_r>
 800a8f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8f4:	60f0      	str	r0, [r6, #12]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1e4      	bne.n	800a8c6 <_Balloc+0x2e>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	6802      	ldr	r2, [r0, #0]
 800a902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a906:	2300      	movs	r3, #0
 800a908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a90c:	e7f7      	b.n	800a8fe <_Balloc+0x66>
 800a90e:	bf00      	nop
 800a910:	0800c3d1 	.word	0x0800c3d1
 800a914:	0800c4b8 	.word	0x0800c4b8

0800a918 <_Bfree>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b976      	cbnz	r6, 800a940 <_Bfree+0x28>
 800a922:	2010      	movs	r0, #16
 800a924:	f7ff ffa2 	bl	800a86c <malloc>
 800a928:	4602      	mov	r2, r0
 800a92a:	6268      	str	r0, [r5, #36]	; 0x24
 800a92c:	b920      	cbnz	r0, 800a938 <_Bfree+0x20>
 800a92e:	218a      	movs	r1, #138	; 0x8a
 800a930:	4b08      	ldr	r3, [pc, #32]	; (800a954 <_Bfree+0x3c>)
 800a932:	4809      	ldr	r0, [pc, #36]	; (800a958 <_Bfree+0x40>)
 800a934:	f000 ff00 	bl	800b738 <__assert_func>
 800a938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a93c:	6006      	str	r6, [r0, #0]
 800a93e:	60c6      	str	r6, [r0, #12]
 800a940:	b13c      	cbz	r4, 800a952 <_Bfree+0x3a>
 800a942:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a944:	6862      	ldr	r2, [r4, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a94c:	6021      	str	r1, [r4, #0]
 800a94e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	0800c3d1 	.word	0x0800c3d1
 800a958:	0800c4b8 	.word	0x0800c4b8

0800a95c <__multadd>:
 800a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	4698      	mov	r8, r3
 800a962:	460c      	mov	r4, r1
 800a964:	2300      	movs	r3, #0
 800a966:	690e      	ldr	r6, [r1, #16]
 800a968:	4607      	mov	r7, r0
 800a96a:	f101 0014 	add.w	r0, r1, #20
 800a96e:	6805      	ldr	r5, [r0, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	b2a9      	uxth	r1, r5
 800a974:	fb02 8101 	mla	r1, r2, r1, r8
 800a978:	0c2d      	lsrs	r5, r5, #16
 800a97a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a97e:	fb02 c505 	mla	r5, r2, r5, ip
 800a982:	b289      	uxth	r1, r1
 800a984:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a988:	429e      	cmp	r6, r3
 800a98a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a98e:	f840 1b04 	str.w	r1, [r0], #4
 800a992:	dcec      	bgt.n	800a96e <__multadd+0x12>
 800a994:	f1b8 0f00 	cmp.w	r8, #0
 800a998:	d022      	beq.n	800a9e0 <__multadd+0x84>
 800a99a:	68a3      	ldr	r3, [r4, #8]
 800a99c:	42b3      	cmp	r3, r6
 800a99e:	dc19      	bgt.n	800a9d4 <__multadd+0x78>
 800a9a0:	6861      	ldr	r1, [r4, #4]
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f7ff ff77 	bl	800a898 <_Balloc>
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	b928      	cbnz	r0, 800a9ba <__multadd+0x5e>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	21b5      	movs	r1, #181	; 0xb5
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	; (800a9e8 <__multadd+0x8c>)
 800a9b4:	480d      	ldr	r0, [pc, #52]	; (800a9ec <__multadd+0x90>)
 800a9b6:	f000 febf 	bl	800b738 <__assert_func>
 800a9ba:	6922      	ldr	r2, [r4, #16]
 800a9bc:	f104 010c 	add.w	r1, r4, #12
 800a9c0:	3202      	adds	r2, #2
 800a9c2:	0092      	lsls	r2, r2, #2
 800a9c4:	300c      	adds	r0, #12
 800a9c6:	f7fe f8b1 	bl	8008b2c <memcpy>
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	f7ff ffa3 	bl	800a918 <_Bfree>
 800a9d2:	462c      	mov	r4, r5
 800a9d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a9d8:	3601      	adds	r6, #1
 800a9da:	f8c3 8014 	str.w	r8, [r3, #20]
 800a9de:	6126      	str	r6, [r4, #16]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800c447 	.word	0x0800c447
 800a9ec:	0800c4b8 	.word	0x0800c4b8

0800a9f0 <__hi0bits>:
 800a9f0:	0c02      	lsrs	r2, r0, #16
 800a9f2:	0412      	lsls	r2, r2, #16
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	b9ca      	cbnz	r2, 800aa2c <__hi0bits+0x3c>
 800a9f8:	0403      	lsls	r3, r0, #16
 800a9fa:	2010      	movs	r0, #16
 800a9fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa00:	bf04      	itt	eq
 800aa02:	021b      	lsleq	r3, r3, #8
 800aa04:	3008      	addeq	r0, #8
 800aa06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa0a:	bf04      	itt	eq
 800aa0c:	011b      	lsleq	r3, r3, #4
 800aa0e:	3004      	addeq	r0, #4
 800aa10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa14:	bf04      	itt	eq
 800aa16:	009b      	lsleq	r3, r3, #2
 800aa18:	3002      	addeq	r0, #2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	db05      	blt.n	800aa2a <__hi0bits+0x3a>
 800aa1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aa22:	f100 0001 	add.w	r0, r0, #1
 800aa26:	bf08      	it	eq
 800aa28:	2020      	moveq	r0, #32
 800aa2a:	4770      	bx	lr
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e7e5      	b.n	800a9fc <__hi0bits+0xc>

0800aa30 <__lo0bits>:
 800aa30:	6803      	ldr	r3, [r0, #0]
 800aa32:	4602      	mov	r2, r0
 800aa34:	f013 0007 	ands.w	r0, r3, #7
 800aa38:	d00b      	beq.n	800aa52 <__lo0bits+0x22>
 800aa3a:	07d9      	lsls	r1, r3, #31
 800aa3c:	d422      	bmi.n	800aa84 <__lo0bits+0x54>
 800aa3e:	0798      	lsls	r0, r3, #30
 800aa40:	bf49      	itett	mi
 800aa42:	085b      	lsrmi	r3, r3, #1
 800aa44:	089b      	lsrpl	r3, r3, #2
 800aa46:	2001      	movmi	r0, #1
 800aa48:	6013      	strmi	r3, [r2, #0]
 800aa4a:	bf5c      	itt	pl
 800aa4c:	2002      	movpl	r0, #2
 800aa4e:	6013      	strpl	r3, [r2, #0]
 800aa50:	4770      	bx	lr
 800aa52:	b299      	uxth	r1, r3
 800aa54:	b909      	cbnz	r1, 800aa5a <__lo0bits+0x2a>
 800aa56:	2010      	movs	r0, #16
 800aa58:	0c1b      	lsrs	r3, r3, #16
 800aa5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa5e:	bf04      	itt	eq
 800aa60:	0a1b      	lsreq	r3, r3, #8
 800aa62:	3008      	addeq	r0, #8
 800aa64:	0719      	lsls	r1, r3, #28
 800aa66:	bf04      	itt	eq
 800aa68:	091b      	lsreq	r3, r3, #4
 800aa6a:	3004      	addeq	r0, #4
 800aa6c:	0799      	lsls	r1, r3, #30
 800aa6e:	bf04      	itt	eq
 800aa70:	089b      	lsreq	r3, r3, #2
 800aa72:	3002      	addeq	r0, #2
 800aa74:	07d9      	lsls	r1, r3, #31
 800aa76:	d403      	bmi.n	800aa80 <__lo0bits+0x50>
 800aa78:	085b      	lsrs	r3, r3, #1
 800aa7a:	f100 0001 	add.w	r0, r0, #1
 800aa7e:	d003      	beq.n	800aa88 <__lo0bits+0x58>
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	4770      	bx	lr
 800aa84:	2000      	movs	r0, #0
 800aa86:	4770      	bx	lr
 800aa88:	2020      	movs	r0, #32
 800aa8a:	4770      	bx	lr

0800aa8c <__i2b>:
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	460c      	mov	r4, r1
 800aa90:	2101      	movs	r1, #1
 800aa92:	f7ff ff01 	bl	800a898 <_Balloc>
 800aa96:	4602      	mov	r2, r0
 800aa98:	b928      	cbnz	r0, 800aaa6 <__i2b+0x1a>
 800aa9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa9e:	4b04      	ldr	r3, [pc, #16]	; (800aab0 <__i2b+0x24>)
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <__i2b+0x28>)
 800aaa2:	f000 fe49 	bl	800b738 <__assert_func>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	6144      	str	r4, [r0, #20]
 800aaaa:	6103      	str	r3, [r0, #16]
 800aaac:	bd10      	pop	{r4, pc}
 800aaae:	bf00      	nop
 800aab0:	0800c447 	.word	0x0800c447
 800aab4:	0800c4b8 	.word	0x0800c4b8

0800aab8 <__multiply>:
 800aab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabc:	4614      	mov	r4, r2
 800aabe:	690a      	ldr	r2, [r1, #16]
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	460d      	mov	r5, r1
 800aac4:	429a      	cmp	r2, r3
 800aac6:	bfbe      	ittt	lt
 800aac8:	460b      	movlt	r3, r1
 800aaca:	4625      	movlt	r5, r4
 800aacc:	461c      	movlt	r4, r3
 800aace:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800aad2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aad6:	68ab      	ldr	r3, [r5, #8]
 800aad8:	6869      	ldr	r1, [r5, #4]
 800aada:	eb0a 0709 	add.w	r7, sl, r9
 800aade:	42bb      	cmp	r3, r7
 800aae0:	b085      	sub	sp, #20
 800aae2:	bfb8      	it	lt
 800aae4:	3101      	addlt	r1, #1
 800aae6:	f7ff fed7 	bl	800a898 <_Balloc>
 800aaea:	b930      	cbnz	r0, 800aafa <__multiply+0x42>
 800aaec:	4602      	mov	r2, r0
 800aaee:	f240 115d 	movw	r1, #349	; 0x15d
 800aaf2:	4b41      	ldr	r3, [pc, #260]	; (800abf8 <__multiply+0x140>)
 800aaf4:	4841      	ldr	r0, [pc, #260]	; (800abfc <__multiply+0x144>)
 800aaf6:	f000 fe1f 	bl	800b738 <__assert_func>
 800aafa:	f100 0614 	add.w	r6, r0, #20
 800aafe:	4633      	mov	r3, r6
 800ab00:	2200      	movs	r2, #0
 800ab02:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ab06:	4543      	cmp	r3, r8
 800ab08:	d31e      	bcc.n	800ab48 <__multiply+0x90>
 800ab0a:	f105 0c14 	add.w	ip, r5, #20
 800ab0e:	f104 0314 	add.w	r3, r4, #20
 800ab12:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ab16:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ab1a:	9202      	str	r2, [sp, #8]
 800ab1c:	ebac 0205 	sub.w	r2, ip, r5
 800ab20:	3a15      	subs	r2, #21
 800ab22:	f022 0203 	bic.w	r2, r2, #3
 800ab26:	3204      	adds	r2, #4
 800ab28:	f105 0115 	add.w	r1, r5, #21
 800ab2c:	458c      	cmp	ip, r1
 800ab2e:	bf38      	it	cc
 800ab30:	2204      	movcc	r2, #4
 800ab32:	9201      	str	r2, [sp, #4]
 800ab34:	9a02      	ldr	r2, [sp, #8]
 800ab36:	9303      	str	r3, [sp, #12]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d808      	bhi.n	800ab4e <__multiply+0x96>
 800ab3c:	2f00      	cmp	r7, #0
 800ab3e:	dc55      	bgt.n	800abec <__multiply+0x134>
 800ab40:	6107      	str	r7, [r0, #16]
 800ab42:	b005      	add	sp, #20
 800ab44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab48:	f843 2b04 	str.w	r2, [r3], #4
 800ab4c:	e7db      	b.n	800ab06 <__multiply+0x4e>
 800ab4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab52:	f1ba 0f00 	cmp.w	sl, #0
 800ab56:	d020      	beq.n	800ab9a <__multiply+0xe2>
 800ab58:	46b1      	mov	r9, r6
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f105 0e14 	add.w	lr, r5, #20
 800ab60:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ab64:	f8d9 b000 	ldr.w	fp, [r9]
 800ab68:	b2a1      	uxth	r1, r4
 800ab6a:	fa1f fb8b 	uxth.w	fp, fp
 800ab6e:	fb0a b101 	mla	r1, sl, r1, fp
 800ab72:	4411      	add	r1, r2
 800ab74:	f8d9 2000 	ldr.w	r2, [r9]
 800ab78:	0c24      	lsrs	r4, r4, #16
 800ab7a:	0c12      	lsrs	r2, r2, #16
 800ab7c:	fb0a 2404 	mla	r4, sl, r4, r2
 800ab80:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ab84:	b289      	uxth	r1, r1
 800ab86:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ab8a:	45f4      	cmp	ip, lr
 800ab8c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ab90:	f849 1b04 	str.w	r1, [r9], #4
 800ab94:	d8e4      	bhi.n	800ab60 <__multiply+0xa8>
 800ab96:	9901      	ldr	r1, [sp, #4]
 800ab98:	5072      	str	r2, [r6, r1]
 800ab9a:	9a03      	ldr	r2, [sp, #12]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aba2:	f1b9 0f00 	cmp.w	r9, #0
 800aba6:	d01f      	beq.n	800abe8 <__multiply+0x130>
 800aba8:	46b6      	mov	lr, r6
 800abaa:	f04f 0a00 	mov.w	sl, #0
 800abae:	6834      	ldr	r4, [r6, #0]
 800abb0:	f105 0114 	add.w	r1, r5, #20
 800abb4:	880a      	ldrh	r2, [r1, #0]
 800abb6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800abba:	b2a4      	uxth	r4, r4
 800abbc:	fb09 b202 	mla	r2, r9, r2, fp
 800abc0:	4492      	add	sl, r2
 800abc2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800abc6:	f84e 4b04 	str.w	r4, [lr], #4
 800abca:	f851 4b04 	ldr.w	r4, [r1], #4
 800abce:	f8be 2000 	ldrh.w	r2, [lr]
 800abd2:	0c24      	lsrs	r4, r4, #16
 800abd4:	fb09 2404 	mla	r4, r9, r4, r2
 800abd8:	458c      	cmp	ip, r1
 800abda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800abde:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800abe2:	d8e7      	bhi.n	800abb4 <__multiply+0xfc>
 800abe4:	9a01      	ldr	r2, [sp, #4]
 800abe6:	50b4      	str	r4, [r6, r2]
 800abe8:	3604      	adds	r6, #4
 800abea:	e7a3      	b.n	800ab34 <__multiply+0x7c>
 800abec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1a5      	bne.n	800ab40 <__multiply+0x88>
 800abf4:	3f01      	subs	r7, #1
 800abf6:	e7a1      	b.n	800ab3c <__multiply+0x84>
 800abf8:	0800c447 	.word	0x0800c447
 800abfc:	0800c4b8 	.word	0x0800c4b8

0800ac00 <__pow5mult>:
 800ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	4615      	mov	r5, r2
 800ac06:	f012 0203 	ands.w	r2, r2, #3
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460f      	mov	r7, r1
 800ac0e:	d007      	beq.n	800ac20 <__pow5mult+0x20>
 800ac10:	4c25      	ldr	r4, [pc, #148]	; (800aca8 <__pow5mult+0xa8>)
 800ac12:	3a01      	subs	r2, #1
 800ac14:	2300      	movs	r3, #0
 800ac16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac1a:	f7ff fe9f 	bl	800a95c <__multadd>
 800ac1e:	4607      	mov	r7, r0
 800ac20:	10ad      	asrs	r5, r5, #2
 800ac22:	d03d      	beq.n	800aca0 <__pow5mult+0xa0>
 800ac24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac26:	b97c      	cbnz	r4, 800ac48 <__pow5mult+0x48>
 800ac28:	2010      	movs	r0, #16
 800ac2a:	f7ff fe1f 	bl	800a86c <malloc>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	6270      	str	r0, [r6, #36]	; 0x24
 800ac32:	b928      	cbnz	r0, 800ac40 <__pow5mult+0x40>
 800ac34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ac38:	4b1c      	ldr	r3, [pc, #112]	; (800acac <__pow5mult+0xac>)
 800ac3a:	481d      	ldr	r0, [pc, #116]	; (800acb0 <__pow5mult+0xb0>)
 800ac3c:	f000 fd7c 	bl	800b738 <__assert_func>
 800ac40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac44:	6004      	str	r4, [r0, #0]
 800ac46:	60c4      	str	r4, [r0, #12]
 800ac48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ac4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac50:	b94c      	cbnz	r4, 800ac66 <__pow5mult+0x66>
 800ac52:	f240 2171 	movw	r1, #625	; 0x271
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7ff ff18 	bl	800aa8c <__i2b>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac64:	6003      	str	r3, [r0, #0]
 800ac66:	f04f 0900 	mov.w	r9, #0
 800ac6a:	07eb      	lsls	r3, r5, #31
 800ac6c:	d50a      	bpl.n	800ac84 <__pow5mult+0x84>
 800ac6e:	4639      	mov	r1, r7
 800ac70:	4622      	mov	r2, r4
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7ff ff20 	bl	800aab8 <__multiply>
 800ac78:	4680      	mov	r8, r0
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff fe4b 	bl	800a918 <_Bfree>
 800ac82:	4647      	mov	r7, r8
 800ac84:	106d      	asrs	r5, r5, #1
 800ac86:	d00b      	beq.n	800aca0 <__pow5mult+0xa0>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	b938      	cbnz	r0, 800ac9c <__pow5mult+0x9c>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4630      	mov	r0, r6
 800ac92:	f7ff ff11 	bl	800aab8 <__multiply>
 800ac96:	6020      	str	r0, [r4, #0]
 800ac98:	f8c0 9000 	str.w	r9, [r0]
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	e7e4      	b.n	800ac6a <__pow5mult+0x6a>
 800aca0:	4638      	mov	r0, r7
 800aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca6:	bf00      	nop
 800aca8:	0800c608 	.word	0x0800c608
 800acac:	0800c3d1 	.word	0x0800c3d1
 800acb0:	0800c4b8 	.word	0x0800c4b8

0800acb4 <__lshift>:
 800acb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	460c      	mov	r4, r1
 800acba:	4607      	mov	r7, r0
 800acbc:	4691      	mov	r9, r2
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	6849      	ldr	r1, [r1, #4]
 800acc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acc6:	68a3      	ldr	r3, [r4, #8]
 800acc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800accc:	f108 0601 	add.w	r6, r8, #1
 800acd0:	42b3      	cmp	r3, r6
 800acd2:	db0b      	blt.n	800acec <__lshift+0x38>
 800acd4:	4638      	mov	r0, r7
 800acd6:	f7ff fddf 	bl	800a898 <_Balloc>
 800acda:	4605      	mov	r5, r0
 800acdc:	b948      	cbnz	r0, 800acf2 <__lshift+0x3e>
 800acde:	4602      	mov	r2, r0
 800ace0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ace4:	4b27      	ldr	r3, [pc, #156]	; (800ad84 <__lshift+0xd0>)
 800ace6:	4828      	ldr	r0, [pc, #160]	; (800ad88 <__lshift+0xd4>)
 800ace8:	f000 fd26 	bl	800b738 <__assert_func>
 800acec:	3101      	adds	r1, #1
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	e7ee      	b.n	800acd0 <__lshift+0x1c>
 800acf2:	2300      	movs	r3, #0
 800acf4:	f100 0114 	add.w	r1, r0, #20
 800acf8:	f100 0210 	add.w	r2, r0, #16
 800acfc:	4618      	mov	r0, r3
 800acfe:	4553      	cmp	r3, sl
 800ad00:	db33      	blt.n	800ad6a <__lshift+0xb6>
 800ad02:	6920      	ldr	r0, [r4, #16]
 800ad04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad08:	f104 0314 	add.w	r3, r4, #20
 800ad0c:	f019 091f 	ands.w	r9, r9, #31
 800ad10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad18:	d02b      	beq.n	800ad72 <__lshift+0xbe>
 800ad1a:	468a      	mov	sl, r1
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	fa00 f009 	lsl.w	r0, r0, r9
 800ad28:	4302      	orrs	r2, r0
 800ad2a:	f84a 2b04 	str.w	r2, [sl], #4
 800ad2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad32:	459c      	cmp	ip, r3
 800ad34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad38:	d8f3      	bhi.n	800ad22 <__lshift+0x6e>
 800ad3a:	ebac 0304 	sub.w	r3, ip, r4
 800ad3e:	3b15      	subs	r3, #21
 800ad40:	f023 0303 	bic.w	r3, r3, #3
 800ad44:	3304      	adds	r3, #4
 800ad46:	f104 0015 	add.w	r0, r4, #21
 800ad4a:	4584      	cmp	ip, r0
 800ad4c:	bf38      	it	cc
 800ad4e:	2304      	movcc	r3, #4
 800ad50:	50ca      	str	r2, [r1, r3]
 800ad52:	b10a      	cbz	r2, 800ad58 <__lshift+0xa4>
 800ad54:	f108 0602 	add.w	r6, r8, #2
 800ad58:	3e01      	subs	r6, #1
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	612e      	str	r6, [r5, #16]
 800ad60:	f7ff fdda 	bl	800a918 <_Bfree>
 800ad64:	4628      	mov	r0, r5
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad6e:	3301      	adds	r3, #1
 800ad70:	e7c5      	b.n	800acfe <__lshift+0x4a>
 800ad72:	3904      	subs	r1, #4
 800ad74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad78:	459c      	cmp	ip, r3
 800ad7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad7e:	d8f9      	bhi.n	800ad74 <__lshift+0xc0>
 800ad80:	e7ea      	b.n	800ad58 <__lshift+0xa4>
 800ad82:	bf00      	nop
 800ad84:	0800c447 	.word	0x0800c447
 800ad88:	0800c4b8 	.word	0x0800c4b8

0800ad8c <__mcmp>:
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	690a      	ldr	r2, [r1, #16]
 800ad90:	6900      	ldr	r0, [r0, #16]
 800ad92:	b530      	push	{r4, r5, lr}
 800ad94:	1a80      	subs	r0, r0, r2
 800ad96:	d10d      	bne.n	800adb4 <__mcmp+0x28>
 800ad98:	3314      	adds	r3, #20
 800ad9a:	3114      	adds	r1, #20
 800ad9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ada0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ada4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ada8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adac:	4295      	cmp	r5, r2
 800adae:	d002      	beq.n	800adb6 <__mcmp+0x2a>
 800adb0:	d304      	bcc.n	800adbc <__mcmp+0x30>
 800adb2:	2001      	movs	r0, #1
 800adb4:	bd30      	pop	{r4, r5, pc}
 800adb6:	42a3      	cmp	r3, r4
 800adb8:	d3f4      	bcc.n	800ada4 <__mcmp+0x18>
 800adba:	e7fb      	b.n	800adb4 <__mcmp+0x28>
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	e7f8      	b.n	800adb4 <__mcmp+0x28>
	...

0800adc4 <__mdiff>:
 800adc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	460c      	mov	r4, r1
 800adca:	4606      	mov	r6, r0
 800adcc:	4611      	mov	r1, r2
 800adce:	4620      	mov	r0, r4
 800add0:	4692      	mov	sl, r2
 800add2:	f7ff ffdb 	bl	800ad8c <__mcmp>
 800add6:	1e05      	subs	r5, r0, #0
 800add8:	d111      	bne.n	800adfe <__mdiff+0x3a>
 800adda:	4629      	mov	r1, r5
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff fd5b 	bl	800a898 <_Balloc>
 800ade2:	4602      	mov	r2, r0
 800ade4:	b928      	cbnz	r0, 800adf2 <__mdiff+0x2e>
 800ade6:	f240 2132 	movw	r1, #562	; 0x232
 800adea:	4b3c      	ldr	r3, [pc, #240]	; (800aedc <__mdiff+0x118>)
 800adec:	483c      	ldr	r0, [pc, #240]	; (800aee0 <__mdiff+0x11c>)
 800adee:	f000 fca3 	bl	800b738 <__assert_func>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adf8:	4610      	mov	r0, r2
 800adfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfe:	bfa4      	itt	ge
 800ae00:	4653      	movge	r3, sl
 800ae02:	46a2      	movge	sl, r4
 800ae04:	4630      	mov	r0, r6
 800ae06:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ae0a:	bfa6      	itte	ge
 800ae0c:	461c      	movge	r4, r3
 800ae0e:	2500      	movge	r5, #0
 800ae10:	2501      	movlt	r5, #1
 800ae12:	f7ff fd41 	bl	800a898 <_Balloc>
 800ae16:	4602      	mov	r2, r0
 800ae18:	b918      	cbnz	r0, 800ae22 <__mdiff+0x5e>
 800ae1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae1e:	4b2f      	ldr	r3, [pc, #188]	; (800aedc <__mdiff+0x118>)
 800ae20:	e7e4      	b.n	800adec <__mdiff+0x28>
 800ae22:	f100 0814 	add.w	r8, r0, #20
 800ae26:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ae2a:	60c5      	str	r5, [r0, #12]
 800ae2c:	f04f 0c00 	mov.w	ip, #0
 800ae30:	f10a 0514 	add.w	r5, sl, #20
 800ae34:	f10a 0010 	add.w	r0, sl, #16
 800ae38:	46c2      	mov	sl, r8
 800ae3a:	6926      	ldr	r6, [r4, #16]
 800ae3c:	f104 0914 	add.w	r9, r4, #20
 800ae40:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ae44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae48:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ae4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae50:	fa1f f18b 	uxth.w	r1, fp
 800ae54:	4461      	add	r1, ip
 800ae56:	fa1f fc83 	uxth.w	ip, r3
 800ae5a:	0c1b      	lsrs	r3, r3, #16
 800ae5c:	eba1 010c 	sub.w	r1, r1, ip
 800ae60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ae68:	b289      	uxth	r1, r1
 800ae6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ae6e:	454e      	cmp	r6, r9
 800ae70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ae74:	f84a 3b04 	str.w	r3, [sl], #4
 800ae78:	d8e6      	bhi.n	800ae48 <__mdiff+0x84>
 800ae7a:	1b33      	subs	r3, r6, r4
 800ae7c:	3b15      	subs	r3, #21
 800ae7e:	f023 0303 	bic.w	r3, r3, #3
 800ae82:	3415      	adds	r4, #21
 800ae84:	3304      	adds	r3, #4
 800ae86:	42a6      	cmp	r6, r4
 800ae88:	bf38      	it	cc
 800ae8a:	2304      	movcc	r3, #4
 800ae8c:	441d      	add	r5, r3
 800ae8e:	4443      	add	r3, r8
 800ae90:	461e      	mov	r6, r3
 800ae92:	462c      	mov	r4, r5
 800ae94:	4574      	cmp	r4, lr
 800ae96:	d30e      	bcc.n	800aeb6 <__mdiff+0xf2>
 800ae98:	f10e 0103 	add.w	r1, lr, #3
 800ae9c:	1b49      	subs	r1, r1, r5
 800ae9e:	f021 0103 	bic.w	r1, r1, #3
 800aea2:	3d03      	subs	r5, #3
 800aea4:	45ae      	cmp	lr, r5
 800aea6:	bf38      	it	cc
 800aea8:	2100      	movcc	r1, #0
 800aeaa:	4419      	add	r1, r3
 800aeac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800aeb0:	b18b      	cbz	r3, 800aed6 <__mdiff+0x112>
 800aeb2:	6117      	str	r7, [r2, #16]
 800aeb4:	e7a0      	b.n	800adf8 <__mdiff+0x34>
 800aeb6:	f854 8b04 	ldr.w	r8, [r4], #4
 800aeba:	fa1f f188 	uxth.w	r1, r8
 800aebe:	4461      	add	r1, ip
 800aec0:	1408      	asrs	r0, r1, #16
 800aec2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800aec6:	b289      	uxth	r1, r1
 800aec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aed0:	f846 1b04 	str.w	r1, [r6], #4
 800aed4:	e7de      	b.n	800ae94 <__mdiff+0xd0>
 800aed6:	3f01      	subs	r7, #1
 800aed8:	e7e8      	b.n	800aeac <__mdiff+0xe8>
 800aeda:	bf00      	nop
 800aedc:	0800c447 	.word	0x0800c447
 800aee0:	0800c4b8 	.word	0x0800c4b8

0800aee4 <__d2b>:
 800aee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aee8:	2101      	movs	r1, #1
 800aeea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800aeee:	4690      	mov	r8, r2
 800aef0:	461d      	mov	r5, r3
 800aef2:	f7ff fcd1 	bl	800a898 <_Balloc>
 800aef6:	4604      	mov	r4, r0
 800aef8:	b930      	cbnz	r0, 800af08 <__d2b+0x24>
 800aefa:	4602      	mov	r2, r0
 800aefc:	f240 310a 	movw	r1, #778	; 0x30a
 800af00:	4b24      	ldr	r3, [pc, #144]	; (800af94 <__d2b+0xb0>)
 800af02:	4825      	ldr	r0, [pc, #148]	; (800af98 <__d2b+0xb4>)
 800af04:	f000 fc18 	bl	800b738 <__assert_func>
 800af08:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800af0c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800af10:	bb2d      	cbnz	r5, 800af5e <__d2b+0x7a>
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	f1b8 0300 	subs.w	r3, r8, #0
 800af18:	d026      	beq.n	800af68 <__d2b+0x84>
 800af1a:	4668      	mov	r0, sp
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	f7ff fd87 	bl	800aa30 <__lo0bits>
 800af22:	9900      	ldr	r1, [sp, #0]
 800af24:	b1f0      	cbz	r0, 800af64 <__d2b+0x80>
 800af26:	9a01      	ldr	r2, [sp, #4]
 800af28:	f1c0 0320 	rsb	r3, r0, #32
 800af2c:	fa02 f303 	lsl.w	r3, r2, r3
 800af30:	430b      	orrs	r3, r1
 800af32:	40c2      	lsrs	r2, r0
 800af34:	6163      	str	r3, [r4, #20]
 800af36:	9201      	str	r2, [sp, #4]
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	bf14      	ite	ne
 800af3e:	2102      	movne	r1, #2
 800af40:	2101      	moveq	r1, #1
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	6121      	str	r1, [r4, #16]
 800af46:	b1c5      	cbz	r5, 800af7a <__d2b+0x96>
 800af48:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af4c:	4405      	add	r5, r0
 800af4e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af52:	603d      	str	r5, [r7, #0]
 800af54:	6030      	str	r0, [r6, #0]
 800af56:	4620      	mov	r0, r4
 800af58:	b002      	add	sp, #8
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af62:	e7d6      	b.n	800af12 <__d2b+0x2e>
 800af64:	6161      	str	r1, [r4, #20]
 800af66:	e7e7      	b.n	800af38 <__d2b+0x54>
 800af68:	a801      	add	r0, sp, #4
 800af6a:	f7ff fd61 	bl	800aa30 <__lo0bits>
 800af6e:	2101      	movs	r1, #1
 800af70:	9b01      	ldr	r3, [sp, #4]
 800af72:	6121      	str	r1, [r4, #16]
 800af74:	6163      	str	r3, [r4, #20]
 800af76:	3020      	adds	r0, #32
 800af78:	e7e5      	b.n	800af46 <__d2b+0x62>
 800af7a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800af7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af82:	6038      	str	r0, [r7, #0]
 800af84:	6918      	ldr	r0, [r3, #16]
 800af86:	f7ff fd33 	bl	800a9f0 <__hi0bits>
 800af8a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800af8e:	6031      	str	r1, [r6, #0]
 800af90:	e7e1      	b.n	800af56 <__d2b+0x72>
 800af92:	bf00      	nop
 800af94:	0800c447 	.word	0x0800c447
 800af98:	0800c4b8 	.word	0x0800c4b8

0800af9c <_calloc_r>:
 800af9c:	b538      	push	{r3, r4, r5, lr}
 800af9e:	fb02 f501 	mul.w	r5, r2, r1
 800afa2:	4629      	mov	r1, r5
 800afa4:	f000 f854 	bl	800b050 <_malloc_r>
 800afa8:	4604      	mov	r4, r0
 800afaa:	b118      	cbz	r0, 800afb4 <_calloc_r+0x18>
 800afac:	462a      	mov	r2, r5
 800afae:	2100      	movs	r1, #0
 800afb0:	f7fd fdca 	bl	8008b48 <memset>
 800afb4:	4620      	mov	r0, r4
 800afb6:	bd38      	pop	{r3, r4, r5, pc}

0800afb8 <_free_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4605      	mov	r5, r0
 800afbc:	2900      	cmp	r1, #0
 800afbe:	d043      	beq.n	800b048 <_free_r+0x90>
 800afc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afc4:	1f0c      	subs	r4, r1, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bfb8      	it	lt
 800afca:	18e4      	addlt	r4, r4, r3
 800afcc:	f000 fc54 	bl	800b878 <__malloc_lock>
 800afd0:	4a1e      	ldr	r2, [pc, #120]	; (800b04c <_free_r+0x94>)
 800afd2:	6813      	ldr	r3, [r2, #0]
 800afd4:	4610      	mov	r0, r2
 800afd6:	b933      	cbnz	r3, 800afe6 <_free_r+0x2e>
 800afd8:	6063      	str	r3, [r4, #4]
 800afda:	6014      	str	r4, [r2, #0]
 800afdc:	4628      	mov	r0, r5
 800afde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afe2:	f000 bc4f 	b.w	800b884 <__malloc_unlock>
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	d90a      	bls.n	800b000 <_free_r+0x48>
 800afea:	6821      	ldr	r1, [r4, #0]
 800afec:	1862      	adds	r2, r4, r1
 800afee:	4293      	cmp	r3, r2
 800aff0:	bf01      	itttt	eq
 800aff2:	681a      	ldreq	r2, [r3, #0]
 800aff4:	685b      	ldreq	r3, [r3, #4]
 800aff6:	1852      	addeq	r2, r2, r1
 800aff8:	6022      	streq	r2, [r4, #0]
 800affa:	6063      	str	r3, [r4, #4]
 800affc:	6004      	str	r4, [r0, #0]
 800affe:	e7ed      	b.n	800afdc <_free_r+0x24>
 800b000:	461a      	mov	r2, r3
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	b10b      	cbz	r3, 800b00a <_free_r+0x52>
 800b006:	42a3      	cmp	r3, r4
 800b008:	d9fa      	bls.n	800b000 <_free_r+0x48>
 800b00a:	6811      	ldr	r1, [r2, #0]
 800b00c:	1850      	adds	r0, r2, r1
 800b00e:	42a0      	cmp	r0, r4
 800b010:	d10b      	bne.n	800b02a <_free_r+0x72>
 800b012:	6820      	ldr	r0, [r4, #0]
 800b014:	4401      	add	r1, r0
 800b016:	1850      	adds	r0, r2, r1
 800b018:	4283      	cmp	r3, r0
 800b01a:	6011      	str	r1, [r2, #0]
 800b01c:	d1de      	bne.n	800afdc <_free_r+0x24>
 800b01e:	6818      	ldr	r0, [r3, #0]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	4401      	add	r1, r0
 800b024:	6011      	str	r1, [r2, #0]
 800b026:	6053      	str	r3, [r2, #4]
 800b028:	e7d8      	b.n	800afdc <_free_r+0x24>
 800b02a:	d902      	bls.n	800b032 <_free_r+0x7a>
 800b02c:	230c      	movs	r3, #12
 800b02e:	602b      	str	r3, [r5, #0]
 800b030:	e7d4      	b.n	800afdc <_free_r+0x24>
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	1821      	adds	r1, r4, r0
 800b036:	428b      	cmp	r3, r1
 800b038:	bf01      	itttt	eq
 800b03a:	6819      	ldreq	r1, [r3, #0]
 800b03c:	685b      	ldreq	r3, [r3, #4]
 800b03e:	1809      	addeq	r1, r1, r0
 800b040:	6021      	streq	r1, [r4, #0]
 800b042:	6063      	str	r3, [r4, #4]
 800b044:	6054      	str	r4, [r2, #4]
 800b046:	e7c9      	b.n	800afdc <_free_r+0x24>
 800b048:	bd38      	pop	{r3, r4, r5, pc}
 800b04a:	bf00      	nop
 800b04c:	20000544 	.word	0x20000544

0800b050 <_malloc_r>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	1ccd      	adds	r5, r1, #3
 800b054:	f025 0503 	bic.w	r5, r5, #3
 800b058:	3508      	adds	r5, #8
 800b05a:	2d0c      	cmp	r5, #12
 800b05c:	bf38      	it	cc
 800b05e:	250c      	movcc	r5, #12
 800b060:	2d00      	cmp	r5, #0
 800b062:	4606      	mov	r6, r0
 800b064:	db01      	blt.n	800b06a <_malloc_r+0x1a>
 800b066:	42a9      	cmp	r1, r5
 800b068:	d903      	bls.n	800b072 <_malloc_r+0x22>
 800b06a:	230c      	movs	r3, #12
 800b06c:	6033      	str	r3, [r6, #0]
 800b06e:	2000      	movs	r0, #0
 800b070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b072:	f000 fc01 	bl	800b878 <__malloc_lock>
 800b076:	4921      	ldr	r1, [pc, #132]	; (800b0fc <_malloc_r+0xac>)
 800b078:	680a      	ldr	r2, [r1, #0]
 800b07a:	4614      	mov	r4, r2
 800b07c:	b99c      	cbnz	r4, 800b0a6 <_malloc_r+0x56>
 800b07e:	4f20      	ldr	r7, [pc, #128]	; (800b100 <_malloc_r+0xb0>)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	b923      	cbnz	r3, 800b08e <_malloc_r+0x3e>
 800b084:	4621      	mov	r1, r4
 800b086:	4630      	mov	r0, r6
 800b088:	f000 faf0 	bl	800b66c <_sbrk_r>
 800b08c:	6038      	str	r0, [r7, #0]
 800b08e:	4629      	mov	r1, r5
 800b090:	4630      	mov	r0, r6
 800b092:	f000 faeb 	bl	800b66c <_sbrk_r>
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	d123      	bne.n	800b0e2 <_malloc_r+0x92>
 800b09a:	230c      	movs	r3, #12
 800b09c:	4630      	mov	r0, r6
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	f000 fbf0 	bl	800b884 <__malloc_unlock>
 800b0a4:	e7e3      	b.n	800b06e <_malloc_r+0x1e>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	1b5b      	subs	r3, r3, r5
 800b0aa:	d417      	bmi.n	800b0dc <_malloc_r+0x8c>
 800b0ac:	2b0b      	cmp	r3, #11
 800b0ae:	d903      	bls.n	800b0b8 <_malloc_r+0x68>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	441c      	add	r4, r3
 800b0b4:	6025      	str	r5, [r4, #0]
 800b0b6:	e004      	b.n	800b0c2 <_malloc_r+0x72>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	42a2      	cmp	r2, r4
 800b0bc:	bf0c      	ite	eq
 800b0be:	600b      	streq	r3, [r1, #0]
 800b0c0:	6053      	strne	r3, [r2, #4]
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 fbde 	bl	800b884 <__malloc_unlock>
 800b0c8:	f104 000b 	add.w	r0, r4, #11
 800b0cc:	1d23      	adds	r3, r4, #4
 800b0ce:	f020 0007 	bic.w	r0, r0, #7
 800b0d2:	1ac2      	subs	r2, r0, r3
 800b0d4:	d0cc      	beq.n	800b070 <_malloc_r+0x20>
 800b0d6:	1a1b      	subs	r3, r3, r0
 800b0d8:	50a3      	str	r3, [r4, r2]
 800b0da:	e7c9      	b.n	800b070 <_malloc_r+0x20>
 800b0dc:	4622      	mov	r2, r4
 800b0de:	6864      	ldr	r4, [r4, #4]
 800b0e0:	e7cc      	b.n	800b07c <_malloc_r+0x2c>
 800b0e2:	1cc4      	adds	r4, r0, #3
 800b0e4:	f024 0403 	bic.w	r4, r4, #3
 800b0e8:	42a0      	cmp	r0, r4
 800b0ea:	d0e3      	beq.n	800b0b4 <_malloc_r+0x64>
 800b0ec:	1a21      	subs	r1, r4, r0
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 fabc 	bl	800b66c <_sbrk_r>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d1dd      	bne.n	800b0b4 <_malloc_r+0x64>
 800b0f8:	e7cf      	b.n	800b09a <_malloc_r+0x4a>
 800b0fa:	bf00      	nop
 800b0fc:	20000544 	.word	0x20000544
 800b100:	20000548 	.word	0x20000548

0800b104 <__ssputs_r>:
 800b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b108:	688e      	ldr	r6, [r1, #8]
 800b10a:	4682      	mov	sl, r0
 800b10c:	429e      	cmp	r6, r3
 800b10e:	460c      	mov	r4, r1
 800b110:	4690      	mov	r8, r2
 800b112:	461f      	mov	r7, r3
 800b114:	d838      	bhi.n	800b188 <__ssputs_r+0x84>
 800b116:	898a      	ldrh	r2, [r1, #12]
 800b118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b11c:	d032      	beq.n	800b184 <__ssputs_r+0x80>
 800b11e:	6825      	ldr	r5, [r4, #0]
 800b120:	6909      	ldr	r1, [r1, #16]
 800b122:	3301      	adds	r3, #1
 800b124:	eba5 0901 	sub.w	r9, r5, r1
 800b128:	6965      	ldr	r5, [r4, #20]
 800b12a:	444b      	add	r3, r9
 800b12c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b134:	106d      	asrs	r5, r5, #1
 800b136:	429d      	cmp	r5, r3
 800b138:	bf38      	it	cc
 800b13a:	461d      	movcc	r5, r3
 800b13c:	0553      	lsls	r3, r2, #21
 800b13e:	d531      	bpl.n	800b1a4 <__ssputs_r+0xa0>
 800b140:	4629      	mov	r1, r5
 800b142:	f7ff ff85 	bl	800b050 <_malloc_r>
 800b146:	4606      	mov	r6, r0
 800b148:	b950      	cbnz	r0, 800b160 <__ssputs_r+0x5c>
 800b14a:	230c      	movs	r3, #12
 800b14c:	f04f 30ff 	mov.w	r0, #4294967295
 800b150:	f8ca 3000 	str.w	r3, [sl]
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b160:	464a      	mov	r2, r9
 800b162:	6921      	ldr	r1, [r4, #16]
 800b164:	f7fd fce2 	bl	8008b2c <memcpy>
 800b168:	89a3      	ldrh	r3, [r4, #12]
 800b16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	6126      	str	r6, [r4, #16]
 800b176:	444e      	add	r6, r9
 800b178:	6026      	str	r6, [r4, #0]
 800b17a:	463e      	mov	r6, r7
 800b17c:	6165      	str	r5, [r4, #20]
 800b17e:	eba5 0509 	sub.w	r5, r5, r9
 800b182:	60a5      	str	r5, [r4, #8]
 800b184:	42be      	cmp	r6, r7
 800b186:	d900      	bls.n	800b18a <__ssputs_r+0x86>
 800b188:	463e      	mov	r6, r7
 800b18a:	4632      	mov	r2, r6
 800b18c:	4641      	mov	r1, r8
 800b18e:	6820      	ldr	r0, [r4, #0]
 800b190:	f000 fb58 	bl	800b844 <memmove>
 800b194:	68a3      	ldr	r3, [r4, #8]
 800b196:	6822      	ldr	r2, [r4, #0]
 800b198:	1b9b      	subs	r3, r3, r6
 800b19a:	4432      	add	r2, r6
 800b19c:	2000      	movs	r0, #0
 800b19e:	60a3      	str	r3, [r4, #8]
 800b1a0:	6022      	str	r2, [r4, #0]
 800b1a2:	e7db      	b.n	800b15c <__ssputs_r+0x58>
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	f000 fb73 	bl	800b890 <_realloc_r>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d1e1      	bne.n	800b174 <__ssputs_r+0x70>
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	6921      	ldr	r1, [r4, #16]
 800b1b4:	f7ff ff00 	bl	800afb8 <_free_r>
 800b1b8:	e7c7      	b.n	800b14a <__ssputs_r+0x46>
	...

0800b1bc <_svfiprintf_r>:
 800b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c0:	4698      	mov	r8, r3
 800b1c2:	898b      	ldrh	r3, [r1, #12]
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	061b      	lsls	r3, r3, #24
 800b1c8:	460d      	mov	r5, r1
 800b1ca:	4614      	mov	r4, r2
 800b1cc:	b09d      	sub	sp, #116	; 0x74
 800b1ce:	d50e      	bpl.n	800b1ee <_svfiprintf_r+0x32>
 800b1d0:	690b      	ldr	r3, [r1, #16]
 800b1d2:	b963      	cbnz	r3, 800b1ee <_svfiprintf_r+0x32>
 800b1d4:	2140      	movs	r1, #64	; 0x40
 800b1d6:	f7ff ff3b 	bl	800b050 <_malloc_r>
 800b1da:	6028      	str	r0, [r5, #0]
 800b1dc:	6128      	str	r0, [r5, #16]
 800b1de:	b920      	cbnz	r0, 800b1ea <_svfiprintf_r+0x2e>
 800b1e0:	230c      	movs	r3, #12
 800b1e2:	603b      	str	r3, [r7, #0]
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	e0d1      	b.n	800b38e <_svfiprintf_r+0x1d2>
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	616b      	str	r3, [r5, #20]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1f8:	2330      	movs	r3, #48	; 0x30
 800b1fa:	f04f 0901 	mov.w	r9, #1
 800b1fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b202:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b3a8 <_svfiprintf_r+0x1ec>
 800b206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b20a:	4623      	mov	r3, r4
 800b20c:	469a      	mov	sl, r3
 800b20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b212:	b10a      	cbz	r2, 800b218 <_svfiprintf_r+0x5c>
 800b214:	2a25      	cmp	r2, #37	; 0x25
 800b216:	d1f9      	bne.n	800b20c <_svfiprintf_r+0x50>
 800b218:	ebba 0b04 	subs.w	fp, sl, r4
 800b21c:	d00b      	beq.n	800b236 <_svfiprintf_r+0x7a>
 800b21e:	465b      	mov	r3, fp
 800b220:	4622      	mov	r2, r4
 800b222:	4629      	mov	r1, r5
 800b224:	4638      	mov	r0, r7
 800b226:	f7ff ff6d 	bl	800b104 <__ssputs_r>
 800b22a:	3001      	adds	r0, #1
 800b22c:	f000 80aa 	beq.w	800b384 <_svfiprintf_r+0x1c8>
 800b230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b232:	445a      	add	r2, fp
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	f89a 3000 	ldrb.w	r3, [sl]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80a2 	beq.w	800b384 <_svfiprintf_r+0x1c8>
 800b240:	2300      	movs	r3, #0
 800b242:	f04f 32ff 	mov.w	r2, #4294967295
 800b246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b24a:	f10a 0a01 	add.w	sl, sl, #1
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	9307      	str	r3, [sp, #28]
 800b252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b256:	931a      	str	r3, [sp, #104]	; 0x68
 800b258:	4654      	mov	r4, sl
 800b25a:	2205      	movs	r2, #5
 800b25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b260:	4851      	ldr	r0, [pc, #324]	; (800b3a8 <_svfiprintf_r+0x1ec>)
 800b262:	f7ff fb0b 	bl	800a87c <memchr>
 800b266:	9a04      	ldr	r2, [sp, #16]
 800b268:	b9d8      	cbnz	r0, 800b2a2 <_svfiprintf_r+0xe6>
 800b26a:	06d0      	lsls	r0, r2, #27
 800b26c:	bf44      	itt	mi
 800b26e:	2320      	movmi	r3, #32
 800b270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b274:	0711      	lsls	r1, r2, #28
 800b276:	bf44      	itt	mi
 800b278:	232b      	movmi	r3, #43	; 0x2b
 800b27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b27e:	f89a 3000 	ldrb.w	r3, [sl]
 800b282:	2b2a      	cmp	r3, #42	; 0x2a
 800b284:	d015      	beq.n	800b2b2 <_svfiprintf_r+0xf6>
 800b286:	4654      	mov	r4, sl
 800b288:	2000      	movs	r0, #0
 800b28a:	f04f 0c0a 	mov.w	ip, #10
 800b28e:	9a07      	ldr	r2, [sp, #28]
 800b290:	4621      	mov	r1, r4
 800b292:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b296:	3b30      	subs	r3, #48	; 0x30
 800b298:	2b09      	cmp	r3, #9
 800b29a:	d94e      	bls.n	800b33a <_svfiprintf_r+0x17e>
 800b29c:	b1b0      	cbz	r0, 800b2cc <_svfiprintf_r+0x110>
 800b29e:	9207      	str	r2, [sp, #28]
 800b2a0:	e014      	b.n	800b2cc <_svfiprintf_r+0x110>
 800b2a2:	eba0 0308 	sub.w	r3, r0, r8
 800b2a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	46a2      	mov	sl, r4
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	e7d2      	b.n	800b258 <_svfiprintf_r+0x9c>
 800b2b2:	9b03      	ldr	r3, [sp, #12]
 800b2b4:	1d19      	adds	r1, r3, #4
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	9103      	str	r1, [sp, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	bfbb      	ittet	lt
 800b2be:	425b      	neglt	r3, r3
 800b2c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c4:	9307      	strge	r3, [sp, #28]
 800b2c6:	9307      	strlt	r3, [sp, #28]
 800b2c8:	bfb8      	it	lt
 800b2ca:	9204      	strlt	r2, [sp, #16]
 800b2cc:	7823      	ldrb	r3, [r4, #0]
 800b2ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d0:	d10c      	bne.n	800b2ec <_svfiprintf_r+0x130>
 800b2d2:	7863      	ldrb	r3, [r4, #1]
 800b2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d6:	d135      	bne.n	800b344 <_svfiprintf_r+0x188>
 800b2d8:	9b03      	ldr	r3, [sp, #12]
 800b2da:	3402      	adds	r4, #2
 800b2dc:	1d1a      	adds	r2, r3, #4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	9203      	str	r2, [sp, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bfb8      	it	lt
 800b2e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2ea:	9305      	str	r3, [sp, #20]
 800b2ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3b8 <_svfiprintf_r+0x1fc>
 800b2f0:	2203      	movs	r2, #3
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	7821      	ldrb	r1, [r4, #0]
 800b2f6:	f7ff fac1 	bl	800a87c <memchr>
 800b2fa:	b140      	cbz	r0, 800b30e <_svfiprintf_r+0x152>
 800b2fc:	2340      	movs	r3, #64	; 0x40
 800b2fe:	eba0 000a 	sub.w	r0, r0, sl
 800b302:	fa03 f000 	lsl.w	r0, r3, r0
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	3401      	adds	r4, #1
 800b30a:	4303      	orrs	r3, r0
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b312:	2206      	movs	r2, #6
 800b314:	4825      	ldr	r0, [pc, #148]	; (800b3ac <_svfiprintf_r+0x1f0>)
 800b316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b31a:	f7ff faaf 	bl	800a87c <memchr>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d038      	beq.n	800b394 <_svfiprintf_r+0x1d8>
 800b322:	4b23      	ldr	r3, [pc, #140]	; (800b3b0 <_svfiprintf_r+0x1f4>)
 800b324:	bb1b      	cbnz	r3, 800b36e <_svfiprintf_r+0x1b2>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	3307      	adds	r3, #7
 800b32a:	f023 0307 	bic.w	r3, r3, #7
 800b32e:	3308      	adds	r3, #8
 800b330:	9303      	str	r3, [sp, #12]
 800b332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b334:	4433      	add	r3, r6
 800b336:	9309      	str	r3, [sp, #36]	; 0x24
 800b338:	e767      	b.n	800b20a <_svfiprintf_r+0x4e>
 800b33a:	460c      	mov	r4, r1
 800b33c:	2001      	movs	r0, #1
 800b33e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b342:	e7a5      	b.n	800b290 <_svfiprintf_r+0xd4>
 800b344:	2300      	movs	r3, #0
 800b346:	f04f 0c0a 	mov.w	ip, #10
 800b34a:	4619      	mov	r1, r3
 800b34c:	3401      	adds	r4, #1
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	4620      	mov	r0, r4
 800b352:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b356:	3a30      	subs	r2, #48	; 0x30
 800b358:	2a09      	cmp	r2, #9
 800b35a:	d903      	bls.n	800b364 <_svfiprintf_r+0x1a8>
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d0c5      	beq.n	800b2ec <_svfiprintf_r+0x130>
 800b360:	9105      	str	r1, [sp, #20]
 800b362:	e7c3      	b.n	800b2ec <_svfiprintf_r+0x130>
 800b364:	4604      	mov	r4, r0
 800b366:	2301      	movs	r3, #1
 800b368:	fb0c 2101 	mla	r1, ip, r1, r2
 800b36c:	e7f0      	b.n	800b350 <_svfiprintf_r+0x194>
 800b36e:	ab03      	add	r3, sp, #12
 800b370:	9300      	str	r3, [sp, #0]
 800b372:	462a      	mov	r2, r5
 800b374:	4638      	mov	r0, r7
 800b376:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <_svfiprintf_r+0x1f8>)
 800b378:	a904      	add	r1, sp, #16
 800b37a:	f7fd fc8b 	bl	8008c94 <_printf_float>
 800b37e:	1c42      	adds	r2, r0, #1
 800b380:	4606      	mov	r6, r0
 800b382:	d1d6      	bne.n	800b332 <_svfiprintf_r+0x176>
 800b384:	89ab      	ldrh	r3, [r5, #12]
 800b386:	065b      	lsls	r3, r3, #25
 800b388:	f53f af2c 	bmi.w	800b1e4 <_svfiprintf_r+0x28>
 800b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38e:	b01d      	add	sp, #116	; 0x74
 800b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b394:	ab03      	add	r3, sp, #12
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	462a      	mov	r2, r5
 800b39a:	4638      	mov	r0, r7
 800b39c:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <_svfiprintf_r+0x1f8>)
 800b39e:	a904      	add	r1, sp, #16
 800b3a0:	f7fd ff14 	bl	80091cc <_printf_i>
 800b3a4:	e7eb      	b.n	800b37e <_svfiprintf_r+0x1c2>
 800b3a6:	bf00      	nop
 800b3a8:	0800c614 	.word	0x0800c614
 800b3ac:	0800c61e 	.word	0x0800c61e
 800b3b0:	08008c95 	.word	0x08008c95
 800b3b4:	0800b105 	.word	0x0800b105
 800b3b8:	0800c61a 	.word	0x0800c61a

0800b3bc <__sfputc_r>:
 800b3bc:	6893      	ldr	r3, [r2, #8]
 800b3be:	b410      	push	{r4}
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	6093      	str	r3, [r2, #8]
 800b3c6:	da07      	bge.n	800b3d8 <__sfputc_r+0x1c>
 800b3c8:	6994      	ldr	r4, [r2, #24]
 800b3ca:	42a3      	cmp	r3, r4
 800b3cc:	db01      	blt.n	800b3d2 <__sfputc_r+0x16>
 800b3ce:	290a      	cmp	r1, #10
 800b3d0:	d102      	bne.n	800b3d8 <__sfputc_r+0x1c>
 800b3d2:	bc10      	pop	{r4}
 800b3d4:	f7fe b8e8 	b.w	80095a8 <__swbuf_r>
 800b3d8:	6813      	ldr	r3, [r2, #0]
 800b3da:	1c58      	adds	r0, r3, #1
 800b3dc:	6010      	str	r0, [r2, #0]
 800b3de:	7019      	strb	r1, [r3, #0]
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	bc10      	pop	{r4}
 800b3e4:	4770      	bx	lr

0800b3e6 <__sfputs_r>:
 800b3e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	460f      	mov	r7, r1
 800b3ec:	4614      	mov	r4, r2
 800b3ee:	18d5      	adds	r5, r2, r3
 800b3f0:	42ac      	cmp	r4, r5
 800b3f2:	d101      	bne.n	800b3f8 <__sfputs_r+0x12>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e007      	b.n	800b408 <__sfputs_r+0x22>
 800b3f8:	463a      	mov	r2, r7
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b400:	f7ff ffdc 	bl	800b3bc <__sfputc_r>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	d1f3      	bne.n	800b3f0 <__sfputs_r+0xa>
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b40c <_vfiprintf_r>:
 800b40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b410:	460d      	mov	r5, r1
 800b412:	4614      	mov	r4, r2
 800b414:	4698      	mov	r8, r3
 800b416:	4606      	mov	r6, r0
 800b418:	b09d      	sub	sp, #116	; 0x74
 800b41a:	b118      	cbz	r0, 800b424 <_vfiprintf_r+0x18>
 800b41c:	6983      	ldr	r3, [r0, #24]
 800b41e:	b90b      	cbnz	r3, 800b424 <_vfiprintf_r+0x18>
 800b420:	f7ff f91a 	bl	800a658 <__sinit>
 800b424:	4b89      	ldr	r3, [pc, #548]	; (800b64c <_vfiprintf_r+0x240>)
 800b426:	429d      	cmp	r5, r3
 800b428:	d11b      	bne.n	800b462 <_vfiprintf_r+0x56>
 800b42a:	6875      	ldr	r5, [r6, #4]
 800b42c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b42e:	07d9      	lsls	r1, r3, #31
 800b430:	d405      	bmi.n	800b43e <_vfiprintf_r+0x32>
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	059a      	lsls	r2, r3, #22
 800b436:	d402      	bmi.n	800b43e <_vfiprintf_r+0x32>
 800b438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b43a:	f7ff f9b0 	bl	800a79e <__retarget_lock_acquire_recursive>
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	071b      	lsls	r3, r3, #28
 800b442:	d501      	bpl.n	800b448 <_vfiprintf_r+0x3c>
 800b444:	692b      	ldr	r3, [r5, #16]
 800b446:	b9eb      	cbnz	r3, 800b484 <_vfiprintf_r+0x78>
 800b448:	4629      	mov	r1, r5
 800b44a:	4630      	mov	r0, r6
 800b44c:	f7fe f8fe 	bl	800964c <__swsetup_r>
 800b450:	b1c0      	cbz	r0, 800b484 <_vfiprintf_r+0x78>
 800b452:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b454:	07dc      	lsls	r4, r3, #31
 800b456:	d50e      	bpl.n	800b476 <_vfiprintf_r+0x6a>
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	b01d      	add	sp, #116	; 0x74
 800b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b462:	4b7b      	ldr	r3, [pc, #492]	; (800b650 <_vfiprintf_r+0x244>)
 800b464:	429d      	cmp	r5, r3
 800b466:	d101      	bne.n	800b46c <_vfiprintf_r+0x60>
 800b468:	68b5      	ldr	r5, [r6, #8]
 800b46a:	e7df      	b.n	800b42c <_vfiprintf_r+0x20>
 800b46c:	4b79      	ldr	r3, [pc, #484]	; (800b654 <_vfiprintf_r+0x248>)
 800b46e:	429d      	cmp	r5, r3
 800b470:	bf08      	it	eq
 800b472:	68f5      	ldreq	r5, [r6, #12]
 800b474:	e7da      	b.n	800b42c <_vfiprintf_r+0x20>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	0598      	lsls	r0, r3, #22
 800b47a:	d4ed      	bmi.n	800b458 <_vfiprintf_r+0x4c>
 800b47c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b47e:	f7ff f98f 	bl	800a7a0 <__retarget_lock_release_recursive>
 800b482:	e7e9      	b.n	800b458 <_vfiprintf_r+0x4c>
 800b484:	2300      	movs	r3, #0
 800b486:	9309      	str	r3, [sp, #36]	; 0x24
 800b488:	2320      	movs	r3, #32
 800b48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b48e:	2330      	movs	r3, #48	; 0x30
 800b490:	f04f 0901 	mov.w	r9, #1
 800b494:	f8cd 800c 	str.w	r8, [sp, #12]
 800b498:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b658 <_vfiprintf_r+0x24c>
 800b49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	469a      	mov	sl, r3
 800b4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a8:	b10a      	cbz	r2, 800b4ae <_vfiprintf_r+0xa2>
 800b4aa:	2a25      	cmp	r2, #37	; 0x25
 800b4ac:	d1f9      	bne.n	800b4a2 <_vfiprintf_r+0x96>
 800b4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b2:	d00b      	beq.n	800b4cc <_vfiprintf_r+0xc0>
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ff93 	bl	800b3e6 <__sfputs_r>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	f000 80aa 	beq.w	800b61a <_vfiprintf_r+0x20e>
 800b4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c8:	445a      	add	r2, fp
 800b4ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80a2 	beq.w	800b61a <_vfiprintf_r+0x20e>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e0:	f10a 0a01 	add.w	sl, sl, #1
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	9307      	str	r3, [sp, #28]
 800b4e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	2205      	movs	r2, #5
 800b4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f6:	4858      	ldr	r0, [pc, #352]	; (800b658 <_vfiprintf_r+0x24c>)
 800b4f8:	f7ff f9c0 	bl	800a87c <memchr>
 800b4fc:	9a04      	ldr	r2, [sp, #16]
 800b4fe:	b9d8      	cbnz	r0, 800b538 <_vfiprintf_r+0x12c>
 800b500:	06d1      	lsls	r1, r2, #27
 800b502:	bf44      	itt	mi
 800b504:	2320      	movmi	r3, #32
 800b506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50a:	0713      	lsls	r3, r2, #28
 800b50c:	bf44      	itt	mi
 800b50e:	232b      	movmi	r3, #43	; 0x2b
 800b510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b514:	f89a 3000 	ldrb.w	r3, [sl]
 800b518:	2b2a      	cmp	r3, #42	; 0x2a
 800b51a:	d015      	beq.n	800b548 <_vfiprintf_r+0x13c>
 800b51c:	4654      	mov	r4, sl
 800b51e:	2000      	movs	r0, #0
 800b520:	f04f 0c0a 	mov.w	ip, #10
 800b524:	9a07      	ldr	r2, [sp, #28]
 800b526:	4621      	mov	r1, r4
 800b528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b52c:	3b30      	subs	r3, #48	; 0x30
 800b52e:	2b09      	cmp	r3, #9
 800b530:	d94e      	bls.n	800b5d0 <_vfiprintf_r+0x1c4>
 800b532:	b1b0      	cbz	r0, 800b562 <_vfiprintf_r+0x156>
 800b534:	9207      	str	r2, [sp, #28]
 800b536:	e014      	b.n	800b562 <_vfiprintf_r+0x156>
 800b538:	eba0 0308 	sub.w	r3, r0, r8
 800b53c:	fa09 f303 	lsl.w	r3, r9, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	46a2      	mov	sl, r4
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	e7d2      	b.n	800b4ee <_vfiprintf_r+0xe2>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	1d19      	adds	r1, r3, #4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	9103      	str	r1, [sp, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfbb      	ittet	lt
 800b554:	425b      	neglt	r3, r3
 800b556:	f042 0202 	orrlt.w	r2, r2, #2
 800b55a:	9307      	strge	r3, [sp, #28]
 800b55c:	9307      	strlt	r3, [sp, #28]
 800b55e:	bfb8      	it	lt
 800b560:	9204      	strlt	r2, [sp, #16]
 800b562:	7823      	ldrb	r3, [r4, #0]
 800b564:	2b2e      	cmp	r3, #46	; 0x2e
 800b566:	d10c      	bne.n	800b582 <_vfiprintf_r+0x176>
 800b568:	7863      	ldrb	r3, [r4, #1]
 800b56a:	2b2a      	cmp	r3, #42	; 0x2a
 800b56c:	d135      	bne.n	800b5da <_vfiprintf_r+0x1ce>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	3402      	adds	r4, #2
 800b572:	1d1a      	adds	r2, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	9203      	str	r2, [sp, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bfb8      	it	lt
 800b57c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b668 <_vfiprintf_r+0x25c>
 800b586:	2203      	movs	r2, #3
 800b588:	4650      	mov	r0, sl
 800b58a:	7821      	ldrb	r1, [r4, #0]
 800b58c:	f7ff f976 	bl	800a87c <memchr>
 800b590:	b140      	cbz	r0, 800b5a4 <_vfiprintf_r+0x198>
 800b592:	2340      	movs	r3, #64	; 0x40
 800b594:	eba0 000a 	sub.w	r0, r0, sl
 800b598:	fa03 f000 	lsl.w	r0, r3, r0
 800b59c:	9b04      	ldr	r3, [sp, #16]
 800b59e:	3401      	adds	r4, #1
 800b5a0:	4303      	orrs	r3, r0
 800b5a2:	9304      	str	r3, [sp, #16]
 800b5a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a8:	2206      	movs	r2, #6
 800b5aa:	482c      	ldr	r0, [pc, #176]	; (800b65c <_vfiprintf_r+0x250>)
 800b5ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5b0:	f7ff f964 	bl	800a87c <memchr>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d03f      	beq.n	800b638 <_vfiprintf_r+0x22c>
 800b5b8:	4b29      	ldr	r3, [pc, #164]	; (800b660 <_vfiprintf_r+0x254>)
 800b5ba:	bb1b      	cbnz	r3, 800b604 <_vfiprintf_r+0x1f8>
 800b5bc:	9b03      	ldr	r3, [sp, #12]
 800b5be:	3307      	adds	r3, #7
 800b5c0:	f023 0307 	bic.w	r3, r3, #7
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	9303      	str	r3, [sp, #12]
 800b5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ca:	443b      	add	r3, r7
 800b5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ce:	e767      	b.n	800b4a0 <_vfiprintf_r+0x94>
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d8:	e7a5      	b.n	800b526 <_vfiprintf_r+0x11a>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f04f 0c0a 	mov.w	ip, #10
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	3401      	adds	r4, #1
 800b5e4:	9305      	str	r3, [sp, #20]
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ec:	3a30      	subs	r2, #48	; 0x30
 800b5ee:	2a09      	cmp	r2, #9
 800b5f0:	d903      	bls.n	800b5fa <_vfiprintf_r+0x1ee>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0c5      	beq.n	800b582 <_vfiprintf_r+0x176>
 800b5f6:	9105      	str	r1, [sp, #20]
 800b5f8:	e7c3      	b.n	800b582 <_vfiprintf_r+0x176>
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b602:	e7f0      	b.n	800b5e6 <_vfiprintf_r+0x1da>
 800b604:	ab03      	add	r3, sp, #12
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	462a      	mov	r2, r5
 800b60a:	4630      	mov	r0, r6
 800b60c:	4b15      	ldr	r3, [pc, #84]	; (800b664 <_vfiprintf_r+0x258>)
 800b60e:	a904      	add	r1, sp, #16
 800b610:	f7fd fb40 	bl	8008c94 <_printf_float>
 800b614:	4607      	mov	r7, r0
 800b616:	1c78      	adds	r0, r7, #1
 800b618:	d1d6      	bne.n	800b5c8 <_vfiprintf_r+0x1bc>
 800b61a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b61c:	07d9      	lsls	r1, r3, #31
 800b61e:	d405      	bmi.n	800b62c <_vfiprintf_r+0x220>
 800b620:	89ab      	ldrh	r3, [r5, #12]
 800b622:	059a      	lsls	r2, r3, #22
 800b624:	d402      	bmi.n	800b62c <_vfiprintf_r+0x220>
 800b626:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b628:	f7ff f8ba 	bl	800a7a0 <__retarget_lock_release_recursive>
 800b62c:	89ab      	ldrh	r3, [r5, #12]
 800b62e:	065b      	lsls	r3, r3, #25
 800b630:	f53f af12 	bmi.w	800b458 <_vfiprintf_r+0x4c>
 800b634:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b636:	e711      	b.n	800b45c <_vfiprintf_r+0x50>
 800b638:	ab03      	add	r3, sp, #12
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	462a      	mov	r2, r5
 800b63e:	4630      	mov	r0, r6
 800b640:	4b08      	ldr	r3, [pc, #32]	; (800b664 <_vfiprintf_r+0x258>)
 800b642:	a904      	add	r1, sp, #16
 800b644:	f7fd fdc2 	bl	80091cc <_printf_i>
 800b648:	e7e4      	b.n	800b614 <_vfiprintf_r+0x208>
 800b64a:	bf00      	nop
 800b64c:	0800c478 	.word	0x0800c478
 800b650:	0800c498 	.word	0x0800c498
 800b654:	0800c458 	.word	0x0800c458
 800b658:	0800c614 	.word	0x0800c614
 800b65c:	0800c61e 	.word	0x0800c61e
 800b660:	08008c95 	.word	0x08008c95
 800b664:	0800b3e7 	.word	0x0800b3e7
 800b668:	0800c61a 	.word	0x0800c61a

0800b66c <_sbrk_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	2300      	movs	r3, #0
 800b670:	4d05      	ldr	r5, [pc, #20]	; (800b688 <_sbrk_r+0x1c>)
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	602b      	str	r3, [r5, #0]
 800b678:	f7f5 fff0 	bl	800165c <_sbrk>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_sbrk_r+0x1a>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_sbrk_r+0x1a>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	20004790 	.word	0x20004790

0800b68c <__sread>:
 800b68c:	b510      	push	{r4, lr}
 800b68e:	460c      	mov	r4, r1
 800b690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b694:	f000 f922 	bl	800b8dc <_read_r>
 800b698:	2800      	cmp	r0, #0
 800b69a:	bfab      	itete	ge
 800b69c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b69e:	89a3      	ldrhlt	r3, [r4, #12]
 800b6a0:	181b      	addge	r3, r3, r0
 800b6a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6a6:	bfac      	ite	ge
 800b6a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6aa:	81a3      	strhlt	r3, [r4, #12]
 800b6ac:	bd10      	pop	{r4, pc}

0800b6ae <__swrite>:
 800b6ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b2:	461f      	mov	r7, r3
 800b6b4:	898b      	ldrh	r3, [r1, #12]
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	05db      	lsls	r3, r3, #23
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	4616      	mov	r6, r2
 800b6be:	d505      	bpl.n	800b6cc <__swrite+0x1e>
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c8:	f000 f898 	bl	800b7fc <_lseek_r>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	4632      	mov	r2, r6
 800b6d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	463b      	mov	r3, r7
 800b6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e2:	f000 b817 	b.w	800b714 <_write_r>

0800b6e6 <__sseek>:
 800b6e6:	b510      	push	{r4, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ee:	f000 f885 	bl	800b7fc <_lseek_r>
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	bf15      	itete	ne
 800b6f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b702:	81a3      	strheq	r3, [r4, #12]
 800b704:	bf18      	it	ne
 800b706:	81a3      	strhne	r3, [r4, #12]
 800b708:	bd10      	pop	{r4, pc}

0800b70a <__sclose>:
 800b70a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70e:	f000 b831 	b.w	800b774 <_close_r>
	...

0800b714 <_write_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4604      	mov	r4, r0
 800b718:	4608      	mov	r0, r1
 800b71a:	4611      	mov	r1, r2
 800b71c:	2200      	movs	r2, #0
 800b71e:	4d05      	ldr	r5, [pc, #20]	; (800b734 <_write_r+0x20>)
 800b720:	602a      	str	r2, [r5, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	f7f5 ff4d 	bl	80015c2 <_write>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_write_r+0x1e>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_write_r+0x1e>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	20004790 	.word	0x20004790

0800b738 <__assert_func>:
 800b738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b73a:	4614      	mov	r4, r2
 800b73c:	461a      	mov	r2, r3
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <__assert_func+0x2c>)
 800b740:	4605      	mov	r5, r0
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68d8      	ldr	r0, [r3, #12]
 800b746:	b14c      	cbz	r4, 800b75c <__assert_func+0x24>
 800b748:	4b07      	ldr	r3, [pc, #28]	; (800b768 <__assert_func+0x30>)
 800b74a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b74e:	9100      	str	r1, [sp, #0]
 800b750:	462b      	mov	r3, r5
 800b752:	4906      	ldr	r1, [pc, #24]	; (800b76c <__assert_func+0x34>)
 800b754:	f000 f81e 	bl	800b794 <fiprintf>
 800b758:	f000 f8df 	bl	800b91a <abort>
 800b75c:	4b04      	ldr	r3, [pc, #16]	; (800b770 <__assert_func+0x38>)
 800b75e:	461c      	mov	r4, r3
 800b760:	e7f3      	b.n	800b74a <__assert_func+0x12>
 800b762:	bf00      	nop
 800b764:	20000024 	.word	0x20000024
 800b768:	0800c625 	.word	0x0800c625
 800b76c:	0800c632 	.word	0x0800c632
 800b770:	0800c660 	.word	0x0800c660

0800b774 <_close_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	2300      	movs	r3, #0
 800b778:	4d05      	ldr	r5, [pc, #20]	; (800b790 <_close_r+0x1c>)
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	602b      	str	r3, [r5, #0]
 800b780:	f7f5 ff3b 	bl	80015fa <_close>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_close_r+0x1a>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_close_r+0x1a>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	20004790 	.word	0x20004790

0800b794 <fiprintf>:
 800b794:	b40e      	push	{r1, r2, r3}
 800b796:	b503      	push	{r0, r1, lr}
 800b798:	4601      	mov	r1, r0
 800b79a:	ab03      	add	r3, sp, #12
 800b79c:	4805      	ldr	r0, [pc, #20]	; (800b7b4 <fiprintf+0x20>)
 800b79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7a2:	6800      	ldr	r0, [r0, #0]
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	f7ff fe31 	bl	800b40c <_vfiprintf_r>
 800b7aa:	b002      	add	sp, #8
 800b7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7b0:	b003      	add	sp, #12
 800b7b2:	4770      	bx	lr
 800b7b4:	20000024 	.word	0x20000024

0800b7b8 <_fstat_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4d06      	ldr	r5, [pc, #24]	; (800b7d8 <_fstat_r+0x20>)
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	f7f5 ff23 	bl	8001610 <_fstat>
 800b7ca:	1c43      	adds	r3, r0, #1
 800b7cc:	d102      	bne.n	800b7d4 <_fstat_r+0x1c>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	b103      	cbz	r3, 800b7d4 <_fstat_r+0x1c>
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	bd38      	pop	{r3, r4, r5, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20004790 	.word	0x20004790

0800b7dc <_isatty_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4d05      	ldr	r5, [pc, #20]	; (800b7f8 <_isatty_r+0x1c>)
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4608      	mov	r0, r1
 800b7e6:	602b      	str	r3, [r5, #0]
 800b7e8:	f7f5 ff21 	bl	800162e <_isatty>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d102      	bne.n	800b7f6 <_isatty_r+0x1a>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	b103      	cbz	r3, 800b7f6 <_isatty_r+0x1a>
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	20004790 	.word	0x20004790

0800b7fc <_lseek_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4604      	mov	r4, r0
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	2200      	movs	r2, #0
 800b806:	4d05      	ldr	r5, [pc, #20]	; (800b81c <_lseek_r+0x20>)
 800b808:	602a      	str	r2, [r5, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	f7f5 ff19 	bl	8001642 <_lseek>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_lseek_r+0x1e>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_lseek_r+0x1e>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20004790 	.word	0x20004790

0800b820 <__ascii_mbtowc>:
 800b820:	b082      	sub	sp, #8
 800b822:	b901      	cbnz	r1, 800b826 <__ascii_mbtowc+0x6>
 800b824:	a901      	add	r1, sp, #4
 800b826:	b142      	cbz	r2, 800b83a <__ascii_mbtowc+0x1a>
 800b828:	b14b      	cbz	r3, 800b83e <__ascii_mbtowc+0x1e>
 800b82a:	7813      	ldrb	r3, [r2, #0]
 800b82c:	600b      	str	r3, [r1, #0]
 800b82e:	7812      	ldrb	r2, [r2, #0]
 800b830:	1e10      	subs	r0, r2, #0
 800b832:	bf18      	it	ne
 800b834:	2001      	movne	r0, #1
 800b836:	b002      	add	sp, #8
 800b838:	4770      	bx	lr
 800b83a:	4610      	mov	r0, r2
 800b83c:	e7fb      	b.n	800b836 <__ascii_mbtowc+0x16>
 800b83e:	f06f 0001 	mvn.w	r0, #1
 800b842:	e7f8      	b.n	800b836 <__ascii_mbtowc+0x16>

0800b844 <memmove>:
 800b844:	4288      	cmp	r0, r1
 800b846:	b510      	push	{r4, lr}
 800b848:	eb01 0402 	add.w	r4, r1, r2
 800b84c:	d902      	bls.n	800b854 <memmove+0x10>
 800b84e:	4284      	cmp	r4, r0
 800b850:	4623      	mov	r3, r4
 800b852:	d807      	bhi.n	800b864 <memmove+0x20>
 800b854:	1e43      	subs	r3, r0, #1
 800b856:	42a1      	cmp	r1, r4
 800b858:	d008      	beq.n	800b86c <memmove+0x28>
 800b85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b85e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b862:	e7f8      	b.n	800b856 <memmove+0x12>
 800b864:	4601      	mov	r1, r0
 800b866:	4402      	add	r2, r0
 800b868:	428a      	cmp	r2, r1
 800b86a:	d100      	bne.n	800b86e <memmove+0x2a>
 800b86c:	bd10      	pop	{r4, pc}
 800b86e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b872:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b876:	e7f7      	b.n	800b868 <memmove+0x24>

0800b878 <__malloc_lock>:
 800b878:	4801      	ldr	r0, [pc, #4]	; (800b880 <__malloc_lock+0x8>)
 800b87a:	f7fe bf90 	b.w	800a79e <__retarget_lock_acquire_recursive>
 800b87e:	bf00      	nop
 800b880:	20004788 	.word	0x20004788

0800b884 <__malloc_unlock>:
 800b884:	4801      	ldr	r0, [pc, #4]	; (800b88c <__malloc_unlock+0x8>)
 800b886:	f7fe bf8b 	b.w	800a7a0 <__retarget_lock_release_recursive>
 800b88a:	bf00      	nop
 800b88c:	20004788 	.word	0x20004788

0800b890 <_realloc_r>:
 800b890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b892:	4607      	mov	r7, r0
 800b894:	4614      	mov	r4, r2
 800b896:	460e      	mov	r6, r1
 800b898:	b921      	cbnz	r1, 800b8a4 <_realloc_r+0x14>
 800b89a:	4611      	mov	r1, r2
 800b89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8a0:	f7ff bbd6 	b.w	800b050 <_malloc_r>
 800b8a4:	b922      	cbnz	r2, 800b8b0 <_realloc_r+0x20>
 800b8a6:	f7ff fb87 	bl	800afb8 <_free_r>
 800b8aa:	4625      	mov	r5, r4
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b0:	f000 f83a 	bl	800b928 <_malloc_usable_size_r>
 800b8b4:	42a0      	cmp	r0, r4
 800b8b6:	d20f      	bcs.n	800b8d8 <_realloc_r+0x48>
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	f7ff fbc8 	bl	800b050 <_malloc_r>
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d0f2      	beq.n	800b8ac <_realloc_r+0x1c>
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	f7fd f92f 	bl	8008b2c <memcpy>
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	4638      	mov	r0, r7
 800b8d2:	f7ff fb71 	bl	800afb8 <_free_r>
 800b8d6:	e7e9      	b.n	800b8ac <_realloc_r+0x1c>
 800b8d8:	4635      	mov	r5, r6
 800b8da:	e7e7      	b.n	800b8ac <_realloc_r+0x1c>

0800b8dc <_read_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4d05      	ldr	r5, [pc, #20]	; (800b8fc <_read_r+0x20>)
 800b8e8:	602a      	str	r2, [r5, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f7f5 fe4c 	bl	8001588 <_read>
 800b8f0:	1c43      	adds	r3, r0, #1
 800b8f2:	d102      	bne.n	800b8fa <_read_r+0x1e>
 800b8f4:	682b      	ldr	r3, [r5, #0]
 800b8f6:	b103      	cbz	r3, 800b8fa <_read_r+0x1e>
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	20004790 	.word	0x20004790

0800b900 <__ascii_wctomb>:
 800b900:	4603      	mov	r3, r0
 800b902:	4608      	mov	r0, r1
 800b904:	b141      	cbz	r1, 800b918 <__ascii_wctomb+0x18>
 800b906:	2aff      	cmp	r2, #255	; 0xff
 800b908:	d904      	bls.n	800b914 <__ascii_wctomb+0x14>
 800b90a:	228a      	movs	r2, #138	; 0x8a
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	4770      	bx	lr
 800b914:	2001      	movs	r0, #1
 800b916:	700a      	strb	r2, [r1, #0]
 800b918:	4770      	bx	lr

0800b91a <abort>:
 800b91a:	2006      	movs	r0, #6
 800b91c:	b508      	push	{r3, lr}
 800b91e:	f000 f833 	bl	800b988 <raise>
 800b922:	2001      	movs	r0, #1
 800b924:	f7f5 fe26 	bl	8001574 <_exit>

0800b928 <_malloc_usable_size_r>:
 800b928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92c:	1f18      	subs	r0, r3, #4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	bfbc      	itt	lt
 800b932:	580b      	ldrlt	r3, [r1, r0]
 800b934:	18c0      	addlt	r0, r0, r3
 800b936:	4770      	bx	lr

0800b938 <_raise_r>:
 800b938:	291f      	cmp	r1, #31
 800b93a:	b538      	push	{r3, r4, r5, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	d904      	bls.n	800b94c <_raise_r+0x14>
 800b942:	2316      	movs	r3, #22
 800b944:	6003      	str	r3, [r0, #0]
 800b946:	f04f 30ff 	mov.w	r0, #4294967295
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b94e:	b112      	cbz	r2, 800b956 <_raise_r+0x1e>
 800b950:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b954:	b94b      	cbnz	r3, 800b96a <_raise_r+0x32>
 800b956:	4620      	mov	r0, r4
 800b958:	f000 f830 	bl	800b9bc <_getpid_r>
 800b95c:	462a      	mov	r2, r5
 800b95e:	4601      	mov	r1, r0
 800b960:	4620      	mov	r0, r4
 800b962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b966:	f000 b817 	b.w	800b998 <_kill_r>
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d00a      	beq.n	800b984 <_raise_r+0x4c>
 800b96e:	1c59      	adds	r1, r3, #1
 800b970:	d103      	bne.n	800b97a <_raise_r+0x42>
 800b972:	2316      	movs	r3, #22
 800b974:	6003      	str	r3, [r0, #0]
 800b976:	2001      	movs	r0, #1
 800b978:	e7e7      	b.n	800b94a <_raise_r+0x12>
 800b97a:	2400      	movs	r4, #0
 800b97c:	4628      	mov	r0, r5
 800b97e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b982:	4798      	blx	r3
 800b984:	2000      	movs	r0, #0
 800b986:	e7e0      	b.n	800b94a <_raise_r+0x12>

0800b988 <raise>:
 800b988:	4b02      	ldr	r3, [pc, #8]	; (800b994 <raise+0xc>)
 800b98a:	4601      	mov	r1, r0
 800b98c:	6818      	ldr	r0, [r3, #0]
 800b98e:	f7ff bfd3 	b.w	800b938 <_raise_r>
 800b992:	bf00      	nop
 800b994:	20000024 	.word	0x20000024

0800b998 <_kill_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	2300      	movs	r3, #0
 800b99c:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_kill_r+0x20>)
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	602b      	str	r3, [r5, #0]
 800b9a6:	f7f5 fdd5 	bl	8001554 <_kill>
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	d102      	bne.n	800b9b4 <_kill_r+0x1c>
 800b9ae:	682b      	ldr	r3, [r5, #0]
 800b9b0:	b103      	cbz	r3, 800b9b4 <_kill_r+0x1c>
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20004790 	.word	0x20004790

0800b9bc <_getpid_r>:
 800b9bc:	f7f5 bdc3 	b.w	8001546 <_getpid>

0800b9c0 <_init>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	bf00      	nop
 800b9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c6:	bc08      	pop	{r3}
 800b9c8:	469e      	mov	lr, r3
 800b9ca:	4770      	bx	lr

0800b9cc <_fini>:
 800b9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ce:	bf00      	nop
 800b9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d2:	bc08      	pop	{r3}
 800b9d4:	469e      	mov	lr, r3
 800b9d6:	4770      	bx	lr
