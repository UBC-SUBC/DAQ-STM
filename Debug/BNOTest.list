
BNOTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a450  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  0800a560  0800a560  0001a560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b19c  0800b19c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b19c  0800b19c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b19c  0800b19c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1a0  0800b1a0  0001b1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004494  200001f0  0800b394  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004684  0800b394  00024684  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d97  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  00031fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000349f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fd6  00000000  00000000  00036840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001320b  00000000  00000000  00050816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a78d  00000000  00000000  00063a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee1ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  000ee204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a548 	.word	0x0800a548

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800a548 	.word	0x0800a548

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000ad0:	4a03      	ldr	r2, [pc, #12]	; (8000ae0 <bno055_assignI2C+0x18>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20001528 	.word	0x20001528

08000ae4 <bno055_delay>:

void bno055_delay(int time) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fdd2 	bl	8001698 <HAL_Delay>
#endif
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	4603      	mov	r3, r0
 8000b04:	460a      	mov	r2, r1
 8000b06:	71fb      	strb	r3, [r7, #7]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	733b      	strb	r3, [r7, #12]
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000b14:	4b5a      	ldr	r3, [pc, #360]	; (8000c80 <bno055_writeData+0x184>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	f107 020c 	add.w	r2, r7, #12
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2302      	movs	r3, #2
 8000b22:	2150      	movs	r1, #80	; 0x50
 8000b24:	f001 f9ec 	bl	8001f00 <HAL_I2C_Master_Transmit>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000b2c:	7dfb      	ldrb	r3, [r7, #23]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 80a0 	beq.w	8000c74 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d103      	bne.n	8000b42 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000b3a:	4852      	ldr	r0, [pc, #328]	; (8000c84 <bno055_writeData+0x188>)
 8000b3c:	f007 fef6 	bl	800892c <puts>
 8000b40:	e012      	b.n	8000b68 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d103      	bne.n	8000b50 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000b48:	484f      	ldr	r0, [pc, #316]	; (8000c88 <bno055_writeData+0x18c>)
 8000b4a:	f007 feef 	bl	800892c <puts>
 8000b4e:	e00b      	b.n	8000b68 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000b50:	7dfb      	ldrb	r3, [r7, #23]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d103      	bne.n	8000b5e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000b56:	484d      	ldr	r0, [pc, #308]	; (8000c8c <bno055_writeData+0x190>)
 8000b58:	f007 fee8 	bl	800892c <puts>
 8000b5c:	e004      	b.n	8000b68 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	4619      	mov	r1, r3
 8000b62:	484b      	ldr	r0, [pc, #300]	; (8000c90 <bno055_writeData+0x194>)
 8000b64:	f007 fe5c 	bl	8008820 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000b68:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <bno055_writeData+0x184>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f001 fd32 	bl	80025d6 <HAL_I2C_GetError>
 8000b72:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d07e      	beq.n	8000c78 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d103      	bne.n	8000b88 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000b80:	4844      	ldr	r0, [pc, #272]	; (8000c94 <bno055_writeData+0x198>)
 8000b82:	f007 fed3 	bl	800892c <puts>
 8000b86:	e021      	b.n	8000bcc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d103      	bne.n	8000b96 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000b8e:	4842      	ldr	r0, [pc, #264]	; (8000c98 <bno055_writeData+0x19c>)
 8000b90:	f007 fecc 	bl	800892c <puts>
 8000b94:	e01a      	b.n	8000bcc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d103      	bne.n	8000ba4 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000b9c:	483f      	ldr	r0, [pc, #252]	; (8000c9c <bno055_writeData+0x1a0>)
 8000b9e:	f007 fec5 	bl	800892c <puts>
 8000ba2:	e013      	b.n	8000bcc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d103      	bne.n	8000bb2 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000baa:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <bno055_writeData+0x1a4>)
 8000bac:	f007 febe 	bl	800892c <puts>
 8000bb0:	e00c      	b.n	8000bcc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	d103      	bne.n	8000bc0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000bb8:	483a      	ldr	r0, [pc, #232]	; (8000ca4 <bno055_writeData+0x1a8>)
 8000bba:	f007 feb7 	bl	800892c <puts>
 8000bbe:	e005      	b.n	8000bcc <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	2b20      	cmp	r3, #32
 8000bc4:	d102      	bne.n	8000bcc <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000bc6:	4838      	ldr	r0, [pc, #224]	; (8000ca8 <bno055_writeData+0x1ac>)
 8000bc8:	f007 feb0 	bl	800892c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <bno055_writeData+0x184>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f001 fcf3 	bl	80025bc <HAL_I2C_GetState>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000be0:	4832      	ldr	r0, [pc, #200]	; (8000cac <bno055_writeData+0x1b0>)
 8000be2:	f007 fea3 	bl	800892c <puts>
 8000be6:	e048      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	d103      	bne.n	8000bf6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000bee:	482f      	ldr	r0, [pc, #188]	; (8000cac <bno055_writeData+0x1b0>)
 8000bf0:	f007 fe9c 	bl	800892c <puts>
 8000bf4:	e041      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	2b24      	cmp	r3, #36	; 0x24
 8000bfa:	d103      	bne.n	8000c04 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000bfc:	482c      	ldr	r0, [pc, #176]	; (8000cb0 <bno055_writeData+0x1b4>)
 8000bfe:	f007 fe95 	bl	800892c <puts>
 8000c02:	e03a      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b21      	cmp	r3, #33	; 0x21
 8000c08:	d103      	bne.n	8000c12 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000c0a:	482a      	ldr	r0, [pc, #168]	; (8000cb4 <bno055_writeData+0x1b8>)
 8000c0c:	f007 fe8e 	bl	800892c <puts>
 8000c10:	e033      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b22      	cmp	r3, #34	; 0x22
 8000c16:	d103      	bne.n	8000c20 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000c18:	4827      	ldr	r0, [pc, #156]	; (8000cb8 <bno055_writeData+0x1bc>)
 8000c1a:	f007 fe87 	bl	800892c <puts>
 8000c1e:	e02c      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	2b28      	cmp	r3, #40	; 0x28
 8000c24:	d103      	bne.n	8000c2e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000c26:	4825      	ldr	r0, [pc, #148]	; (8000cbc <bno055_writeData+0x1c0>)
 8000c28:	f007 fe80 	bl	800892c <puts>
 8000c2c:	e025      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	2b29      	cmp	r3, #41	; 0x29
 8000c32:	d103      	bne.n	8000c3c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000c34:	4822      	ldr	r0, [pc, #136]	; (8000cc0 <bno055_writeData+0x1c4>)
 8000c36:	f007 fe79 	bl	800892c <puts>
 8000c3a:	e01e      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8000c40:	d103      	bne.n	8000c4a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000c42:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <bno055_writeData+0x1c8>)
 8000c44:	f007 fe72 	bl	800892c <puts>
 8000c48:	e017      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b60      	cmp	r3, #96	; 0x60
 8000c4e:	d103      	bne.n	8000c58 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000c50:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <bno055_writeData+0x1cc>)
 8000c52:	f007 fe6b 	bl	800892c <puts>
 8000c56:	e010      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8000c5c:	d103      	bne.n	8000c66 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000c5e:	481b      	ldr	r0, [pc, #108]	; (8000ccc <bno055_writeData+0x1d0>)
 8000c60:	f007 fe64 	bl	800892c <puts>
 8000c64:	e009      	b.n	8000c7a <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2be0      	cmp	r3, #224	; 0xe0
 8000c6a:	d106      	bne.n	8000c7a <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <bno055_writeData+0x1d4>)
 8000c6e:	f007 fe5d 	bl	800892c <puts>
 8000c72:	e002      	b.n	8000c7a <bno055_writeData+0x17e>
    return;
 8000c74:	bf00      	nop
 8000c76:	e000      	b.n	8000c7a <bno055_writeData+0x17e>
    return;
 8000c78:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20001528 	.word	0x20001528
 8000c84:	0800a560 	.word	0x0800a560
 8000c88:	0800a584 	.word	0x0800a584
 8000c8c:	0800a5ac 	.word	0x0800a5ac
 8000c90:	0800a5d0 	.word	0x0800a5d0
 8000c94:	0800a5e8 	.word	0x0800a5e8
 8000c98:	0800a5fc 	.word	0x0800a5fc
 8000c9c:	0800a610 	.word	0x0800a610
 8000ca0:	0800a624 	.word	0x0800a624
 8000ca4:	0800a638 	.word	0x0800a638
 8000ca8:	0800a64c 	.word	0x0800a64c
 8000cac:	0800a664 	.word	0x0800a664
 8000cb0:	0800a67c 	.word	0x0800a67c
 8000cb4:	0800a690 	.word	0x0800a690
 8000cb8:	0800a6a8 	.word	0x0800a6a8
 8000cbc:	0800a6c0 	.word	0x0800a6c0
 8000cc0:	0800a6d8 	.word	0x0800a6d8
 8000cc4:	0800a6f8 	.word	0x0800a6f8
 8000cc8:	0800a718 	.word	0x0800a718
 8000ccc:	0800a730 	.word	0x0800a730
 8000cd0:	0800a748 	.word	0x0800a748

08000cd4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <bno055_readData+0x40>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	1dfa      	adds	r2, r7, #7
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	2150      	movs	r1, #80	; 0x50
 8000cf2:	f001 f905 	bl	8001f00 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <bno055_readData+0x40>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	2264      	movs	r2, #100	; 0x64
 8000d00:	9200      	str	r2, [sp, #0]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	2150      	movs	r1, #80	; 0x50
 8000d06:	f001 f9f9 	bl	80020fc <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20001528 	.word	0x20001528

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 fc5a 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f8e6 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 f9b4 	bl	8001090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d28:	f000 f988 	bl	800103c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d2c:	f000 f922 	bl	8000f74 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000d30:	f000 f94e 	bl	8000fd0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000d34:	f002 fd68 	bl	8003808 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8000d38:	485d      	ldr	r0, [pc, #372]	; (8000eb0 <main+0x198>)
 8000d3a:	f7ff fec5 	bl	8000ac8 <bno055_assignI2C>
  bno055_setup();
 8000d3e:	f002 fd3b 	bl	80037b8 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000d42:	f002 fd26 	bl	8003792 <bno055_setOperationModeNDOF>

  /* Wait for SD module reset */
  	HAL_Delay(500);
 8000d46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4a:	f000 fca5 	bl	8001698 <HAL_Delay>

  if(f_mount(&fs, "", 0) != FR_OK)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4958      	ldr	r1, [pc, #352]	; (8000eb4 <main+0x19c>)
 8000d52:	4859      	ldr	r0, [pc, #356]	; (8000eb8 <main+0x1a0>)
 8000d54:	f005 fae2 	bl	800631c <f_mount>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <main+0x4e>
    		_Error_Handler(__FILE__, __LINE__);
 8000d5e:	2176      	movs	r1, #118	; 0x76
 8000d60:	4856      	ldr	r0, [pc, #344]	; (8000ebc <main+0x1a4>)
 8000d62:	f000 fa03 	bl	800116c <_Error_Handler>

    	/* Open file to write */
    	if(f_open(&fil, "first.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8000d66:	2213      	movs	r2, #19
 8000d68:	4955      	ldr	r1, [pc, #340]	; (8000ec0 <main+0x1a8>)
 8000d6a:	4856      	ldr	r0, [pc, #344]	; (8000ec4 <main+0x1ac>)
 8000d6c:	f005 fb20 	bl	80063b0 <f_open>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <main+0x66>
    		_Error_Handler(__FILE__, __LINE__);
 8000d76:	217a      	movs	r1, #122	; 0x7a
 8000d78:	4850      	ldr	r0, [pc, #320]	; (8000ebc <main+0x1a4>)
 8000d7a:	f000 f9f7 	bl	800116c <_Error_Handler>

    	/* Check freeSpace space */
    	if(f_getfree("", &fre_clust, &pfs) != FR_OK)
 8000d7e:	4a52      	ldr	r2, [pc, #328]	; (8000ec8 <main+0x1b0>)
 8000d80:	4952      	ldr	r1, [pc, #328]	; (8000ecc <main+0x1b4>)
 8000d82:	484c      	ldr	r0, [pc, #304]	; (8000eb4 <main+0x19c>)
 8000d84:	f006 fbe0 	bl	8007548 <f_getfree>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <main+0x7e>
    		_Error_Handler(__FILE__, __LINE__);
 8000d8e:	217e      	movs	r1, #126	; 0x7e
 8000d90:	484a      	ldr	r0, [pc, #296]	; (8000ebc <main+0x1a4>)
 8000d92:	f000 f9eb 	bl	800116c <_Error_Handler>

    	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8000d96:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <main+0x1b0>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d9e:	3314      	adds	r3, #20
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1e9a      	subs	r2, r3, #2
 8000da4:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <main+0x1b0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dac:	3302      	adds	r3, #2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	fb03 f302 	mul.w	r3, r3, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb15 	bl	80003e4 <__aeabi_ui2d>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b44      	ldr	r3, [pc, #272]	; (8000ed0 <main+0x1b8>)
 8000dc0:	f7ff fb8a 	bl	80004d8 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f7ff fe5c 	bl	8000a88 <__aeabi_d2uiz>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <main+0x1bc>)
 8000dd4:	6013      	str	r3, [r2, #0]
    	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <main+0x1b0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dde:	3302      	adds	r3, #2
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <main+0x1b4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	fb03 f302 	mul.w	r3, r3, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff faf9 	bl	80003e4 <__aeabi_ui2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <main+0x1b8>)
 8000df8:	f7ff fb6e 	bl	80004d8 <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	f7ff fe40 	bl	8000a88 <__aeabi_d2uiz>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a33      	ldr	r2, [pc, #204]	; (8000ed8 <main+0x1c0>)
 8000e0c:	6013      	str	r3, [r2, #0]

    	/* free space is less than 1kb */
    	if(freeSpace < 1)
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <main+0x1c0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d103      	bne.n	8000e1e <main+0x106>
    		_Error_Handler(__FILE__, __LINE__);
 8000e16:	2185      	movs	r1, #133	; 0x85
 8000e18:	4828      	ldr	r0, [pc, #160]	; (8000ebc <main+0x1a4>)
 8000e1a:	f000 f9a7 	bl	800116c <_Error_Handler>

    	/* Writing text */
    	f_puts("STM32 SD Card I/O Example via SPI\n", &fil);
 8000e1e:	4929      	ldr	r1, [pc, #164]	; (8000ec4 <main+0x1ac>)
 8000e20:	482e      	ldr	r0, [pc, #184]	; (8000edc <main+0x1c4>)
 8000e22:	f006 fced 	bl	8007800 <f_puts>
    	f_puts("Save the world!!!", &fil);
 8000e26:	4927      	ldr	r1, [pc, #156]	; (8000ec4 <main+0x1ac>)
 8000e28:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <main+0x1c8>)
 8000e2a:	f006 fce9 	bl	8007800 <f_puts>

    	/* Close file */
    	if(f_close(&fil) != FR_OK)
 8000e2e:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <main+0x1ac>)
 8000e30:	f006 fb5f 	bl	80074f2 <f_close>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <main+0x12a>
    		_Error_Handler(__FILE__, __LINE__);
 8000e3a:	218d      	movs	r1, #141	; 0x8d
 8000e3c:	481f      	ldr	r0, [pc, #124]	; (8000ebc <main+0x1a4>)
 8000e3e:	f000 f995 	bl	800116c <_Error_Handler>

    	/* Open file to read */
    	if(f_open(&fil, "first.txt", FA_READ) != FR_OK)
 8000e42:	2201      	movs	r2, #1
 8000e44:	491e      	ldr	r1, [pc, #120]	; (8000ec0 <main+0x1a8>)
 8000e46:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <main+0x1ac>)
 8000e48:	f005 fab2 	bl	80063b0 <f_open>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00e      	beq.n	8000e70 <main+0x158>
    		_Error_Handler(__FILE__, __LINE__);
 8000e52:	2191      	movs	r1, #145	; 0x91
 8000e54:	4819      	ldr	r0, [pc, #100]	; (8000ebc <main+0x1a4>)
 8000e56:	f000 f989 	bl	800116c <_Error_Handler>

    	while(f_gets(buffer, sizeof(buffer), &fil))
 8000e5a:	e009      	b.n	8000e70 <main+0x158>
    	{
    		/* SWV output */
    		printf("%s", buffer);
 8000e5c:	4921      	ldr	r1, [pc, #132]	; (8000ee4 <main+0x1cc>)
 8000e5e:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <main+0x1d0>)
 8000e60:	f007 fcde 	bl	8008820 <iprintf>
    		fflush(stdout);
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <main+0x1d4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f006 fe8c 	bl	8007b88 <fflush>
    	while(f_gets(buffer, sizeof(buffer), &fil))
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <main+0x1ac>)
 8000e72:	2164      	movs	r1, #100	; 0x64
 8000e74:	481b      	ldr	r0, [pc, #108]	; (8000ee4 <main+0x1cc>)
 8000e76:	f006 fc49 	bl	800770c <f_gets>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1ed      	bne.n	8000e5c <main+0x144>
    	}

    	/* Close file */
    	if(f_close(&fil) != FR_OK)
 8000e80:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <main+0x1ac>)
 8000e82:	f006 fb36 	bl	80074f2 <f_close>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <main+0x17c>
    		_Error_Handler(__FILE__, __LINE__);
 8000e8c:	219c      	movs	r1, #156	; 0x9c
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <main+0x1a4>)
 8000e90:	f000 f96c 	bl	800116c <_Error_Handler>

    	/* Unmount SDCARD */
    	if(f_mount(NULL, "", 1) != FR_OK)
 8000e94:	2201      	movs	r2, #1
 8000e96:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <main+0x19c>)
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f005 fa3f 	bl	800631c <f_mount>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <main+0x194>
    		_Error_Handler(__FILE__, __LINE__);
 8000ea4:	21a0      	movs	r1, #160	; 0xa0
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <main+0x1a4>)
 8000ea8:	f000 f960 	bl	800116c <_Error_Handler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <main+0x194>
 8000eae:	bf00      	nop
 8000eb0:	200014d0 	.word	0x200014d0
 8000eb4:	0800a760 	.word	0x0800a760
 8000eb8:	200004a0 	.word	0x200004a0
 8000ebc:	0800a764 	.word	0x0800a764
 8000ec0:	0800a778 	.word	0x0800a778
 8000ec4:	200015e0 	.word	0x200015e0
 8000ec8:	20001594 	.word	0x20001594
 8000ecc:	20000444 	.word	0x20000444
 8000ed0:	3fe00000 	.word	0x3fe00000
 8000ed4:	20001524 	.word	0x20001524
 8000ed8:	20001590 	.word	0x20001590
 8000edc:	0800a784 	.word	0x0800a784
 8000ee0:	0800a7a8 	.word	0x0800a7a8
 8000ee4:	2000152c 	.word	0x2000152c
 8000ee8:	0800a7bc 	.word	0x0800a7bc
 8000eec:	20000020 	.word	0x20000020

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b090      	sub	sp, #64	; 0x40
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f006 ff7f 	bl	8007e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f16:	2301      	movs	r3, #1
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f26:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fe87 	bl	8002c44 <HAL_RCC_OscConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f3c:	f000 f91c 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f40:	230f      	movs	r3, #15
 8000f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f44:	2302      	movs	r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 f8f2 	bl	8003144 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f66:	f000 f907 	bl	8001178 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3740      	adds	r7, #64	; 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_I2C1_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fb2:	f000 fe61 	bl	8001c78 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 f8dc 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200014d0 	.word	0x200014d0
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	00061a80 	.word	0x00061a80

08000fd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_SPI2_Init+0x64>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <MX_SPI2_Init+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SPI2_Init+0x64>)
 8000fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_SPI2_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_SPI2_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_SPI2_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SPI2_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_SPI2_Init+0x64>)
 8000ffc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001000:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SPI2_Init+0x64>)
 8001004:	2210      	movs	r2, #16
 8001006:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_SPI2_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SPI2_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_SPI2_Init+0x64>)
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_SPI2_Init+0x64>)
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_SPI2_Init+0x64>)
 8001022:	f002 fa29 	bl	8003478 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800102c:	f000 f8a4 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000448 	.word	0x20000448
 8001038:	40003800 	.word	0x40003800

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f002 fa84 	bl	8003580 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f000 f87b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20001598 	.word	0x20001598
 800108c:	40004400 	.word	0x40004400

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_GPIO_Init+0xcc>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0xcc>)
 80010aa:	f043 0310 	orr.w	r3, r3, #16
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_GPIO_Init+0xcc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_GPIO_Init+0xcc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a26      	ldr	r2, [pc, #152]	; (800115c <MX_GPIO_Init+0xcc>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_GPIO_Init+0xcc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <MX_GPIO_Init+0xcc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <MX_GPIO_Init+0xcc>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <MX_GPIO_Init+0xcc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_GPIO_Init+0xcc>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <MX_GPIO_Init+0xcc>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_GPIO_Init+0xcc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2120      	movs	r1, #32
 8001108:	4815      	ldr	r0, [pc, #84]	; (8001160 <MX_GPIO_Init+0xd0>)
 800110a:	f000 fd7b 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_GPIO_Init+0xd4>)
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4619      	mov	r1, r3
 8001122:	4811      	ldr	r0, [pc, #68]	; (8001168 <MX_GPIO_Init+0xd8>)
 8001124:	f000 fbea 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001128:	2320      	movs	r3, #32
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <MX_GPIO_Init+0xd0>)
 8001140:	f000 fbdc 	bl	80018fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f000 fba0 	bl	800188e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f000 fbb9 	bl	80018c6 <HAL_NVIC_EnableIRQ>

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	10110000 	.word	0x10110000
 8001168:	40011000 	.word	0x40011000

0800116c <_Error_Handler>:

/* USER CODE BEGIN 4 */

void _Error_Handler(char *file, int line)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 8001176:	e7fe      	b.n	8001176 <_Error_Handler+0xa>

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_MspInit+0x5c>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_MspInit+0x5c>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <HAL_MspInit+0x5c>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	61d3      	str	r3, [r2, #28]
 80011ae:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_MspInit+0x5c>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x60>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_MspInit+0x60>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010000 	.word	0x40010000

080011e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1d      	ldr	r2, [pc, #116]	; (8001278 <HAL_I2C_MspInit+0x90>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d132      	bne.n	800126e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <HAL_I2C_MspInit+0x94>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <HAL_I2C_MspInit+0x94>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_I2C_MspInit+0x94>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001226:	2312      	movs	r3, #18
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4812      	ldr	r0, [pc, #72]	; (8001280 <HAL_I2C_MspInit+0x98>)
 8001236:	f000 fb61 	bl	80018fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_I2C_MspInit+0x9c>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <HAL_I2C_MspInit+0x9c>)
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_I2C_MspInit+0x94>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_I2C_MspInit+0x94>)
 800125c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_I2C_MspInit+0x94>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40005400 	.word	0x40005400
 800127c:	40021000 	.word	0x40021000
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40010000 	.word	0x40010000

08001288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d131      	bne.n	800130c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	4a1a      	ldr	r2, [pc, #104]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	61d3      	str	r3, [r2, #28]
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80012d8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80012dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <HAL_SPI_MspInit+0x94>)
 80012ee:	f000 fb05 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_SPI_MspInit+0x94>)
 8001308:	f000 faf8 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40003800 	.word	0x40003800
 8001318:	40021000 	.word	0x40021000
 800131c:	40010c00 	.word	0x40010c00

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_UART_MspInit+0x70>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d123      	bne.n	8001388 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_UART_MspInit+0x74>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a13      	ldr	r2, [pc, #76]	; (8001394 <HAL_UART_MspInit+0x74>)
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	61d3      	str	r3, [r2, #28]
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_UART_MspInit+0x74>)
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_UART_MspInit+0x74>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <HAL_UART_MspInit+0x74>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_UART_MspInit+0x74>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001370:	230c      	movs	r3, #12
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_UART_MspInit+0x78>)
 8001384:	f000 faba 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	3720      	adds	r7, #32
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40004400 	.word	0x40004400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e2:	f000 f93d 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}

080013ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013ee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f2:	f000 fc1f 	bl	8001c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
	return 1;
 80013fe:	2301      	movs	r3, #1
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001412:	f006 faf1 	bl	80079f8 <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
	return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
	while (1) {}		/* Make sure we hang here */
 800143a:	e7fe      	b.n	800143a <_exit+0x12>

0800143c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d4:	605a      	str	r2, [r3, #4]
	return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b085      	sub	sp, #20
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f006 fa5a 	bl	80079f8 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20005000 	.word	0x20005000
 8001570:	00000400 	.word	0x00000400
 8001574:	2000020c 	.word	0x2000020c
 8001578:	20004688 	.word	0x20004688

0800157c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ae:	f7ff ffe5 	bl	800157c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f006 fbf1 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b6:	f7ff fbaf 	bl	8000d18 <main>
  bx lr
 80015ba:	4770      	bx	lr
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80015c4:	0800b1a4 	.word	0x0800b1a4
  ldr r2, =_sbss
 80015c8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80015cc:	20004684 	.word	0x20004684

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x28>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f947 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff fdc8 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f95f 	bl	80018e2 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f927 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	20000008 	.word	0x20000008
 800165c:	20000004 	.word	0x20000004

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_IncTick+0x1c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <HAL_IncTick+0x20>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_IncTick+0x20>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000008 	.word	0x20000008
 8001680:	2000260c 	.word	0x2000260c

08001684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_GetTick+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	2000260c 	.word	0x2000260c

08001698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff fff0 	bl	8001684 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b0:	d005      	beq.n	80016be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_Delay+0x44>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016be:	bf00      	nop
 80016c0:	f7ff ffe0 	bl	8001684 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d8f7      	bhi.n	80016c0 <HAL_Delay+0x28>
  {
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <__NVIC_EnableIRQ+0x34>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff42 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	e169      	b.n	8001be4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001910:	2201      	movs	r2, #1
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	f040 8158 	bne.w	8001bde <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4a9a      	ldr	r2, [pc, #616]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d05e      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001938:	4a98      	ldr	r2, [pc, #608]	; (8001b9c <HAL_GPIO_Init+0x2a0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d875      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800193e:	4a98      	ldr	r2, [pc, #608]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d058      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001944:	4a96      	ldr	r2, [pc, #600]	; (8001ba0 <HAL_GPIO_Init+0x2a4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d86f      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800194a:	4a96      	ldr	r2, [pc, #600]	; (8001ba4 <HAL_GPIO_Init+0x2a8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d052      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001950:	4a94      	ldr	r2, [pc, #592]	; (8001ba4 <HAL_GPIO_Init+0x2a8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d869      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001956:	4a94      	ldr	r2, [pc, #592]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d04c      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 800195c:	4a92      	ldr	r2, [pc, #584]	; (8001ba8 <HAL_GPIO_Init+0x2ac>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d863      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001962:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d046      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
 8001968:	4a90      	ldr	r2, [pc, #576]	; (8001bac <HAL_GPIO_Init+0x2b0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d85d      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d82a      	bhi.n	80019c8 <HAL_GPIO_Init+0xcc>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d859      	bhi.n	8001a2a <HAL_GPIO_Init+0x12e>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <HAL_GPIO_Init+0x80>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	080019f7 	.word	0x080019f7
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019e3 	.word	0x080019e3
 8001988:	08001a25 	.word	0x08001a25
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a2b 	.word	0x08001a2b
 8001994:	08001a2b 	.word	0x08001a2b
 8001998:	08001a2b 	.word	0x08001a2b
 800199c:	08001a2b 	.word	0x08001a2b
 80019a0:	08001a2b 	.word	0x08001a2b
 80019a4:	08001a2b 	.word	0x08001a2b
 80019a8:	08001a2b 	.word	0x08001a2b
 80019ac:	08001a2b 	.word	0x08001a2b
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a2b 	.word	0x08001a2b
 80019b8:	08001a2b 	.word	0x08001a2b
 80019bc:	08001a2b 	.word	0x08001a2b
 80019c0:	080019d9 	.word	0x080019d9
 80019c4:	080019ed 	.word	0x080019ed
 80019c8:	4a79      	ldr	r2, [pc, #484]	; (8001bb0 <HAL_GPIO_Init+0x2b4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e029      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e024      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01f      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e01a      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e013      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e009      	b.n	8001a2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e000      	b.n	8001a2c <HAL_GPIO_Init+0x130>
          break;
 8001a2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2bff      	cmp	r3, #255	; 0xff
 8001a30:	d801      	bhi.n	8001a36 <HAL_GPIO_Init+0x13a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	e001      	b.n	8001a3a <HAL_GPIO_Init+0x13e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d802      	bhi.n	8001a48 <HAL_GPIO_Init+0x14c>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x152>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	210f      	movs	r1, #15
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	6a39      	ldr	r1, [r7, #32]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80b1 	beq.w	8001bde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7c:	4b4d      	ldr	r3, [pc, #308]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a4c      	ldr	r2, [pc, #304]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <HAL_GPIO_Init+0x2b8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a94:	4a48      	ldr	r2, [pc, #288]	; (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	220f      	movs	r2, #15
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a40      	ldr	r2, [pc, #256]	; (8001bbc <HAL_GPIO_Init+0x2c0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_GPIO_Init+0x1ec>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a3f      	ldr	r2, [pc, #252]	; (8001bc0 <HAL_GPIO_Init+0x2c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a3e      	ldr	r2, [pc, #248]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x1e0>
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001adc:	2304      	movs	r3, #4
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_Init+0x1ee>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afa:	492f      	ldr	r1, [pc, #188]	; (8001bb8 <HAL_GPIO_Init+0x2bc>)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d006      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	492c      	ldr	r1, [pc, #176]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4928      	ldr	r1, [pc, #160]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4922      	ldr	r1, [pc, #136]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	491e      	ldr	r1, [pc, #120]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4918      	ldr	r1, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b72:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4914      	ldr	r1, [pc, #80]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	490e      	ldr	r1, [pc, #56]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
 8001b98:	e021      	b.n	8001bde <HAL_GPIO_Init+0x2e2>
 8001b9a:	bf00      	nop
 8001b9c:	10320000 	.word	0x10320000
 8001ba0:	10310000 	.word	0x10310000
 8001ba4:	10220000 	.word	0x10220000
 8001ba8:	10210000 	.word	0x10210000
 8001bac:	10120000 	.word	0x10120000
 8001bb0:	10110000 	.word	0x10110000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	40010800 	.word	0x40010800
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	40011000 	.word	0x40011000
 8001bc8:	40011400 	.word	0x40011400
 8001bcc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_GPIO_Init+0x304>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4909      	ldr	r1, [pc, #36]	; (8001c00 <HAL_GPIO_Init+0x304>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f47f ae8e 	bne.w	8001910 <HAL_GPIO_Init+0x14>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	372c      	adds	r7, #44	; 0x2c
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c20:	e003      	b.n	8001c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	041a      	lsls	r2, r3, #16
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c40:	695a      	ldr	r2, [r3, #20]
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d006      	beq.n	8001c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 f806 	bl	8001c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e12b      	b.n	8001ee2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff faa2 	bl	80011e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2224      	movs	r2, #36	; 0x24
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cdc:	f001 fb86 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8001ce0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a81      	ldr	r2, [pc, #516]	; (8001eec <HAL_I2C_Init+0x274>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d807      	bhi.n	8001cfc <HAL_I2C_Init+0x84>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a80      	ldr	r2, [pc, #512]	; (8001ef0 <HAL_I2C_Init+0x278>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	e006      	b.n	8001d0a <HAL_I2C_Init+0x92>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a7d      	ldr	r2, [pc, #500]	; (8001ef4 <HAL_I2C_Init+0x27c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0e7      	b.n	8001ee2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4a78      	ldr	r2, [pc, #480]	; (8001ef8 <HAL_I2C_Init+0x280>)
 8001d16:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	; (8001eec <HAL_I2C_Init+0x274>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d802      	bhi.n	8001d4c <HAL_I2C_Init+0xd4>
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	e009      	b.n	8001d60 <HAL_I2C_Init+0xe8>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	4a69      	ldr	r2, [pc, #420]	; (8001efc <HAL_I2C_Init+0x284>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	3301      	adds	r3, #1
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	495c      	ldr	r1, [pc, #368]	; (8001eec <HAL_I2C_Init+0x274>)
 8001d7c:	428b      	cmp	r3, r1
 8001d7e:	d819      	bhi.n	8001db4 <HAL_I2C_Init+0x13c>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e59      	subs	r1, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8e:	1c59      	adds	r1, r3, #1
 8001d90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d94:	400b      	ands	r3, r1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_I2C_Init+0x138>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1e59      	subs	r1, r3, #1
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001da8:	3301      	adds	r3, #1
 8001daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dae:	e051      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001db0:	2304      	movs	r3, #4
 8001db2:	e04f      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d111      	bne.n	8001de0 <HAL_I2C_Init+0x168>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	1e58      	subs	r0, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6859      	ldr	r1, [r3, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	e012      	b.n	8001e06 <HAL_I2C_Init+0x18e>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1e58      	subs	r0, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	0099      	lsls	r1, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x196>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e022      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10e      	bne.n	8001e34 <HAL_I2C_Init+0x1bc>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1e58      	subs	r0, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	440b      	add	r3, r1
 8001e24:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e32:	e00f      	b.n	8001e54 <HAL_I2C_Init+0x1dc>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	0099      	lsls	r1, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	6809      	ldr	r1, [r1, #0]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6911      	ldr	r1, [r2, #16]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68d2      	ldr	r2, [r2, #12]
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695a      	ldr	r2, [r3, #20]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	000186a0 	.word	0x000186a0
 8001ef0:	001e847f 	.word	0x001e847f
 8001ef4:	003d08ff 	.word	0x003d08ff
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	10624dd3 	.word	0x10624dd3

08001f00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af02      	add	r7, sp, #8
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	817b      	strh	r3, [r7, #10]
 8001f10:	4613      	mov	r3, r2
 8001f12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff fbb6 	bl	8001684 <HAL_GetTick>
 8001f18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	f040 80e0 	bne.w	80020e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2319      	movs	r3, #25
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4970      	ldr	r1, [pc, #448]	; (80020f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fcaa 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e0d3      	b.n	80020ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_I2C_Master_Transmit+0x50>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e0cc      	b.n	80020ea <HAL_I2C_Master_Transmit+0x1ea>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d007      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2221      	movs	r2, #33	; 0x21
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2210      	movs	r2, #16
 8001f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	893a      	ldrh	r2, [r7, #8]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a50      	ldr	r2, [pc, #320]	; (80020f8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fb8:	8979      	ldrh	r1, [r7, #10]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	6a3a      	ldr	r2, [r7, #32]
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fb14 	bl	80025ec <I2C_MasterRequestWrite>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e08d      	b.n	80020ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fe4:	e066      	b.n	80020b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fd24 	bl	8002a38 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d107      	bne.n	800200e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06b      	b.n	80020ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d11b      	bne.n	8002088 <HAL_I2C_Master_Transmit+0x188>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	781a      	ldrb	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	6a39      	ldr	r1, [r7, #32]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fd14 	bl	8002aba <I2C_WaitOnBTFFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2b04      	cmp	r3, #4
 800209e:	d107      	bne.n	80020b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e01a      	b.n	80020ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d194      	bne.n	8001fe6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020e8:	2302      	movs	r3, #2
  }
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000

080020fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	817b      	strh	r3, [r7, #10]
 800210c:	4613      	mov	r3, r2
 800210e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff fab6 	bl	8001684 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b20      	cmp	r3, #32
 8002124:	f040 823f 	bne.w	80025a6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	2319      	movs	r3, #25
 800212e:	2201      	movs	r2, #1
 8002130:	497f      	ldr	r1, [pc, #508]	; (8002330 <HAL_I2C_Master_Receive+0x234>)
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 fbaa 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	e232      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_I2C_Master_Receive+0x54>
 800214c:	2302      	movs	r3, #2
 800214e:	e22b      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d007      	beq.n	8002176 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002184:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2222      	movs	r2, #34	; 0x22
 800218a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2210      	movs	r2, #16
 8002192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	893a      	ldrh	r2, [r7, #8]
 80021a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4a5f      	ldr	r2, [pc, #380]	; (8002334 <HAL_I2C_Master_Receive+0x238>)
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa96 	bl	80026f0 <I2C_MasterRequestRead>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e1ec      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d113      	bne.n	80021fe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e1c0      	b.n	8002580 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	2b01      	cmp	r3, #1
 8002204:	d11e      	bne.n	8002244 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002214:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002216:	b672      	cpsid	i
}
 8002218:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002240:	b662      	cpsie	i
}
 8002242:	e035      	b.n	80022b0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	2b02      	cmp	r3, #2
 800224a:	d11e      	bne.n	800228a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800225c:	b672      	cpsid	i
}
 800225e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002284:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002286:	b662      	cpsie	i
}
 8002288:	e012      	b.n	80022b0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002298:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022b0:	e166      	b.n	8002580 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	f200 811f 	bhi.w	80024fa <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d123      	bne.n	800230c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 fc37 	bl	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e167      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800230a:	e139      	b.n	8002580 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b02      	cmp	r3, #2
 8002312:	d152      	bne.n	80023ba <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	2200      	movs	r2, #0
 800231c:	4906      	ldr	r1, [pc, #24]	; (8002338 <HAL_I2C_Master_Receive+0x23c>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fab4 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e13c      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
 800232e:	bf00      	nop
 8002330:	00100002 	.word	0x00100002
 8002334:	ffff0000 	.word	0xffff0000
 8002338:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800234e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002382:	b662      	cpsie	i
}
 8002384:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023b8:	e0e2      	b.n	8002580 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2200      	movs	r2, #0
 80023c2:	497b      	ldr	r1, [pc, #492]	; (80025b0 <HAL_I2C_Master_Receive+0x4b4>)
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fa61 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0e9      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e4:	b672      	cpsid	i
}
 80023e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800241a:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_I2C_Master_Receive+0x4b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	08db      	lsrs	r3, r3, #3
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_I2C_Master_Receive+0x4bc>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0a1a      	lsrs	r2, r3, #8
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00da      	lsls	r2, r3, #3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	3b01      	subs	r3, #1
 8002438:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d118      	bne.n	8002472 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002462:	b662      	cpsie	i
}
 8002464:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e09a      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d1d9      	bne.n	8002434 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024c2:	b662      	cpsie	i
}
 80024c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f8:	e042      	b.n	8002580 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fb1c 	bl	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04c      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d118      	bne.n	8002580 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f ae94 	bne.w	80022b2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
  }
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	00010004 	.word	0x00010004
 80025b4:	20000000 	.word	0x20000000
 80025b8:	14f8b589 	.word	0x14f8b589

080025bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	460b      	mov	r3, r1
 80025fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d006      	beq.n	8002616 <I2C_MasterRequestWrite+0x2a>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d003      	beq.n	8002616 <I2C_MasterRequestWrite+0x2a>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002614:	d108      	bne.n	8002628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e00b      	b.n	8002640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	2b12      	cmp	r3, #18
 800262e:	d107      	bne.n	8002640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f91d 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002666:	d103      	bne.n	8002670 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e035      	b.n	80026e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800267c:	d108      	bne.n	8002690 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800268c:	611a      	str	r2, [r3, #16]
 800268e:	e01b      	b.n	80026c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002690:	897b      	ldrh	r3, [r7, #10]
 8002692:	11db      	asrs	r3, r3, #7
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f003 0306 	and.w	r3, r3, #6
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f063 030f 	orn	r3, r3, #15
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	490e      	ldr	r1, [pc, #56]	; (80026e8 <I2C_MasterRequestWrite+0xfc>)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f943 	bl	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e010      	b.n	80026e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026be:	897b      	ldrh	r3, [r7, #10]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <I2C_MasterRequestWrite+0x100>)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f933 	bl	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	00010008 	.word	0x00010008
 80026ec:	00010002 	.word	0x00010002

080026f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002714:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d006      	beq.n	800272a <I2C_MasterRequestRead+0x3a>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d003      	beq.n	800272a <I2C_MasterRequestRead+0x3a>
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002728:	d108      	bne.n	800273c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e00b      	b.n	8002754 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	2b11      	cmp	r3, #17
 8002742:	d107      	bne.n	8002754 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f893 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277a:	d103      	bne.n	8002784 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e079      	b.n	800287c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002790:	d108      	bne.n	80027a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	e05f      	b.n	8002864 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027a4:	897b      	ldrh	r3, [r7, #10]
 80027a6:	11db      	asrs	r3, r3, #7
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0306 	and.w	r3, r3, #6
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f063 030f 	orn	r3, r3, #15
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4930      	ldr	r1, [pc, #192]	; (8002884 <I2C_MasterRequestRead+0x194>)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f8b9 	bl	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e054      	b.n	800287c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027d2:	897b      	ldrh	r3, [r7, #10]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4929      	ldr	r1, [pc, #164]	; (8002888 <I2C_MasterRequestRead+0x198>)
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f8a9 	bl	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e044      	b.n	800287c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002816:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 f831 	bl	800288c <I2C_WaitOnFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283e:	d103      	bne.n	8002848 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e017      	b.n	800287c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	11db      	asrs	r3, r3, #7
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 0306 	and.w	r3, r3, #6
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f063 030e 	orn	r3, r3, #14
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	4907      	ldr	r1, [pc, #28]	; (8002888 <I2C_MasterRequestRead+0x198>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f865 	bl	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	00010008 	.word	0x00010008
 8002888:	00010002 	.word	0x00010002

0800288c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800289c:	e025      	b.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d021      	beq.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a6:	f7fe feed 	bl	8001684 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d302      	bcc.n	80028bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d116      	bne.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e023      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10d      	bne.n	8002910 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	e00c      	b.n	800292a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	43da      	mvns	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d0b6      	beq.n	800289e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002948:	e051      	b.n	80029ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	d123      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002968:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002972:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e046      	b.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d021      	beq.n	80029ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7fe fe6b 	bl	8001684 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d116      	bne.n	80029ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0220 	orr.w	r2, r3, #32
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e020      	b.n	8002a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d10c      	bne.n	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	bf14      	ite	ne
 8002a0a:	2301      	movne	r3, #1
 8002a0c:	2300      	moveq	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e00b      	b.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d18d      	bne.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a44:	e02d      	b.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f8ce 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02d      	b.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d021      	beq.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7fe fe11 	bl	8001684 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d302      	bcc.n	8002a74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d116      	bne.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e007      	b.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aac:	2b80      	cmp	r3, #128	; 0x80
 8002aae:	d1ca      	bne.n	8002a46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ac6:	e02d      	b.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f88d 	bl	8002be8 <I2C_IsAcknowledgeFailed>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e02d      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ade:	d021      	beq.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae0:	f7fe fdd0 	bl	8001684 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d302      	bcc.n	8002af6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e007      	b.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d1ca      	bne.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b48:	e042      	b.n	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d119      	bne.n	8002b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0210 	mvn.w	r2, #16
 8002b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e029      	b.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8c:	f7fe fd7a 	bl	8001684 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d302      	bcc.n	8002ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0220 	orr.w	r2, r3, #32
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e007      	b.n	8002be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d1b5      	bne.n	8002b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d11b      	bne.n	8002c38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e26c      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8087 	beq.w	8002d72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c64:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c70:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d112      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5e>
 8002c7c:	4b8c      	ldr	r3, [pc, #560]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d10b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8a:	4b89      	ldr	r3, [pc, #548]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x12c>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d168      	bne.n	8002d70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e246      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x76>
 8002cac:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a7f      	ldr	r2, [pc, #508]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e02e      	b.n	8002d18 <HAL_RCC_OscConfig+0xd4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x98>
 8002cc2:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xd4>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0xbc>
 8002ce6:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a71      	ldr	r2, [pc, #452]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xd4>
 8002d00:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6a      	ldr	r2, [pc, #424]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fcb0 	bl	8001684 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fcac 	bl	8001684 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1fa      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe4>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc9c 	bl	8001684 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fc98 	bl	8001684 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1e6      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x10c>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d063      	beq.n	8002e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7e:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d8a:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x18c>
 8002d96:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x176>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1ba      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4939      	ldr	r1, [pc, #228]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e03a      	b.n	8002e46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b36      	ldr	r3, [pc, #216]	; (8002eb4 <HAL_RCC_OscConfig+0x270>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fc51 	bl	8001684 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de6:	f7fe fc4d 	bl	8001684 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e19b      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4927      	ldr	r1, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_OscConfig+0x270>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fc30 	bl	8001684 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fc2c 	bl	8001684 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e17a      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d03a      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d019      	beq.n	8002e8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fc10 	bl	8001684 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fe fc0c 	bl	8001684 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e15a      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f000 fad8 	bl	800343c <RCC_Delay>
 8002e8c:	e01c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <HAL_RCC_OscConfig+0x274>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e94:	f7fe fbf6 	bl	8001684 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9a:	e00f      	b.n	8002ebc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fbf2 	bl	8001684 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d908      	bls.n	8002ebc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e140      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	42420000 	.word	0x42420000
 8002eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	4b9e      	ldr	r3, [pc, #632]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e9      	bne.n	8002e9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a6 	beq.w	8003022 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eda:	4b97      	ldr	r3, [pc, #604]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	4b94      	ldr	r3, [pc, #592]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4a93      	ldr	r2, [pc, #588]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	61d3      	str	r3, [r2, #28]
 8002ef2:	4b91      	ldr	r3, [pc, #580]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f02:	4b8e      	ldr	r3, [pc, #568]	; (800313c <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d118      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0e:	4b8b      	ldr	r3, [pc, #556]	; (800313c <HAL_RCC_OscConfig+0x4f8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a8a      	ldr	r2, [pc, #552]	; (800313c <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1a:	f7fe fbb3 	bl	8001684 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f22:	f7fe fbaf 	bl	8001684 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b64      	cmp	r3, #100	; 0x64
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0fd      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f34:	4b81      	ldr	r3, [pc, #516]	; (800313c <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x312>
 8002f48:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4a7a      	ldr	r2, [pc, #488]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6213      	str	r3, [r2, #32]
 8002f54:	e02d      	b.n	8002fb2 <HAL_RCC_OscConfig+0x36e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x334>
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	4a75      	ldr	r2, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	6213      	str	r3, [r2, #32]
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4a72      	ldr	r2, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	f023 0304 	bic.w	r3, r3, #4
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	e01c      	b.n	8002fb2 <HAL_RCC_OscConfig+0x36e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d10c      	bne.n	8002f9a <HAL_RCC_OscConfig+0x356>
 8002f80:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4a6c      	ldr	r2, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	f043 0304 	orr.w	r3, r3, #4
 8002f8a:	6213      	str	r3, [r2, #32]
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a69      	ldr	r2, [pc, #420]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	e00b      	b.n	8002fb2 <HAL_RCC_OscConfig+0x36e>
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4a66      	ldr	r2, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	6213      	str	r3, [r2, #32]
 8002fa6:	4b64      	ldr	r3, [pc, #400]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4a63      	ldr	r2, [pc, #396]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	f023 0304 	bic.w	r3, r3, #4
 8002fb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d015      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fb63 	bl	8001684 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc0:	e00a      	b.n	8002fd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc2:	f7fe fb5f 	bl	8001684 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e0ab      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd8:	4b57      	ldr	r3, [pc, #348]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ee      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x37e>
 8002fe4:	e014      	b.n	8003010 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe fb4d 	bl	8001684 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe fb49 	bl	8001684 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e095      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003004:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ee      	bne.n	8002fee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003016:	4b48      	ldr	r3, [pc, #288]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	4a47      	ldr	r2, [pc, #284]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003020:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8081 	beq.w	800312e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800302c:	4b42      	ldr	r3, [pc, #264]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d061      	beq.n	80030fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d146      	bne.n	80030ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_RCC_OscConfig+0x4fc>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7fe fb1d 	bl	8001684 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fe fb19 	bl	8001684 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e067      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003060:	4b35      	ldr	r3, [pc, #212]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003074:	d108      	bne.n	8003088 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003076:	4b30      	ldr	r3, [pc, #192]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	492d      	ldr	r1, [pc, #180]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a19      	ldr	r1, [r3, #32]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	430b      	orrs	r3, r1
 800309a:	4927      	ldr	r1, [pc, #156]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	4313      	orrs	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x4fc>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe faed 	bl	8001684 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fae9 	bl	8001684 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e037      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x46a>
 80030cc:	e02f      	b.n	800312e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_RCC_OscConfig+0x4fc>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7fe fad6 	bl	8001684 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030dc:	f7fe fad2 	bl	8001684 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e020      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x498>
 80030fa:	e018      	b.n	800312e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e013      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	429a      	cmp	r2, r3
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40021000 	.word	0x40021000
 800313c:	40007000 	.word	0x40007000
 8003140:	42420060 	.word	0x42420060

08003144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0d0      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4965      	ldr	r1, [pc, #404]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a0:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	494d      	ldr	r1, [pc, #308]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d040      	beq.n	8003264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d115      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e073      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06b      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4936      	ldr	r1, [pc, #216]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003234:	f7fe fa26 	bl	8001684 <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe fa22 	bl	8001684 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e053      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d210      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	4922      	ldr	r1, [pc, #136]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032d2:	f000 f821 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490a      	ldr	r1, [pc, #40]	; (800330c <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1cc>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe f984 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40022000 	.word	0x40022000
 8003308:	40021000 	.word	0x40021000
 800330c:	0800a854 	.word	0x0800a854
 8003310:	20000000 	.word	0x20000000
 8003314:	20000004 	.word	0x20000004

08003318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b490      	push	{r4, r7}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003320:	1d3c      	adds	r4, r7, #4
 8003322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003328:	f240 2301 	movw	r3, #513	; 0x201
 800332c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d002      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x40>
 8003352:	2b08      	cmp	r3, #8
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x46>
 8003356:	e02d      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800335a:	623b      	str	r3, [r7, #32]
      break;
 800335c:	e02d      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	0c9b      	lsrs	r3, r3, #18
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800336a:	4413      	add	r3, r2
 800336c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003370:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d013      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0c5b      	lsrs	r3, r3, #17
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800338a:	4413      	add	r3, r2
 800338c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003390:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	4a0e      	ldr	r2, [pc, #56]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003396:	fb02 f203 	mul.w	r2, r2, r3
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	e004      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033a8:	fb02 f303 	mul.w	r3, r2, r3
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	623b      	str	r3, [r7, #32]
      break;
 80033b2:	e002      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b6:	623b      	str	r3, [r7, #32]
      break;
 80033b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ba:	6a3b      	ldr	r3, [r7, #32]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3728      	adds	r7, #40	; 0x28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc90      	pop	{r4, r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	0800a7c0 	.word	0x0800a7c0
 80033cc:	40021000 	.word	0x40021000
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	003d0900 	.word	0x003d0900

080033d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000000 	.word	0x20000000

080033ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f0:	f7ff fff2 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	0800a864 	.word	0x0800a864

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003418:	f7ff ffde 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0adb      	lsrs	r3, r3, #11
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	0800a864 	.word	0x0800a864

0800343c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <RCC_Delay+0x34>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <RCC_Delay+0x38>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0a5b      	lsrs	r3, r3, #9
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003458:	bf00      	nop
  }
  while (Delay --);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	60fa      	str	r2, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f9      	bne.n	8003458 <RCC_Delay+0x1c>
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000000 	.word	0x20000000
 8003474:	10624dd3 	.word	0x10624dd3

08003478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e076      	b.n	8003578 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800349a:	d009      	beq.n	80034b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd fedc 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	ea42 0103 	orr.w	r1, r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	0c1a      	lsrs	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f002 0204 	and.w	r2, r2, #4
 8003556:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003566:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e03f      	b.n	8003612 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd feba 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f829 	bl	800361c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003656:	f023 030c 	bic.w	r3, r3, #12
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	430b      	orrs	r3, r1
 8003662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <UART_SetConfig+0x114>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7ff fec6 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	e002      	b.n	8003692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800368c:	f7ff feae 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8003690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009a      	lsls	r2, r3, #2
 800369c:	441a      	add	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	4a22      	ldr	r2, [pc, #136]	; (8003734 <UART_SetConfig+0x118>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	0119      	lsls	r1, r3, #4
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009a      	lsls	r2, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <UART_SetConfig+0x118>)
 80036ca:	fba3 0302 	umull	r0, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2064      	movs	r0, #100	; 0x64
 80036d2:	fb00 f303 	mul.w	r3, r0, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <UART_SetConfig+0x118>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e8:	4419      	add	r1, r3
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009a      	lsls	r2, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <UART_SetConfig+0x118>)
 8003702:	fba3 0302 	umull	r0, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2064      	movs	r0, #100	; 0x64
 800370a:	fb00 f303 	mul.w	r3, r0, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	3332      	adds	r3, #50	; 0x32
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <UART_SetConfig+0x118>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	440a      	add	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40013800 	.word	0x40013800
 8003734:	51eb851f 	.word	0x51eb851f

08003738 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	4619      	mov	r1, r3
 8003746:	2007      	movs	r0, #7
 8003748:	f7fd f9d8 	bl	8000afc <bno055_writeData>
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4619      	mov	r1, r3
 8003762:	203d      	movs	r0, #61	; 0x3d
 8003764:	f7fd f9ca 	bl	8000afc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800376e:	2013      	movs	r0, #19
 8003770:	f7fd f9b8 	bl	8000ae4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8003774:	e002      	b.n	800377c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8003776:	2007      	movs	r0, #7
 8003778:	f7fd f9b4 	bl	8000ae4 <bno055_delay>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8003788:	2000      	movs	r0, #0
 800378a:	f7ff ffe3 	bl	8003754 <bno055_setOperationMode>
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}

08003792 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8003792:	b580      	push	{r7, lr}
 8003794:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8003796:	200c      	movs	r0, #12
 8003798:	f7ff ffdc 	bl	8003754 <bno055_setOperationMode>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}

080037a0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80037a4:	2120      	movs	r1, #32
 80037a6:	203f      	movs	r0, #63	; 0x3f
 80037a8:	f7fd f9a8 	bl	8000afc <bno055_writeData>
  bno055_delay(700);
 80037ac:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80037b0:	f7fd f998 	bl	8000ae4 <bno055_delay>
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
  bno055_reset();
 80037be:	f7ff ffef 	bl	80037a0 <bno055_reset>

  uint8_t id = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80037c6:	1dfb      	adds	r3, r7, #7
 80037c8:	2201      	movs	r2, #1
 80037ca:	4619      	mov	r1, r3
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7fd fa81 	bl	8000cd4 <bno055_readData>
  if (id != BNO055_ID) {
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	2ba0      	cmp	r3, #160	; 0xa0
 80037d6:	d004      	beq.n	80037e2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	4619      	mov	r1, r3
 80037dc:	4809      	ldr	r0, [pc, #36]	; (8003804 <bno055_setup+0x4c>)
 80037de:	f005 f81f 	bl	8008820 <iprintf>
  }
  bno055_setPage(0);
 80037e2:	2000      	movs	r0, #0
 80037e4:	f7ff ffa8 	bl	8003738 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80037e8:	2100      	movs	r1, #0
 80037ea:	203f      	movs	r0, #63	; 0x3f
 80037ec:	f7fd f986 	bl	8000afc <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80037f0:	f7ff ffc8 	bl	8003784 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80037f4:	200a      	movs	r0, #10
 80037f6:	f7fd f975 	bl	8000ae4 <bno055_delay>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	0800a7d0 	.word	0x0800a7d0

08003808 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800380c:	4904      	ldr	r1, [pc, #16]	; (8003820 <MX_FATFS_Init+0x18>)
 800380e:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_FATFS_Init+0x1c>)
 8003810:	f004 f87a 	bl	8007908 <FATFS_LinkDriver>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <MX_FATFS_Init+0x20>)
 800381a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20002610 	.word	0x20002610
 8003824:	2000000c 	.word	0x2000000c
 8003828:	20002614 	.word	0x20002614

0800382c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003830:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
	...

0800383c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <USER_initialize+0x20>)
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <USER_initialize+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	20000009 	.word	0x20000009

08003860 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <USER_status+0x20>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <USER_status+0x20>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000009 	.word	0x20000009

08003884 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003894:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4603      	mov	r3, r0
 80038ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80038b0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	603a      	str	r2, [r7, #0]
 80038c6:	71fb      	strb	r3, [r7, #7]
 80038c8:	460b      	mov	r3, r1
 80038ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
    return res;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <disk_status+0x30>)
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	79fa      	ldrb	r2, [r7, #7]
 80038f4:	4905      	ldr	r1, [pc, #20]	; (800390c <disk_status+0x30>)
 80038f6:	440a      	add	r2, r1
 80038f8:	7a12      	ldrb	r2, [r2, #8]
 80038fa:	4610      	mov	r0, r2
 80038fc:	4798      	blx	r3
 80038fe:	4603      	mov	r3, r0
 8003900:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000430 	.word	0x20000430

08003910 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <disk_initialize+0x48>)
 8003922:	5cd3      	ldrb	r3, [r2, r3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <disk_initialize+0x48>)
 800392c:	2101      	movs	r1, #1
 800392e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003930:	79fb      	ldrb	r3, [r7, #7]
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <disk_initialize+0x48>)
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	79fa      	ldrb	r2, [r7, #7]
 800393e:	4906      	ldr	r1, [pc, #24]	; (8003958 <disk_initialize+0x48>)
 8003940:	440a      	add	r2, r1
 8003942:	7a12      	ldrb	r2, [r2, #8]
 8003944:	4610      	mov	r0, r2
 8003946:	4798      	blx	r3
 8003948:	4603      	mov	r3, r0
 800394a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000430 	.word	0x20000430

0800395c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4603      	mov	r3, r0
 800396a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <disk_read+0x3c>)
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	689c      	ldr	r4, [r3, #8]
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <disk_read+0x3c>)
 800397c:	4413      	add	r3, r2
 800397e:	7a18      	ldrb	r0, [r3, #8]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	47a0      	blx	r4
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]
  return res;
 800398c:	7dfb      	ldrb	r3, [r7, #23]
}
 800398e:	4618      	mov	r0, r3
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}
 8003996:	bf00      	nop
 8003998:	20000430 	.word	0x20000430

0800399c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <disk_write+0x3c>)
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	68dc      	ldr	r4, [r3, #12]
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <disk_write+0x3c>)
 80039bc:	4413      	add	r3, r2
 80039be:	7a18      	ldrb	r0, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	47a0      	blx	r4
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000430 	.word	0x20000430

080039dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	603a      	str	r2, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
 80039e8:	460b      	mov	r3, r1
 80039ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <disk_ioctl+0x38>)
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	4906      	ldr	r1, [pc, #24]	; (8003a14 <disk_ioctl+0x38>)
 80039fc:	440a      	add	r2, r1
 80039fe:	7a10      	ldrb	r0, [r2, #8]
 8003a00:	79b9      	ldrb	r1, [r7, #6]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	4798      	blx	r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]
  return res;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20000430 	.word	0x20000430

08003a18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003a2c:	e007      	b.n	8003a3e <mem_cpy+0x26>
		*d++ = *s++;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	1c53      	adds	r3, r2, #1
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1c59      	adds	r1, r3, #1
 8003a38:	6179      	str	r1, [r7, #20]
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	1e5a      	subs	r2, r3, #1
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f2      	bne.n	8003a2e <mem_cpy+0x16>
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003a64:	e005      	b.n	8003a72 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	617a      	str	r2, [r7, #20]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f4      	bne.n	8003a66 <mem_set+0x12>
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003aa0:	bf00      	nop
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00d      	beq.n	8003ac8 <mem_cmp+0x40>
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	61fa      	str	r2, [r7, #28]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	61ba      	str	r2, [r7, #24]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	1acb      	subs	r3, r1, r3
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ec      	beq.n	8003aa2 <mem_cmp+0x1a>
	return r;
 8003ac8:	697b      	ldr	r3, [r7, #20]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003ade:	e002      	b.n	8003ae6 <chk_chr+0x12>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <chk_chr+0x26>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d1f2      	bne.n	8003ae0 <chk_chr+0xc>
	return *str;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	781b      	ldrb	r3, [r3, #0]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b12:	2300      	movs	r3, #0
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e03d      	b.n	8003b98 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8003b1c:	4932      	ldr	r1, [pc, #200]	; (8003be8 <chk_lock+0xe0>)
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02e      	beq.n	8003b8e <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003b30:	492d      	ldr	r1, [pc, #180]	; (8003be8 <chk_lock+0xe0>)
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d122      	bne.n	8003b92 <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8003b4c:	4926      	ldr	r1, [pc, #152]	; (8003be8 <chk_lock+0xe0>)
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b64:	3308      	adds	r3, #8
 8003b66:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d112      	bne.n	8003b92 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003b6c:	491e      	ldr	r1, [pc, #120]	; (8003be8 <chk_lock+0xe0>)
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b84:	3306      	adds	r3, #6
 8003b86:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d102      	bne.n	8003b92 <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003b8c:	e007      	b.n	8003b9e <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d9be      	bls.n	8003b1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d109      	bne.n	8003bb8 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d102      	bne.n	8003bb0 <chk_lock+0xa8>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d101      	bne.n	8003bb4 <chk_lock+0xac>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e013      	b.n	8003bdc <chk_lock+0xd4>
 8003bb4:	2312      	movs	r3, #18
 8003bb6:	e011      	b.n	8003bdc <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <chk_lock+0xce>
 8003bbe:	490a      	ldr	r1, [pc, #40]	; (8003be8 <chk_lock+0xe0>)
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	330a      	adds	r3, #10
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd4:	d101      	bne.n	8003bda <chk_lock+0xd2>
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	e000      	b.n	8003bdc <chk_lock+0xd4>
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000218 	.word	0x20000218

08003bec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	e002      	b.n	8003bfe <enq_lock+0x12>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d809      	bhi.n	8003c18 <enq_lock+0x2c>
 8003c04:	490a      	ldr	r1, [pc, #40]	; (8003c30 <enq_lock+0x44>)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ef      	bne.n	8003bf8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000218 	.word	0x20000218

08003c34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e030      	b.n	8003ca6 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 8003c44:	495a      	ldr	r1, [pc, #360]	; (8003db0 <inc_lock+0x17c>)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d11f      	bne.n	8003ca0 <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 8003c60:	4953      	ldr	r1, [pc, #332]	; (8003db0 <inc_lock+0x17c>)
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3304      	adds	r3, #4
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c78:	3308      	adds	r3, #8
 8003c7a:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10f      	bne.n	8003ca0 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003c80:	494b      	ldr	r1, [pc, #300]	; (8003db0 <inc_lock+0x17c>)
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3308      	adds	r3, #8
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c98:	3306      	adds	r3, #6
 8003c9a:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d006      	beq.n	8003cae <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d9cb      	bls.n	8003c44 <inc_lock+0x10>
 8003cac:	e000      	b.n	8003cb0 <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 8003cae:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d14a      	bne.n	8003d4c <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e002      	b.n	8003cc2 <inc_lock+0x8e>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d809      	bhi.n	8003cdc <inc_lock+0xa8>
 8003cc8:	4939      	ldr	r1, [pc, #228]	; (8003db0 <inc_lock+0x17c>)
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ef      	bne.n	8003cbc <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d101      	bne.n	8003ce6 <inc_lock+0xb2>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e05f      	b.n	8003da6 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	4830      	ldr	r0, [pc, #192]	; (8003db0 <inc_lock+0x17c>)
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4403      	add	r3, r0
 8003cfc:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d04:	3308      	adds	r3, #8
 8003d06:	6819      	ldr	r1, [r3, #0]
 8003d08:	4829      	ldr	r0, [pc, #164]	; (8003db0 <inc_lock+0x17c>)
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4403      	add	r3, r0
 8003d16:	3304      	adds	r3, #4
 8003d18:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d20:	3306      	adds	r3, #6
 8003d22:	8818      	ldrh	r0, [r3, #0]
 8003d24:	4922      	ldr	r1, [pc, #136]	; (8003db0 <inc_lock+0x17c>)
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3308      	adds	r3, #8
 8003d34:	4602      	mov	r2, r0
 8003d36:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d38:	491d      	ldr	r1, [pc, #116]	; (8003db0 <inc_lock+0x17c>)
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	330a      	adds	r3, #10
 8003d48:	2200      	movs	r2, #0
 8003d4a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <inc_lock+0x138>
 8003d52:	4917      	ldr	r1, [pc, #92]	; (8003db0 <inc_lock+0x17c>)
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	330a      	adds	r3, #10
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <inc_lock+0x138>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e01c      	b.n	8003da6 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <inc_lock+0x156>
 8003d72:	490f      	ldr	r1, [pc, #60]	; (8003db0 <inc_lock+0x17c>)
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4613      	mov	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	330a      	adds	r3, #10
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	b299      	uxth	r1, r3
 8003d88:	e001      	b.n	8003d8e <inc_lock+0x15a>
 8003d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d8e:	4808      	ldr	r0, [pc, #32]	; (8003db0 <inc_lock+0x17c>)
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	330a      	adds	r3, #10
 8003d9e:	460a      	mov	r2, r1
 8003da0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3301      	adds	r3, #1
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	20000218 	.word	0x20000218

08003db4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d82e      	bhi.n	8003e26 <dec_lock+0x72>
		n = Files[i].ctr;
 8003dc8:	491b      	ldr	r1, [pc, #108]	; (8003e38 <dec_lock+0x84>)
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	330a      	adds	r3, #10
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003ddc:	89fb      	ldrh	r3, [r7, #14]
 8003dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de2:	d101      	bne.n	8003de8 <dec_lock+0x34>
 8003de4:	2300      	movs	r3, #0
 8003de6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003de8:	89fb      	ldrh	r3, [r7, #14]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <dec_lock+0x40>
 8003dee:	89fb      	ldrh	r3, [r7, #14]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003df4:	4910      	ldr	r1, [pc, #64]	; (8003e38 <dec_lock+0x84>)
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	330a      	adds	r3, #10
 8003e04:	89fa      	ldrh	r2, [r7, #14]
 8003e06:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003e08:	89fb      	ldrh	r3, [r7, #14]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <dec_lock+0x6c>
 8003e0e:	490a      	ldr	r1, [pc, #40]	; (8003e38 <dec_lock+0x84>)
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	737b      	strb	r3, [r7, #13]
 8003e24:	e001      	b.n	8003e2a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003e26:	2302      	movs	r3, #2
 8003e28:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003e2a:	7b7b      	ldrb	r3, [r7, #13]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000218 	.word	0x20000218

08003e3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e016      	b.n	8003e78 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e4a:	4910      	ldr	r1, [pc, #64]	; (8003e8c <clear_lock+0x50>)
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d108      	bne.n	8003e72 <clear_lock+0x36>
 8003e60:	490a      	ldr	r1, [pc, #40]	; (8003e8c <clear_lock+0x50>)
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d9e5      	bls.n	8003e4a <clear_lock+0xe>
	}
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000218 	.word	0x20000218

08003e90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d047      	beq.n	8003f3a <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003eb0:	330c      	adds	r3, #12
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	7818      	ldrb	r0, [r3, #0]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	f7ff fd69 	bl	800399c <disk_write>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <sync_window+0x46>
			res = FR_DISK_ERR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e031      	b.n	8003f3a <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	3304      	adds	r3, #4
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	1ad2      	subs	r2, r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d21e      	bcs.n	8003f3a <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f02:	3303      	adds	r3, #3
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e014      	b.n	8003f34 <sync_window+0xa4>
					wsect += fs->fsize;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f10:	3318      	adds	r3, #24
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f20:	3301      	adds	r3, #1
 8003f22:	7818      	ldrb	r0, [r3, #0]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	2301      	movs	r3, #1
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	f7ff fd37 	bl	800399c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d8e7      	bhi.n	8003f0a <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f58:	330c      	adds	r3, #12
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d01f      	beq.n	8003fa2 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff94 	bl	8003e90 <sync_window>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d117      	bne.n	8003fa2 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f78:	3301      	adds	r3, #1
 8003f7a:	7818      	ldrb	r0, [r3, #0]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	f7ff fceb 	bl	800395c <disk_read>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff ff6b 	bl	8003e90 <sync_window>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 80bd 	bne.w	8004140 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	f040 80a7 	bne.w	8004122 <sync_fs+0x176>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fda:	3305      	adds	r3, #5
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f040 809f 	bne.w	8004122 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	330a      	adds	r3, #10
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f7ff fd2e 	bl	8003a54 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2255      	movs	r2, #85	; 0x55
 8003ffc:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	22aa      	movs	r2, #170	; 0xaa
 8004004:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2252      	movs	r2, #82	; 0x52
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2252      	movs	r2, #82	; 0x52
 8004012:	705a      	strb	r2, [r3, #1]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2261      	movs	r2, #97	; 0x61
 8004018:	709a      	strb	r2, [r3, #2]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2241      	movs	r2, #65	; 0x41
 800401e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2272      	movs	r2, #114	; 0x72
 8004024:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2272      	movs	r2, #114	; 0x72
 800402c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2241      	movs	r2, #65	; 0x41
 8004034:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2261      	movs	r2, #97	; 0x61
 800403c:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004046:	3310      	adds	r3, #16
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004058:	3310      	adds	r3, #16
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b29b      	uxth	r3, r3
 8004062:	b2da      	uxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004070:	3310      	adds	r3, #16
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	b2da      	uxtb	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004084:	3310      	adds	r3, #16
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	0e1b      	lsrs	r3, r3, #24
 800408a:	b2da      	uxtb	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	330c      	adds	r3, #12
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040aa:	330c      	adds	r3, #12
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c2:	330c      	adds	r3, #12
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	0c1b      	lsrs	r3, r3, #16
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	330c      	adds	r3, #12
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	0e1b      	lsrs	r3, r3, #24
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ea:	331c      	adds	r3, #28
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80040f6:	330c      	adds	r3, #12
 80040f8:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004100:	3301      	adds	r3, #1
 8004102:	7818      	ldrb	r0, [r3, #0]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800410c:	330c      	adds	r3, #12
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2301      	movs	r3, #1
 8004112:	f7ff fc43 	bl	800399c <disk_write>
			fs->fsi_flag = 0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800411c:	3305      	adds	r3, #5
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004128:	3301      	adds	r3, #1
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fc53 	bl	80039dc <disk_ioctl>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <sync_fs+0x194>
			res = FR_DISK_ERR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	3b02      	subs	r3, #2
 8004158:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004160:	3314      	adds	r3, #20
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3b02      	subs	r3, #2
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d301      	bcc.n	8004170 <clust2sect+0x26>
 800416c:	2300      	movs	r3, #0
 800416e:	e00e      	b.n	800418e <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004176:	3302      	adds	r3, #2
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	fb03 f202 	mul.w	r2, r3, r2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004188:	3308      	adds	r3, #8
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4413      	add	r3, r2
}
 800418e:	4618      	mov	r0, r3
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d907      	bls.n	80041b8 <get_fat+0x20>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ae:	3314      	adds	r3, #20
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <get_fat+0x26>
		val = 1;	/* Internal error */
 80041b8:	2301      	movs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e0ec      	b.n	8004398 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	f000 809e 	beq.w	800430e <get_fat+0x176>
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f300 80d6 	bgt.w	8004384 <get_fat+0x1ec>
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d002      	beq.n	80041e2 <get_fat+0x4a>
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d063      	beq.n	80042a8 <get_fat+0x110>
 80041e0:	e0d0      	b.n	8004384 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fe:	330a      	adds	r3, #10
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	4619      	mov	r1, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	fbb3 f3f1 	udiv	r3, r3, r1
 800420a:	4413      	add	r3, r2
 800420c:	4619      	mov	r1, r3
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fe98 	bl	8003f44 <move_window>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 80b7 	bne.w	800438a <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	60fa      	str	r2, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004228:	320a      	adds	r2, #10
 800422a:	8812      	ldrh	r2, [r2, #0]
 800422c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004230:	fb02 f201 	mul.w	r2, r2, r1
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424a:	330a      	adds	r3, #10
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	4619      	mov	r1, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	fbb3 f3f1 	udiv	r3, r3, r1
 8004256:	4413      	add	r3, r2
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fe72 	bl	8003f44 <move_window>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 8093 	bne.w	800438e <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426e:	330a      	adds	r3, #10
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	fbb3 f1f2 	udiv	r1, r3, r2
 800427a:	fb02 f201 	mul.w	r2, r2, r1
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	5cd3      	ldrb	r3, [r2, r3]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	461a      	mov	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <get_fat+0x106>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	e002      	b.n	80042a4 <get_fat+0x10c>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a4:	617b      	str	r3, [r7, #20]
			break;
 80042a6:	e077      	b.n	8004398 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b6:	330a      	adds	r3, #10
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4619      	mov	r1, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c6:	4413      	add	r3, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fe3a 	bl	8003f44 <move_window>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d15d      	bne.n	8004392 <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	005a      	lsls	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e0:	330a      	adds	r3, #10
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80042e8:	fb03 f301 	mul.w	r3, r3, r1
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	b21a      	sxth	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b21b      	sxth	r3, r3
 8004304:	4313      	orrs	r3, r2
 8004306:	b21b      	sxth	r3, r3
 8004308:	b29b      	uxth	r3, r3
 800430a:	617b      	str	r3, [r7, #20]
			break;
 800430c:	e044      	b.n	8004398 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	330a      	adds	r3, #10
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	b29b      	uxth	r3, r3
 8004324:	4619      	mov	r1, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	fbb3 f3f1 	udiv	r3, r3, r1
 800432c:	4413      	add	r3, r2
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff fe07 	bl	8003f44 <move_window>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d12c      	bne.n	8004396 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	009a      	lsls	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004346:	330a      	adds	r3, #10
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	fbb2 f1f3 	udiv	r1, r2, r3
 800434e:	fb03 f301 	mul.w	r3, r3, r1
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3303      	adds	r3, #3
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	061a      	lsls	r2, r3, #24
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3302      	adds	r3, #2
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	041b      	lsls	r3, r3, #16
 800436a:	4313      	orrs	r3, r2
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	3201      	adds	r2, #1
 8004370:	7812      	ldrb	r2, [r2, #0]
 8004372:	0212      	lsls	r2, r2, #8
 8004374:	4313      	orrs	r3, r2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	4313      	orrs	r3, r2
 800437c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004380:	617b      	str	r3, [r7, #20]
			break;
 8004382:	e009      	b.n	8004398 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8004384:	2301      	movs	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e006      	b.n	8004398 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800438a:	bf00      	nop
 800438c:	e004      	b.n	8004398 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004396:	bf00      	nop
		}
	}

	return val;
 8004398:	697b      	ldr	r3, [r7, #20]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b088      	sub	sp, #32
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d907      	bls.n	80043c4 <put_fat+0x22>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	3314      	adds	r3, #20
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <put_fat+0x28>
		res = FR_INT_ERR;
 80043c4:	2302      	movs	r3, #2
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e146      	b.n	8004658 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	f000 80d9 	beq.w	800458a <put_fat+0x1e8>
 80043d8:	2b03      	cmp	r3, #3
 80043da:	f300 8133 	bgt.w	8004644 <put_fat+0x2a2>
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d003      	beq.n	80043ea <put_fat+0x48>
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	f000 8095 	beq.w	8004512 <put_fat+0x170>
 80043e8:	e12c      	b.n	8004644 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4413      	add	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	330a      	adds	r3, #10
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	4619      	mov	r1, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004412:	4413      	add	r3, r2
 8004414:	4619      	mov	r1, r3
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f7ff fd94 	bl	8003f44 <move_window>
 800441c:	4603      	mov	r3, r0
 800441e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004420:	7ffb      	ldrb	r3, [r7, #31]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f040 8111 	bne.w	800464a <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	617a      	str	r2, [r7, #20]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004434:	320a      	adds	r2, #10
 8004436:	8812      	ldrh	r2, [r2, #0]
 8004438:	fbb3 f1f2 	udiv	r1, r3, r2
 800443c:	fb02 f201 	mul.w	r2, r2, r1
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4413      	add	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <put_fat+0xcc>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	b25b      	sxtb	r3, r3
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	b25a      	sxtb	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	b25b      	sxtb	r3, r3
 8004466:	4313      	orrs	r3, r2
 8004468:	b25b      	sxtb	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e001      	b.n	8004472 <put_fat+0xd0>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800447c:	3304      	adds	r3, #4
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004490:	330a      	adds	r3, #10
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fbb3 f3f1 	udiv	r3, r3, r1
 800449c:	4413      	add	r3, r2
 800449e:	4619      	mov	r1, r3
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff fd4f 	bl	8003f44 <move_window>
 80044a6:	4603      	mov	r3, r0
 80044a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 80ce 	bne.w	800464e <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044b8:	330a      	adds	r3, #10
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80044c4:	fb02 f201 	mul.w	r2, r2, r1
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <put_fat+0x140>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e00e      	b.n	8004500 <put_fat+0x15e>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	b25b      	sxtb	r3, r3
 80044e8:	f023 030f 	bic.w	r3, r3, #15
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	b25b      	sxtb	r3, r3
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	b25b      	sxtb	r3, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450a:	3304      	adds	r3, #4
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
			break;
 8004510:	e0a2      	b.n	8004658 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004520:	330a      	adds	r3, #10
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004530:	4413      	add	r3, r2
 8004532:	4619      	mov	r1, r3
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fd05 	bl	8003f44 <move_window>
 800453a:	4603      	mov	r3, r0
 800453c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800453e:	7ffb      	ldrb	r3, [r7, #31]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f040 8086 	bne.w	8004652 <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	005a      	lsls	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	330a      	adds	r3, #10
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	fbb2 f1f3 	udiv	r1, r2, r3
 8004558:	fb03 f301 	mul.w	r3, r3, r1
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	b29b      	uxth	r3, r3
 8004570:	0a1b      	lsrs	r3, r3, #8
 8004572:	b29a      	uxth	r2, r3
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3301      	adds	r3, #1
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	3304      	adds	r3, #4
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
			break;
 8004588:	e066      	b.n	8004658 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004598:	330a      	adds	r3, #10
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a8:	4413      	add	r3, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fcc9 	bl	8003f44 <move_window>
 80045b2:	4603      	mov	r3, r0
 80045b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d14c      	bne.n	8004656 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	009a      	lsls	r2, r3, #2
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	330a      	adds	r3, #10
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80045ce:	fb03 f301 	mul.w	r3, r3, r1
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	3303      	adds	r3, #3
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	061a      	lsls	r2, r3, #24
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	3302      	adds	r3, #2
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	4313      	orrs	r3, r2
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	3201      	adds	r2, #1
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	0212      	lsls	r2, r2, #8
 80045f4:	4313      	orrs	r3, r2
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4313      	orrs	r3, r2
 8004604:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	b29b      	uxth	r3, r3
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	b29a      	uxth	r2, r3
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	3301      	adds	r3, #1
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0c1a      	lsrs	r2, r3, #16
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	3302      	adds	r3, #2
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0e1a      	lsrs	r2, r3, #24
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	3303      	adds	r3, #3
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463c:	3304      	adds	r3, #4
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
			break;
 8004642:	e009      	b.n	8004658 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8004644:	2302      	movs	r3, #2
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e006      	b.n	8004658 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <put_fat+0x2b6>
			if (res != FR_OK) break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8004656:	bf00      	nop
		}
	}

	return res;
 8004658:	7ffb      	ldrb	r3, [r7, #31]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3720      	adds	r7, #32
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d907      	bls.n	8004682 <remove_chain+0x20>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004678:	3314      	adds	r3, #20
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <remove_chain+0x26>
		res = FR_INT_ERR;
 8004682:	2302      	movs	r3, #2
 8004684:	73fb      	strb	r3, [r7, #15]
 8004686:	e04f      	b.n	8004728 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800468c:	e040      	b.n	8004710 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fd81 	bl	8004198 <get_fat>
 8004696:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d041      	beq.n	8004722 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d102      	bne.n	80046aa <remove_chain+0x48>
 80046a4:	2302      	movs	r3, #2
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e03e      	b.n	8004728 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d102      	bne.n	80046b8 <remove_chain+0x56>
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e037      	b.n	8004728 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80046b8:	2200      	movs	r2, #0
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fe70 	bl	80043a2 <put_fat>
 80046c2:	4603      	mov	r3, r0
 80046c4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d12c      	bne.n	8004726 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	3310      	adds	r3, #16
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d017      	beq.n	800470c <remove_chain+0xaa>
				fs->free_clust++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e2:	3310      	adds	r3, #16
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ee:	3310      	adds	r3, #16
 80046f0:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f8:	3305      	adds	r3, #5
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	b2da      	uxtb	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004708:	3305      	adds	r3, #5
 800470a:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	3314      	adds	r3, #20
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3b6      	bcc.n	800468e <remove_chain+0x2c>
 8004720:	e002      	b.n	8004728 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8004722:	bf00      	nop
 8004724:	e000      	b.n	8004728 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8004726:	bf00      	nop
		}
	}

	return res;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d113      	bne.n	800476a <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004748:	330c      	adds	r3, #12
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <create_chain+0x32>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	3314      	adds	r3, #20
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d31e      	bcc.n	80047a2 <create_chain+0x70>
 8004764:	2301      	movs	r3, #1
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	e01b      	b.n	80047a2 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff fd13 	bl	8004198 <get_fat>
 8004772:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d801      	bhi.n	800477e <create_chain+0x4c>
 800477a:	2301      	movs	r3, #1
 800477c:	e086      	b.n	800488c <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d101      	bne.n	800478a <create_chain+0x58>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	e080      	b.n	800488c <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	3314      	adds	r3, #20
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d201      	bcs.n	800479e <create_chain+0x6c>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	e076      	b.n	800488c <create_chain+0x15a>
		scl = clst;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	3301      	adds	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	3314      	adds	r3, #20
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d307      	bcc.n	80047cc <create_chain+0x9a>
			ncl = 2;
 80047bc:	2302      	movs	r3, #2
 80047be:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d901      	bls.n	80047cc <create_chain+0x9a>
 80047c8:	2300      	movs	r3, #0
 80047ca:	e05f      	b.n	800488c <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fce2 	bl	8004198 <get_fat>
 80047d4:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00e      	beq.n	80047fa <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d002      	beq.n	80047ea <create_chain+0xb8>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <create_chain+0xbc>
			return cs;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	e04e      	b.n	800488c <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d1d7      	bne.n	80047a6 <create_chain+0x74>
 80047f6:	2300      	movs	r3, #0
 80047f8:	e048      	b.n	800488c <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 80047fa:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80047fc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fdcd 	bl	80043a2 <put_fat>
 8004808:	4603      	mov	r3, r0
 800480a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <create_chain+0xf4>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	6839      	ldr	r1, [r7, #0]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fdc0 	bl	80043a2 <put_fat>
 8004822:	4603      	mov	r3, r0
 8004824:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d126      	bne.n	800487a <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004832:	330c      	adds	r3, #12
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483e:	3310      	adds	r3, #16
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d020      	beq.n	800488a <create_chain+0x158>
			fs->free_clust--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	3310      	adds	r3, #16
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485a:	3310      	adds	r3, #16
 800485c:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	3305      	adds	r3, #5
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	b2da      	uxtb	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004874:	3305      	adds	r3, #5
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	e007      	b.n	800488a <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d102      	bne.n	8004886 <create_chain+0x154>
 8004880:	f04f 33ff 	mov.w	r3, #4294967295
 8004884:	e000      	b.n	8004888 <create_chain+0x156>
 8004886:	2301      	movs	r3, #1
 8004888:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800488a:	697b      	ldr	r3, [r7, #20]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80048a4:	3304      	adds	r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3304      	adds	r3, #4
 80048aa:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	330a      	adds	r3, #10
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	3302      	adds	r3, #2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1d1a      	adds	r2, r3, #4
 80048de:	613a      	str	r2, [r7, #16]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <clmt_clust+0x5a>
 80048ea:	2300      	movs	r3, #0
 80048ec:	e010      	b.n	8004910 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d307      	bcc.n	8004906 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	3304      	adds	r3, #4
 8004902:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004904:	e7e9      	b.n	80048da <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8004906:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
}
 8004910:	4618      	mov	r0, r3
 8004912:	371c      	adds	r7, #28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	b29a      	uxth	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492e:	3306      	adds	r3, #6
 8004930:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	3308      	adds	r3, #8
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d00a      	beq.n	800495a <dir_sdi+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004950:	3314      	adds	r3, #20
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	429a      	cmp	r2, r3
 8004958:	d301      	bcc.n	800495e <dir_sdi+0x44>
		return FR_INT_ERR;
 800495a:	2302      	movs	r3, #2
 800495c:	e0b4      	b.n	8004ac8 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d111      	bne.n	8004988 <dir_sdi+0x6e>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d108      	bne.n	8004988 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004982:	3304      	adds	r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d117      	bne.n	80049be <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499a:	3308      	adds	r3, #8
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d301      	bcc.n	80049aa <dir_sdi+0x90>
			return FR_INT_ERR;
 80049a6:	2302      	movs	r3, #2
 80049a8:	e08e      	b.n	8004ac8 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80049b6:	3304      	adds	r3, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e046      	b.n	8004a4c <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	330a      	adds	r3, #10
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e0:	3302      	adds	r3, #2
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	fb03 f302 	mul.w	r3, r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80049ea:	e022      	b.n	8004a32 <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff fbce 	bl	8004198 <get_fat>
 80049fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d101      	bne.n	8004a0a <dir_sdi+0xf0>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e05e      	b.n	8004ac8 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d90a      	bls.n	8004a26 <dir_sdi+0x10c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d301      	bcc.n	8004a2a <dir_sdi+0x110>
				return FR_INT_ERR;
 8004a26:	2302      	movs	r3, #2
 8004a28:	e04e      	b.n	8004ac8 <dir_sdi+0x1ae>
			idx -= ic;
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d2d8      	bcs.n	80049ec <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fb80 	bl	800414a <clust2sect>
 8004a4a:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a52:	330c      	adds	r3, #12
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <dir_sdi+0x148>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e032      	b.n	8004ac8 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a6e:	330a      	adds	r3, #10
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	461a      	mov	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	441a      	add	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a88:	3310      	adds	r3, #16
 8004a8a:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa2:	330a      	adds	r3, #10
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ab2:	fb02 f201 	mul.w	r2, r2, r1
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	015b      	lsls	r3, r3, #5
 8004aba:	18c2      	adds	r2, r0, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	3314      	adds	r3, #20
 8004ac4:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004ad0:	b590      	push	{r4, r7, lr}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae0:	3306      	adds	r3, #6
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <dir_next+0x2e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af6:	3310      	adds	r3, #16
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <dir_next+0x32>
		return FR_NO_FILE;
 8004afe:	2304      	movs	r3, #4
 8004b00:	e144      	b.n	8004d8c <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0e:	330a      	adds	r3, #10
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b1e:	fb02 f201 	mul.w	r2, r2, r1
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f040 810c 	bne.w	8004d42 <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b30:	3310      	adds	r3, #16
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b3c:	3310      	adds	r3, #16
 8004b3e:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b46:	330c      	adds	r3, #12
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5a:	3308      	adds	r3, #8
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f0c0 80ed 	bcc.w	8004d42 <dir_next+0x272>
				return FR_NO_FILE;
 8004b68:	2304      	movs	r3, #4
 8004b6a:	e10f      	b.n	8004d8c <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b78:	330a      	adds	r3, #10
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b94:	3302      	adds	r3, #2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 80d0 	bne.w	8004d42 <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7ff faee 	bl	8004198 <get_fat>
 8004bbc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d801      	bhi.n	8004bc8 <dir_next+0xf8>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e0e1      	b.n	8004d8c <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bce:	d101      	bne.n	8004bd4 <dir_next+0x104>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0db      	b.n	8004d8c <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	3314      	adds	r3, #20
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	f0c0 8097 	bcc.w	8004d1a <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <dir_next+0x126>
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	e0ca      	b.n	8004d8c <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c04:	330c      	adds	r3, #12
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7ff fd91 	bl	8004732 <create_chain>
 8004c10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <dir_next+0x14c>
 8004c18:	2307      	movs	r3, #7
 8004c1a:	e0b7      	b.n	8004d8c <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <dir_next+0x156>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e0b2      	b.n	8004d8c <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d101      	bne.n	8004c32 <dir_next+0x162>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0ac      	b.n	8004d8c <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f928 	bl	8003e90 <sync_window>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <dir_next+0x17a>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0a0      	b.n	8004d8c <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c60:	330a      	adds	r3, #10
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	2100      	movs	r1, #0
 8004c68:	f7fe fef4 	bl	8003a54 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7a:	681c      	ldr	r4, [r3, #0]
 8004c7c:	6979      	ldr	r1, [r7, #20]
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f7ff fa63 	bl	800414a <clust2sect>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e024      	b.n	8004cde <dir_next+0x20e>
						dp->fs->wflag = 1;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff f8ee 	bl	8003e90 <sync_window>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <dir_next+0x1ee>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e066      	b.n	8004d8c <dir_next+0x2bc>
						dp->fs->winsect++;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004cca:	330c      	adds	r3, #12
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cea:	3302      	adds	r3, #2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d3ce      	bcc.n	8004c94 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d02:	330c      	adds	r3, #12
 8004d04:	6819      	ldr	r1, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	1a8a      	subs	r2, r1, r2
 8004d12:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d16:	330c      	adds	r3, #12
 8004d18:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d20:	330c      	adds	r3, #12
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fa0a 	bl	800414a <clust2sect>
 8004d36:	4602      	mov	r2, r0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3e:	3310      	adds	r3, #16
 8004d40:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4c:	3306      	adds	r3, #6
 8004d4e:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d66:	330a      	adds	r3, #10
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d76:	fb02 f201 	mul.w	r2, r2, r1
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	015b      	lsls	r3, r3, #5
 8004d7e:	18c2      	adds	r2, r0, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d86:	3314      	adds	r3, #20
 8004d88:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd90      	pop	{r4, r7, pc}

08004d94 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fdba 	bl	800491a <dir_sdi>
 8004da6:	4603      	mov	r3, r0
 8004da8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d138      	bne.n	8004e22 <dir_alloc+0x8e>
		n = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc2:	3310      	adds	r3, #16
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7ff f8bb 	bl	8003f44 <move_window>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d123      	bne.n	8004e20 <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dde:	3314      	adds	r3, #20
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2be5      	cmp	r3, #229	; 0xe5
 8004de6:	d007      	beq.n	8004df8 <dir_alloc+0x64>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dee:	3314      	adds	r3, #20
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d102      	bne.n	8004e0c <dir_alloc+0x78>
 8004e06:	e00c      	b.n	8004e22 <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fe5e 	bl	8004ad0 <dir_next>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0ca      	beq.n	8004db4 <dir_alloc+0x20>
 8004e1e:	e000      	b.n	8004e22 <dir_alloc+0x8e>
			if (res != FR_OK) break;
 8004e20:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d101      	bne.n	8004e2c <dir_alloc+0x98>
 8004e28:	2307      	movs	r3, #7
 8004e2a:	73fb      	strb	r3, [r7, #15]
	return res;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b085      	sub	sp, #20
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	331b      	adds	r3, #27
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	b21a      	sxth	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	331a      	adds	r3, #26
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	b21b      	sxth	r3, r3
 8004e52:	4313      	orrs	r3, r2
 8004e54:	b21b      	sxth	r3, r3
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d10f      	bne.n	8004e86 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	3315      	adds	r3, #21
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	b21a      	sxth	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3314      	adds	r3, #20
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b21b      	sxth	r3, r3
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	b21b      	sxth	r3, r3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

	return cl;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr

08004e92 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	331a      	adds	r3, #26
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	331b      	adds	r3, #27
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	0c1a      	lsrs	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3314      	adds	r3, #20
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	0c1b      	lsrs	r3, r3, #16
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3315      	adds	r3, #21
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
	...

08004ee0 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	2301      	movs	r3, #1
 8004f06:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004f08:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <cmp_lfn+0xd8>)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	3301      	adds	r3, #1
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	4413      	add	r3, r2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	b21a      	sxth	r2, r3
 8004f1c:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <cmp_lfn+0xd8>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	440b      	add	r3, r1
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	4619      	mov	r1, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	440b      	add	r3, r1
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b21b      	sxth	r3, r3
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	b21b      	sxth	r3, r3
 8004f32:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d019      	beq.n	8004f6e <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004f3a:	89bb      	ldrh	r3, [r7, #12]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f002 fd2d 	bl	800799c <ff_wtoupper>
 8004f42:	4603      	mov	r3, r0
 8004f44:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2bfe      	cmp	r3, #254	; 0xfe
 8004f4a:	d80e      	bhi.n	8004f6a <cmp_lfn+0x8a>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	617a      	str	r2, [r7, #20]
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	4413      	add	r3, r2
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 fd1e 	bl	800799c <ff_wtoupper>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	89fb      	ldrh	r3, [r7, #14]
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d008      	beq.n	8004f7c <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e01f      	b.n	8004fae <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004f6e:	89bb      	ldrh	r3, [r7, #12]
 8004f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d001      	beq.n	8004f7c <cmp_lfn+0x9c>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e018      	b.n	8004fae <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d9bf      	bls.n	8004f08 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <cmp_lfn+0xcc>
 8004f94:	89fb      	ldrh	r3, [r7, #14]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <cmp_lfn+0xcc>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <cmp_lfn+0xcc>
		return 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004fac:	2301      	movs	r3, #1
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	0800a8ec 	.word	0x0800a8ec

08004fbc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	460b      	mov	r3, r1
 8004fcc:	71fb      	strb	r3, [r7, #7]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	330d      	adds	r3, #13
 8004fd6:	79ba      	ldrb	r2, [r7, #6]
 8004fd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	330b      	adds	r3, #11
 8004fde:	220f      	movs	r2, #15
 8004fe0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	330c      	adds	r3, #12
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	331a      	adds	r3, #26
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	331b      	adds	r3, #27
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	82fb      	strh	r3, [r7, #22]
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005012:	8afb      	ldrh	r3, [r7, #22]
 8005014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <fit_lfn+0x70>
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	61fa      	str	r2, [r7, #28]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <fit_lfn+0xe4>)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	4413      	add	r3, r2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4413      	add	r3, r2
 800503a:	8afa      	ldrh	r2, [r7, #22]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	8afb      	ldrh	r3, [r7, #22]
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	b299      	uxth	r1, r3
 8005046:	4a16      	ldr	r2, [pc, #88]	; (80050a0 <fit_lfn+0xe4>)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	4413      	add	r3, r2
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	4413      	add	r3, r2
 8005054:	b2ca      	uxtb	r2, r1
 8005056:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005058:	8afb      	ldrh	r3, [r7, #22]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <fit_lfn+0xa8>
 800505e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005062:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	3301      	adds	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d9d0      	bls.n	8005012 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005070:	8afb      	ldrh	r3, [r7, #22]
 8005072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005076:	4293      	cmp	r3, r2
 8005078:	d006      	beq.n	8005088 <fit_lfn+0xcc>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <fit_lfn+0xd4>
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	79fa      	ldrb	r2, [r7, #7]
 8005094:	701a      	strb	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3724      	adds	r7, #36	; 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	0800a8ec 	.word	0x0800a8ec

080050a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80050b2:	220b      	movs	r2, #11
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7fe fcae 	bl	8003a18 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b05      	cmp	r3, #5
 80050c0:	d92b      	bls.n	800511a <gen_numname+0x76>
		sr = seq;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80050c6:	e022      	b.n	800510e <gen_numname+0x6a>
			wc = *lfn++;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80050d2:	2300      	movs	r3, #0
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	e017      	b.n	8005108 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	005a      	lsls	r2, r3, #1
 80050dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80050e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <gen_numname+0x5e>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80050fc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005100:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005104:	3301      	adds	r3, #1
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d9e4      	bls.n	80050d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1d8      	bne.n	80050c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800511a:	2307      	movs	r3, #7
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	b2db      	uxtb	r3, r3
 8005128:	3330      	adds	r3, #48	; 0x30
 800512a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800512e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005132:	2b39      	cmp	r3, #57	; 0x39
 8005134:	d904      	bls.n	8005140 <gen_numname+0x9c>
 8005136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800513a:	3307      	adds	r3, #7
 800513c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	1e5a      	subs	r2, r3, #1
 8005144:	62ba      	str	r2, [r7, #40]	; 0x28
 8005146:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800514a:	4413      	add	r3, r2
 800514c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005150:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	603b      	str	r3, [r7, #0]
	} while (seq);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1de      	bne.n	800511e <gen_numname+0x7a>
	ns[i] = '~';
 8005160:	f107 0214 	add.w	r2, r7, #20
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	4413      	add	r3, r2
 8005168:	227e      	movs	r2, #126	; 0x7e
 800516a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
 8005170:	e002      	b.n	8005178 <gen_numname+0xd4>
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	3301      	adds	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	429a      	cmp	r2, r3
 800517e:	d205      	bcs.n	800518c <gen_numname+0xe8>
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	4413      	add	r3, r2
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b20      	cmp	r3, #32
 800518a:	d1f2      	bne.n	8005172 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	2b07      	cmp	r3, #7
 8005190:	d808      	bhi.n	80051a4 <gen_numname+0x100>
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	62ba      	str	r2, [r7, #40]	; 0x28
 8005198:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800519c:	4413      	add	r3, r2
 800519e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80051a2:	e000      	b.n	80051a6 <gen_numname+0x102>
 80051a4:	2120      	movs	r1, #32
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	627a      	str	r2, [r7, #36]	; 0x24
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	460a      	mov	r2, r1
 80051b2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	2b07      	cmp	r3, #7
 80051b8:	d9e8      	bls.n	800518c <gen_numname+0xe8>
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	3730      	adds	r7, #48	; 0x30
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80051d0:	230b      	movs	r3, #11
 80051d2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	0852      	lsrs	r2, r2, #1
 80051da:	01db      	lsls	r3, r3, #7
 80051dc:	4313      	orrs	r3, r2
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1c59      	adds	r1, r3, #1
 80051e4:	6079      	str	r1, [r7, #4]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1ed      	bne.n	80051d4 <sum_sfn+0x10>
	return sum;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800520c:	2100      	movs	r1, #0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fb83 	bl	800491a <dir_sdi>
 8005214:	4603      	mov	r3, r0
 8005216:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <dir_find+0x1e>
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	e0c1      	b.n	80053a6 <dir_find+0x1a2>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005222:	23ff      	movs	r3, #255	; 0xff
 8005224:	753b      	strb	r3, [r7, #20]
 8005226:	7d3b      	ldrb	r3, [r7, #20]
 8005228:	757b      	strb	r3, [r7, #21]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005230:	3304      	adds	r3, #4
 8005232:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005236:	801a      	strh	r2, [r3, #0]
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005246:	3310      	adds	r3, #16
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7fe fe79 	bl	8003f44 <move_window>
 8005252:	4603      	mov	r3, r0
 8005254:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f040 809e 	bne.w	800539a <dir_find+0x196>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005264:	3314      	adds	r3, #20
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005270:	7dbb      	ldrb	r3, [r7, #22]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <dir_find+0x78>
 8005276:	2304      	movs	r3, #4
 8005278:	75fb      	strb	r3, [r7, #23]
 800527a:	e093      	b.n	80053a4 <dir_find+0x1a0>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	330b      	adds	r3, #11
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005286:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005288:	7dbb      	ldrb	r3, [r7, #22]
 800528a:	2be5      	cmp	r3, #229	; 0xe5
 800528c:	d007      	beq.n	800529e <dir_find+0x9a>
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <dir_find+0xae>
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b0f      	cmp	r3, #15
 800529c:	d009      	beq.n	80052b2 <dir_find+0xae>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800529e:	23ff      	movs	r3, #255	; 0xff
 80052a0:	757b      	strb	r3, [r7, #21]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052a8:	3304      	adds	r3, #4
 80052aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e068      	b.n	8005384 <dir_find+0x180>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b0f      	cmp	r3, #15
 80052b6:	d139      	bne.n	800532c <dir_find+0x128>
				if (dp->lfn) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d05f      	beq.n	8005384 <dir_find+0x180>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80052c4:	7dbb      	ldrb	r3, [r7, #22]
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d012      	beq.n	80052f4 <dir_find+0xf0>
						sum = dir[LDIR_Chksum];
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	7b5b      	ldrb	r3, [r3, #13]
 80052d2:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80052d4:	7dbb      	ldrb	r3, [r7, #22]
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	75bb      	strb	r3, [r7, #22]
 80052dc:	7dbb      	ldrb	r3, [r7, #22]
 80052de:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e6:	3306      	adds	r3, #6
 80052e8:	881a      	ldrh	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052f0:	3304      	adds	r3, #4
 80052f2:	801a      	strh	r2, [r3, #0]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80052f4:	7dba      	ldrb	r2, [r7, #22]
 80052f6:	7d7b      	ldrb	r3, [r7, #21]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d114      	bne.n	8005326 <dir_find+0x122>
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	330d      	adds	r3, #13
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	7d3a      	ldrb	r2, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d10e      	bne.n	8005326 <dir_find+0x122>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fde4 	bl	8004ee0 <cmp_lfn>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <dir_find+0x122>
 800531e:	7d7b      	ldrb	r3, [r7, #21]
 8005320:	3b01      	subs	r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	e000      	b.n	8005328 <dir_find+0x124>
 8005326:	23ff      	movs	r3, #255	; 0xff
 8005328:	757b      	strb	r3, [r7, #21]
 800532a:	e02b      	b.n	8005384 <dir_find+0x180>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800532c:	7d7b      	ldrb	r3, [r7, #21]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <dir_find+0x13e>
 8005332:	6938      	ldr	r0, [r7, #16]
 8005334:	f7ff ff46 	bl	80051c4 <sum_sfn>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	7d3b      	ldrb	r3, [r7, #20]
 800533e:	4293      	cmp	r3, r2
 8005340:	d02d      	beq.n	800539e <dir_find+0x19a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	3318      	adds	r3, #24
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330b      	adds	r3, #11
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10c      	bne.n	8005372 <dir_find+0x16e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535e:	3318      	adds	r3, #24
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	220b      	movs	r2, #11
 8005364:	4619      	mov	r1, r3
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f7fe fb8e 	bl	8003a88 <mem_cmp>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d017      	beq.n	80053a2 <dir_find+0x19e>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005372:	23ff      	movs	r3, #255	; 0xff
 8005374:	757b      	strb	r3, [r7, #21]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800537c:	3304      	adds	r3, #4
 800537e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005382:	801a      	strh	r2, [r3, #0]
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005384:	2100      	movs	r1, #0
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fba2 	bl	8004ad0 <dir_next>
 800538c:	4603      	mov	r3, r0
 800538e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f af50 	beq.w	8005238 <dir_find+0x34>
 8005398:	e004      	b.n	80053a4 <dir_find+0x1a0>
		if (res != FR_OK) break;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <dir_find+0x1a0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80053a2:	bf00      	nop

	return res;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	; 0x30
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053be:	3318      	adds	r3, #24
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80053ce:	f107 030c 	add.w	r3, r7, #12
 80053d2:	220c      	movs	r2, #12
 80053d4:	6a39      	ldr	r1, [r7, #32]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fb1e 	bl	8003a18 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d039      	beq.n	800545a <dir_register+0xaa>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	330b      	adds	r3, #11
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
		for (n = 1; n < 100; n++) {
 80053f8:	2301      	movs	r3, #1
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fc:	e013      	b.n	8005426 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80053fe:	f107 010c 	add.w	r1, r7, #12
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	6a38      	ldr	r0, [r7, #32]
 8005408:	f7ff fe4c 	bl	80050a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff fef9 	bl	8005204 <dir_find>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	3301      	adds	r3, #1
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	2b63      	cmp	r3, #99	; 0x63
 800542a:	d9e8      	bls.n	80053fe <dir_register+0x4e>
 800542c:	e000      	b.n	8005430 <dir_register+0x80>
			if (res != FR_OK) break;
 800542e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d101      	bne.n	800543a <dir_register+0x8a>
 8005436:	2307      	movs	r3, #7
 8005438:	e0e3      	b.n	8005602 <dir_register+0x252>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800543a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800543e:	2b04      	cmp	r3, #4
 8005440:	d002      	beq.n	8005448 <dir_register+0x98>
 8005442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005446:	e0dc      	b.n	8005602 <dir_register+0x252>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	330b      	adds	r3, #11
 800544c:	7dfa      	ldrb	r2, [r7, #23]
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	601a      	str	r2, [r3, #0]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d014      	beq.n	800548e <dir_register+0xde>
		for (n = 0; lfn[n]; n++) ;
 8005464:	2300      	movs	r3, #0
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
 8005468:	e002      	b.n	8005470 <dir_register+0xc0>
 800546a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546c:	3301      	adds	r3, #1
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f5      	bne.n	800546a <dir_register+0xba>
		nent = (n + 25) / 13;
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	3319      	adds	r3, #25
 8005482:	4a62      	ldr	r2, [pc, #392]	; (800560c <dir_register+0x25c>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	e001      	b.n	8005492 <dir_register+0xe2>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff fc7d 	bl	8004d94 <dir_alloc>
 800549a:	4603      	mov	r3, r0
 800549c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80054a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d160      	bne.n	800556a <dir_register+0x1ba>
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	3b01      	subs	r3, #1
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05a      	beq.n	800556a <dir_register+0x1ba>
		res = dir_sdi(dp, dp->index - nent);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054ba:	3306      	adds	r3, #6
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fa27 	bl	800491a <dir_sdi>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80054d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d147      	bne.n	800556a <dir_register+0x1ba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054e0:	3318      	adds	r3, #24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fe6d 	bl	80051c4 <sum_sfn>
 80054ea:	4603      	mov	r3, r0
 80054ec:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054fc:	3310      	adds	r3, #16
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	4610      	mov	r0, r2
 8005504:	f7fe fd1e 	bl	8003f44 <move_window>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800550e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005512:	2b00      	cmp	r3, #0
 8005514:	d128      	bne.n	8005568 <dir_register+0x1b8>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005524:	3314      	adds	r3, #20
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	b2da      	uxtb	r2, r3
 800552c:	7efb      	ldrb	r3, [r7, #27]
 800552e:	f7ff fd45 	bl	8004fbc <fit_lfn>
				dp->fs->wflag = 1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553e:	3304      	adds	r3, #4
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8005544:	2100      	movs	r1, #0
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff fac2 	bl	8004ad0 <dir_next>
 800554c:	4603      	mov	r3, r0
 800554e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005556:	2b00      	cmp	r3, #0
 8005558:	d107      	bne.n	800556a <dir_register+0x1ba>
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	3b01      	subs	r3, #1
 800555e:	627b      	str	r3, [r7, #36]	; 0x24
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1c3      	bne.n	80054ee <dir_register+0x13e>
 8005566:	e000      	b.n	800556a <dir_register+0x1ba>
				if (res != FR_OK) break;
 8005568:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800556a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800556e:	2b00      	cmp	r3, #0
 8005570:	d145      	bne.n	80055fe <dir_register+0x24e>
		res = move_window(dp->fs, dp->sect);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005580:	3310      	adds	r3, #16
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fe fcdc 	bl	8003f44 <move_window>
 800558c:	4603      	mov	r3, r0
 800558e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005596:	2b00      	cmp	r3, #0
 8005598:	d131      	bne.n	80055fe <dir_register+0x24e>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a0:	3314      	adds	r3, #20
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2220      	movs	r2, #32
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe fa53 	bl	8003a54 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b4:	3314      	adds	r3, #20
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055be:	3318      	adds	r3, #24
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	220b      	movs	r2, #11
 80055c4:	4619      	mov	r1, r3
 80055c6:	f7fe fa27 	bl	8003a18 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d0:	3318      	adds	r3, #24
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330b      	adds	r3, #11
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055de:	3314      	adds	r3, #20
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	330c      	adds	r3, #12
 80055e4:	f002 0218 	and.w	r2, r2, #24
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f8:	3304      	adds	r3, #4
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 80055fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005602:	4618      	mov	r0, r3
 8005604:	3730      	adds	r7, #48	; 0x30
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	4ec4ec4f 	.word	0x4ec4ec4f

08005610 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	e002      	b.n	8005628 <create_name+0x18>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b2f      	cmp	r3, #47	; 0x2f
 800562e:	d0f8      	beq.n	8005622 <create_name+0x12>
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b5c      	cmp	r3, #92	; 0x5c
 8005636:	d0f4      	beq.n	8005622 <create_name+0x12>
	lfn = dp->lfn;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	61ba      	str	r2, [r7, #24]
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005658:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800565a:	2b1f      	cmp	r3, #31
 800565c:	d92f      	bls.n	80056be <create_name+0xae>
 800565e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005660:	2b2f      	cmp	r3, #47	; 0x2f
 8005662:	d02c      	beq.n	80056be <create_name+0xae>
 8005664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005666:	2b5c      	cmp	r3, #92	; 0x5c
 8005668:	d029      	beq.n	80056be <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2bfe      	cmp	r3, #254	; 0xfe
 800566e:	d901      	bls.n	8005674 <create_name+0x64>
			return FR_INVALID_NAME;
 8005670:	2306      	movs	r3, #6
 8005672:	e18b      	b.n	800598c <create_name+0x37c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005676:	b2db      	uxtb	r3, r3
 8005678:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800567a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800567c:	2101      	movs	r1, #1
 800567e:	4618      	mov	r0, r3
 8005680:	f002 f952 	bl	8007928 <ff_convert>
 8005684:	4603      	mov	r3, r0
 8005686:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <create_name+0x82>
 800568e:	2306      	movs	r3, #6
 8005690:	e17c      	b.n	800598c <create_name+0x37c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005694:	2b7f      	cmp	r3, #127	; 0x7f
 8005696:	d809      	bhi.n	80056ac <create_name+0x9c>
 8005698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800569a:	4619      	mov	r1, r3
 800569c:	488f      	ldr	r0, [pc, #572]	; (80058dc <create_name+0x2cc>)
 800569e:	f7fe fa19 	bl	8003ad4 <chk_chr>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <create_name+0x9c>
			return FR_INVALID_NAME;
 80056a8:	2306      	movs	r3, #6
 80056aa:	e16f      	b.n	800598c <create_name+0x37c>
		lfn[di++] = w;					/* Store the Unicode character */
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	617a      	str	r2, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80056bc:	e7c5      	b.n	800564a <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	441a      	add	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80056c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ca:	2b1f      	cmp	r3, #31
 80056cc:	d801      	bhi.n	80056d2 <create_name+0xc2>
 80056ce:	2304      	movs	r3, #4
 80056d0:	e000      	b.n	80056d4 <create_name+0xc4>
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80056d8:	e011      	b.n	80056fe <create_name+0xee>
		w = lfn[di - 1];
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	3b01      	subs	r3, #1
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80056ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	d002      	beq.n	80056f8 <create_name+0xe8>
 80056f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f4:	2b2e      	cmp	r3, #46	; 0x2e
 80056f6:	d106      	bne.n	8005706 <create_name+0xf6>
		di--;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ea      	bne.n	80056da <create_name+0xca>
 8005704:	e000      	b.n	8005708 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8005706:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <create_name+0x102>
 800570e:	2306      	movs	r3, #6
 8005710:	e13c      	b.n	800598c <create_name+0x37c>

	lfn[di] = 0;						/* LFN is created */
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	2200      	movs	r2, #0
 800571c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005724:	3318      	adds	r3, #24
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	220b      	movs	r2, #11
 800572a:	2120      	movs	r1, #32
 800572c:	4618      	mov	r0, r3
 800572e:	f7fe f991 	bl	8003a54 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005732:	2300      	movs	r3, #0
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	e002      	b.n	800573e <create_name+0x12e>
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	3301      	adds	r3, #1
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	2b20      	cmp	r3, #32
 800574a:	d0f5      	beq.n	8005738 <create_name+0x128>
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	2b2e      	cmp	r3, #46	; 0x2e
 8005758:	d0ee      	beq.n	8005738 <create_name+0x128>
	if (si) cf |= NS_LOSS | NS_LFN;
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <create_name+0x164>
 8005760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005764:	f043 0303 	orr.w	r3, r3, #3
 8005768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800576c:	e002      	b.n	8005774 <create_name+0x164>
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	3b01      	subs	r3, #1
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <create_name+0x17e>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005780:	3b01      	subs	r3, #1
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	2b2e      	cmp	r3, #46	; 0x2e
 800578c:	d1ef      	bne.n	800576e <create_name+0x15e>

	b = i = 0; ni = 8;
 800578e:	2300      	movs	r3, #0
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	2300      	movs	r3, #0
 8005794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005798:	2308      	movs	r3, #8
 800579a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	61ba      	str	r2, [r7, #24]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4413      	add	r3, r2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80057ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8092 	beq.w	80058d8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80057b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d006      	beq.n	80057c8 <create_name+0x1b8>
 80057ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057bc:	2b2e      	cmp	r3, #46	; 0x2e
 80057be:	d10a      	bne.n	80057d6 <create_name+0x1c6>
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d006      	beq.n	80057d6 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN; continue;
 80057c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057cc:	f043 0303 	orr.w	r3, r3, #3
 80057d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057d4:	e07f      	b.n	80058d6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d203      	bcs.n	80057e6 <create_name+0x1d6>
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d123      	bne.n	800582e <create_name+0x21e>
			if (ni == 11) {				/* Long extension */
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	2b0b      	cmp	r3, #11
 80057ea:	d106      	bne.n	80057fa <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN; break;
 80057ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f0:	f043 0303 	orr.w	r3, r3, #3
 80057f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057f8:	e077      	b.n	80058ea <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d005      	beq.n	800580e <create_name+0x1fe>
 8005802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005806:	f043 0303 	orr.w	r3, r3, #3
 800580a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	429a      	cmp	r2, r3
 8005814:	d868      	bhi.n	80058e8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	2308      	movs	r3, #8
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	230b      	movs	r3, #11
 8005820:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005822:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800582c:	e053      	b.n	80058d6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800582e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005830:	2b7f      	cmp	r3, #127	; 0x7f
 8005832:	d914      	bls.n	800585e <create_name+0x24e>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005836:	2100      	movs	r1, #0
 8005838:	4618      	mov	r0, r3
 800583a:	f002 f875 	bl	8007928 <ff_convert>
 800583e:	4603      	mov	r3, r0
 8005840:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <create_name+0x242>
 8005848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800584a:	3b80      	subs	r3, #128	; 0x80
 800584c:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <create_name+0x2d0>)
 800584e:	5cd3      	ldrb	r3, [r2, r3]
 8005850:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005856:	f043 0302 	orr.w	r3, r3, #2
 800585a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800585e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <create_name+0x264>
 8005864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005866:	4619      	mov	r1, r3
 8005868:	481e      	ldr	r0, [pc, #120]	; (80058e4 <create_name+0x2d4>)
 800586a:	f7fe f933 	bl	8003ad4 <chk_chr>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <create_name+0x276>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005874:	235f      	movs	r3, #95	; 0x5f
 8005876:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800587c:	f043 0303 	orr.w	r3, r3, #3
 8005880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005884:	e01b      	b.n	80058be <create_name+0x2ae>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d909      	bls.n	80058a0 <create_name+0x290>
 800588c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800588e:	2b5a      	cmp	r3, #90	; 0x5a
 8005890:	d806      	bhi.n	80058a0 <create_name+0x290>
					b |= 2;
 8005892:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005896:	f043 0302 	orr.w	r3, r3, #2
 800589a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800589e:	e00e      	b.n	80058be <create_name+0x2ae>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80058a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a2:	2b60      	cmp	r3, #96	; 0x60
 80058a4:	d90b      	bls.n	80058be <create_name+0x2ae>
 80058a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058a8:	2b7a      	cmp	r3, #122	; 0x7a
 80058aa:	d808      	bhi.n	80058be <create_name+0x2ae>
						b |= 1; w -= 0x20;
 80058ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ba:	3b20      	subs	r3, #32
 80058bc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c4:	3318      	adds	r3, #24
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	1c59      	adds	r1, r3, #1
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	4413      	add	r3, r2
 80058d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80058d6:	e761      	b.n	800579c <create_name+0x18c>
		if (!w) break;					/* Break on end of the LFN */
 80058d8:	bf00      	nop
 80058da:	e006      	b.n	80058ea <create_name+0x2da>
 80058dc:	0800a80c 	.word	0x0800a80c
 80058e0:	0800a86c 	.word	0x0800a86c
 80058e4:	0800a818 	.word	0x0800a818
			if (si > di) break;			/* No extension */
 80058e8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f0:	3318      	adds	r3, #24
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2be5      	cmp	r3, #229	; 0xe5
 80058f8:	d106      	bne.n	8005908 <create_name+0x2f8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005900:	3318      	adds	r3, #24
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2205      	movs	r2, #5
 8005906:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b08      	cmp	r3, #8
 800590c:	d104      	bne.n	8005918 <create_name+0x308>
 800590e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8005918:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	2b0c      	cmp	r3, #12
 8005922:	d005      	beq.n	8005930 <create_name+0x320>
 8005924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	2b03      	cmp	r3, #3
 800592e:	d105      	bne.n	800593c <create_name+0x32c>
		cf |= NS_LFN;
 8005930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800593c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d117      	bne.n	8005978 <create_name+0x368>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <create_name+0x350>
 8005954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005958:	f043 0310 	orr.w	r3, r3, #16
 800595c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b04      	cmp	r3, #4
 800596a:	d105      	bne.n	8005978 <create_name+0x368>
 800596c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	3318      	adds	r3, #24
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330b      	adds	r3, #11
 8005984:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005988:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800598a:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b2f      	cmp	r3, #47	; 0x2f
 80059a4:	d003      	beq.n	80059ae <follow_path+0x1a>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b5c      	cmp	r3, #92	; 0x5c
 80059ac:	d102      	bne.n	80059b4 <follow_path+0x20>
		path++;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ba:	3308      	adds	r3, #8
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b1f      	cmp	r3, #31
 80059c6:	d80c      	bhi.n	80059e2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80059c8:	2100      	movs	r1, #0
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fe ffa5 	bl	800491a <dir_sdi>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059da:	3314      	adds	r3, #20
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e04c      	b.n	8005a7c <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80059e2:	463b      	mov	r3, r7
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fe12 	bl	8005610 <create_name>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d13d      	bne.n	8005a72 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fc04 	bl	8005204 <dir_find>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a06:	3318      	adds	r3, #24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	7adb      	ldrb	r3, [r3, #11]
 8005a0c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d12d      	bne.n	8005a76 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d128      	bne.n	8005a76 <follow_path+0xe2>
 8005a24:	2305      	movs	r3, #5
 8005a26:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005a28:	e025      	b.n	8005a76 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d122      	bne.n	8005a7a <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	330b      	adds	r3, #11
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 8005a4e:	2305      	movs	r3, #5
 8005a50:	73fb      	strb	r3, [r7, #15]
 8005a52:	e013      	b.n	8005a7c <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff f9e9 	bl	8004e36 <ld_clust>
 8005a64:	4602      	mov	r2, r0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a70:	e7b7      	b.n	80059e2 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005a72:	bf00      	nop
 8005a74:	e002      	b.n	8005a7c <follow_path+0xe8>
				break;
 8005a76:	bf00      	nop
 8005a78:	e000      	b.n	8005a7c <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005a7a:	bf00      	nop
		}
	}

	return res;
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d031      	beq.n	8005b00 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e002      	b.n	8005aaa <get_ldnumber+0x24>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b1f      	cmp	r3, #31
 8005ab0:	d903      	bls.n	8005aba <get_ldnumber+0x34>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b3a      	cmp	r3, #58	; 0x3a
 8005ab8:	d1f4      	bne.n	8005aa4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b3a      	cmp	r3, #58	; 0x3a
 8005ac0:	d11c      	bne.n	8005afc <get_ldnumber+0x76>
			tp = *path;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	60fa      	str	r2, [r7, #12]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	3b30      	subs	r3, #48	; 0x30
 8005ad2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d80e      	bhi.n	8005af8 <get_ldnumber+0x72>
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d10a      	bne.n	8005af8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d107      	bne.n	8005af8 <get_ldnumber+0x72>
					vol = (int)i;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3301      	adds	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	e002      	b.n	8005b02 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005b00:	693b      	ldr	r3, [r7, #16]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	2200      	movs	r2, #0
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005b28:	330c      	adds	r3, #12
 8005b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2e:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe fa06 	bl	8003f44 <move_window>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <check_fs+0x36>
		return 3;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e04a      	b.n	8005bd8 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b48:	3301      	adds	r3, #1
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	b21a      	sxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005b56:	b21b      	sxth	r3, r3
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	b21b      	sxth	r3, r3
 8005b5c:	4a20      	ldr	r2, [pc, #128]	; (8005be0 <check_fs+0xd4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d001      	beq.n	8005b66 <check_fs+0x5a>
		return 2;
 8005b62:	2302      	movs	r3, #2
 8005b64:	e038      	b.n	8005bd8 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3336      	adds	r3, #54	; 0x36
 8005b6a:	3303      	adds	r3, #3
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	061a      	lsls	r2, r3, #24
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3336      	adds	r3, #54	; 0x36
 8005b74:	3302      	adds	r3, #2
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	3236      	adds	r2, #54	; 0x36
 8005b80:	3201      	adds	r2, #1
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	0212      	lsls	r2, r2, #8
 8005b86:	4313      	orrs	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <check_fs+0xd8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <check_fs+0x92>
		return 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e01c      	b.n	8005bd8 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3352      	adds	r3, #82	; 0x52
 8005ba2:	3303      	adds	r3, #3
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	061a      	lsls	r2, r3, #24
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3352      	adds	r3, #82	; 0x52
 8005bac:	3302      	adds	r3, #2
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	3252      	adds	r2, #82	; 0x52
 8005bb8:	3201      	adds	r2, #1
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	0212      	lsls	r2, r2, #8
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	4a05      	ldr	r2, [pc, #20]	; (8005be4 <check_fs+0xd8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d101      	bne.n	8005bd6 <check_fs+0xca>
		return 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e000      	b.n	8005bd8 <check_fs+0xcc>

	return 1;
 8005bd6:	2301      	movs	r3, #1
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	ffffaa55 	.word	0xffffaa55
 8005be4:	00544146 	.word	0x00544146

08005be8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b096      	sub	sp, #88	; 0x58
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005bfc:	68b8      	ldr	r0, [r7, #8]
 8005bfe:	f7ff ff42 	bl	8005a86 <get_ldnumber>
 8005c02:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	da01      	bge.n	8005c0e <find_volume+0x26>
 8005c0a:	230b      	movs	r3, #11
 8005c0c:	e33c      	b.n	8006288 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c0e:	4ab3      	ldr	r2, [pc, #716]	; (8005edc <find_volume+0x2f4>)
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <find_volume+0x3a>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	e332      	b.n	8006288 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c26:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01d      	beq.n	8005c70 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fd fe4c 	bl	80038dc <disk_status>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10c      	bne.n	8005c70 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <find_volume+0x84>
 8005c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8005c68:	230a      	movs	r3, #10
 8005c6a:	e30d      	b.n	8006288 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e30b      	b.n	8006288 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c84:	3301      	adds	r3, #1
 8005c86:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8e:	3301      	adds	r3, #1
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd fe3c 	bl	8003910 <disk_initialize>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005c9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005caa:	2303      	movs	r3, #3
 8005cac:	e2ec      	b.n	8006288 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <find_volume+0xdc>
 8005cb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cb8:	f003 0304 	and.w	r3, r3, #4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8005cc0:	230a      	movs	r3, #10
 8005cc2:	e2e1      	b.n	8006288 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cca:	3301      	adds	r3, #1
 8005ccc:	7818      	ldrb	r0, [r3, #0]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd4:	330a      	adds	r3, #10
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2102      	movs	r1, #2
 8005cda:	f7fd fe7f 	bl	80039dc <disk_ioctl>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10f      	bne.n	8005d04 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	330a      	adds	r3, #10
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf2:	d307      	bcc.n	8005d04 <find_volume+0x11c>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfa:	330a      	adds	r3, #10
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d02:	d901      	bls.n	8005d08 <find_volume+0x120>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e2bf      	b.n	8006288 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005d0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d10:	f7ff fefc 	bl	8005b0c <check_fs>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005d1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d155      	bne.n	8005dce <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005d22:	2300      	movs	r3, #0
 8005d24:	643b      	str	r3, [r7, #64]	; 0x40
 8005d26:	e029      	b.n	8005d7c <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005d32:	4413      	add	r3, r2
 8005d34:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	3304      	adds	r3, #4
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d012      	beq.n	8005d66 <find_volume+0x17e>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	330b      	adds	r3, #11
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	061a      	lsls	r2, r3, #24
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	330a      	adds	r3, #10
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	4313      	orrs	r3, r2
 8005d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d54:	3209      	adds	r2, #9
 8005d56:	7812      	ldrb	r2, [r2, #0]
 8005d58:	0212      	lsls	r2, r2, #8
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d5e:	3208      	adds	r2, #8
 8005d60:	7812      	ldrb	r2, [r2, #0]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	e000      	b.n	8005d68 <find_volume+0x180>
 8005d66:	2200      	movs	r2, #0
 8005d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005d70:	440b      	add	r3, r1
 8005d72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d78:	3301      	adds	r3, #1
 8005d7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d9d2      	bls.n	8005d28 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005d82:	2300      	movs	r3, #0
 8005d84:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <find_volume+0x1aa>
 8005d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005da0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d005      	beq.n	8005db4 <find_volume+0x1cc>
 8005da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005daa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dac:	f7ff feae 	bl	8005b0c <check_fs>
 8005db0:	4603      	mov	r3, r0
 8005db2:	e000      	b.n	8005db6 <find_volume+0x1ce>
 8005db4:	2302      	movs	r3, #2
 8005db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <find_volume+0x1e6>
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d9e1      	bls.n	8005d92 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005dce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d101      	bne.n	8005dda <find_volume+0x1f2>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e256      	b.n	8006288 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <find_volume+0x1fe>
 8005de2:	230d      	movs	r3, #13
 8005de4:	e250      	b.n	8006288 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	7b1b      	ldrb	r3, [r3, #12]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	b21a      	sxth	r2, r3
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	7adb      	ldrb	r3, [r3, #11]
 8005df2:	b21b      	sxth	r3, r3
 8005df4:	4313      	orrs	r3, r2
 8005df6:	b21a      	sxth	r2, r3
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	330a      	adds	r3, #10
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b21b      	sxth	r3, r3
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8005e08:	230d      	movs	r3, #13
 8005e0a:	e23d      	b.n	8006288 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	7ddb      	ldrb	r3, [r3, #23]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	b21a      	sxth	r2, r3
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	7d9b      	ldrb	r3, [r3, #22]
 8005e18:	b21b      	sxth	r3, r3
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	b21b      	sxth	r3, r3
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d112      	bne.n	8005e4e <find_volume+0x266>
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005e2e:	061a      	lsls	r2, r3, #24
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005e36:	041b      	lsls	r3, r3, #16
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e3c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8005e40:	0212      	lsls	r2, r2, #8
 8005e42:	4313      	orrs	r3, r2
 8005e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e46:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e54:	3318      	adds	r3, #24
 8005e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e58:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	7c1a      	ldrb	r2, [r3, #16]
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e64:	3303      	adds	r3, #3
 8005e66:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e6e:	3303      	adds	r3, #3
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d008      	beq.n	8005e88 <find_volume+0x2a0>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d001      	beq.n	8005e88 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8005e84:	230d      	movs	r3, #13
 8005e86:	e1ff      	b.n	8006288 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8e:	3303      	adds	r3, #3
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	7b5a      	ldrb	r2, [r3, #13]
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00e      	beq.n	8005ed6 <find_volume+0x2ee>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	3302      	adds	r3, #2
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8005ed6:	230d      	movs	r3, #13
 8005ed8:	e1d6      	b.n	8006288 <find_volume+0x6a0>
 8005eda:	bf00      	nop
 8005edc:	20000210 	.word	0x20000210

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	7c9b      	ldrb	r3, [r3, #18]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	b21a      	sxth	r2, r3
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	7c5b      	ldrb	r3, [r3, #17]
 8005eec:	b21b      	sxth	r3, r3
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	b21b      	sxth	r3, r3
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efa:	3308      	adds	r3, #8
 8005efc:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f04:	3308      	adds	r3, #8
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0e:	330a      	adds	r3, #10
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f1a:	fb03 f301 	mul.w	r3, r3, r1
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8005f26:	230d      	movs	r3, #13
 8005f28:	e1ae      	b.n	8006288 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	7d1b      	ldrb	r3, [r3, #20]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	b21a      	sxth	r2, r3
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	7cdb      	ldrb	r3, [r3, #19]
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	b21b      	sxth	r3, r3
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d112      	bne.n	8005f6c <find_volume+0x384>
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005f4c:	061a      	lsls	r2, r3, #24
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	4313      	orrs	r3, r2
 8005f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f5a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8005f5e:	0212      	lsls	r2, r2, #8
 8005f60:	4313      	orrs	r3, r2
 8005f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	7bdb      	ldrb	r3, [r3, #15]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	b21a      	sxth	r2, r3
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	7b9b      	ldrb	r3, [r3, #14]
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <find_volume+0x3a2>
 8005f86:	230d      	movs	r3, #13
 8005f88:	e17e      	b.n	8006288 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005f8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8e:	441a      	add	r2, r3
 8005f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f96:	3308      	adds	r3, #8
 8005f98:	8819      	ldrh	r1, [r3, #0]
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa0:	330a      	adds	r3, #10
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d201      	bcs.n	8005fbe <find_volume+0x3d6>
 8005fba:	230d      	movs	r3, #13
 8005fbc:	e164      	b.n	8006288 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	3302      	adds	r3, #2
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <find_volume+0x3f6>
 8005fda:	230d      	movs	r3, #13
 8005fdc:	e154      	b.n	8006288 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d902      	bls.n	8005ff4 <find_volume+0x40c>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d902      	bls.n	8006004 <find_volume+0x41c>
 8005ffe:	2303      	movs	r3, #3
 8006000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1c9a      	adds	r2, r3, #2
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600e:	3314      	adds	r3, #20
 8006010:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006018:	331c      	adds	r3, #28
 800601a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800601c:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800601e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006022:	441a      	add	r2, r3
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800602a:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800602c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	441a      	add	r2, r3
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006038:	3308      	adds	r3, #8
 800603a:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 800603c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006040:	2b03      	cmp	r3, #3
 8006042:	d127      	bne.n	8006094 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800604a:	3308      	adds	r3, #8
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <find_volume+0x46e>
 8006052:	230d      	movs	r3, #13
 8006054:	e118      	b.n	8006288 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800605c:	061a      	lsls	r2, r3, #24
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	4313      	orrs	r3, r2
 8006068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800606a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800606e:	0212      	lsls	r2, r2, #8
 8006070:	4313      	orrs	r3, r2
 8006072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006074:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006078:	431a      	orrs	r2, r3
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006080:	3304      	adds	r3, #4
 8006082:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800608a:	3314      	adds	r3, #20
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	647b      	str	r3, [r7, #68]	; 0x44
 8006092:	e030      	b.n	80060f6 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800609a:	3308      	adds	r3, #8
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <find_volume+0x4be>
 80060a2:	230d      	movs	r3, #13
 80060a4:	e0f0      	b.n	8006288 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b0:	441a      	add	r2, r3
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80060b8:	3304      	adds	r3, #4
 80060ba:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80060bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d106      	bne.n	80060d2 <find_volume+0x4ea>
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ca:	3314      	adds	r3, #20
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	e010      	b.n	80060f4 <find_volume+0x50c>
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060d8:	3314      	adds	r3, #20
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	085a      	lsrs	r2, r3, #1
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ea:	3314      	adds	r3, #20
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80060f4:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060fc:	3318      	adds	r3, #24
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006106:	330a      	adds	r3, #10
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	4619      	mov	r1, r3
 800610c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610e:	440b      	add	r3, r1
 8006110:	1e59      	subs	r1, r3, #1
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006118:	330a      	adds	r3, #10
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006120:	429a      	cmp	r2, r3
 8006122:	d201      	bcs.n	8006128 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8006124:	230d      	movs	r3, #13
 8006126:	e0af      	b.n	8006288 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612e:	3310      	adds	r3, #16
 8006130:	f04f 32ff 	mov.w	r2, #4294967295
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613c:	3310      	adds	r3, #16
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006146:	330c      	adds	r3, #12
 8006148:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006150:	3305      	adds	r3, #5
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800615a:	2b03      	cmp	r3, #3
 800615c:	d17d      	bne.n	800625a <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	b21a      	sxth	r2, r3
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800616e:	b21b      	sxth	r3, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	b21b      	sxth	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d170      	bne.n	800625a <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617a:	3301      	adds	r3, #1
 800617c:	4619      	mov	r1, r3
 800617e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006180:	f7fd fee0 	bl	8003f44 <move_window>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d167      	bne.n	800625a <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006190:	3305      	adds	r3, #5
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	b21a      	sxth	r2, r3
 80061a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80061a6:	b21b      	sxth	r3, r3
 80061a8:	4313      	orrs	r3, r2
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	4a38      	ldr	r2, [pc, #224]	; (8006290 <find_volume+0x6a8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d153      	bne.n	800625a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	78db      	ldrb	r3, [r3, #3]
 80061b6:	061a      	lsls	r2, r3, #24
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	789b      	ldrb	r3, [r3, #2]
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	4313      	orrs	r3, r2
 80061c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061c2:	7852      	ldrb	r2, [r2, #1]
 80061c4:	0212      	lsls	r2, r2, #8
 80061c6:	4313      	orrs	r3, r2
 80061c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ca:	7812      	ldrb	r2, [r2, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	4a31      	ldr	r2, [pc, #196]	; (8006294 <find_volume+0x6ac>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d142      	bne.n	800625a <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80061da:	061a      	lsls	r2, r3, #24
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	4313      	orrs	r3, r2
 80061e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e8:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80061ec:	0212      	lsls	r2, r2, #8
 80061ee:	4313      	orrs	r3, r2
 80061f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f2:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80061f6:	4313      	orrs	r3, r2
 80061f8:	4a27      	ldr	r2, [pc, #156]	; (8006298 <find_volume+0x6b0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d12d      	bne.n	800625a <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006204:	061a      	lsls	r2, r3, #24
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	4313      	orrs	r3, r2
 8006210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006212:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006216:	0212      	lsls	r2, r2, #8
 8006218:	4313      	orrs	r3, r2
 800621a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621c:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006220:	431a      	orrs	r2, r3
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006228:	3310      	adds	r3, #16
 800622a:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006232:	061a      	lsls	r2, r3, #24
 8006234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006236:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800623a:	041b      	lsls	r3, r3, #16
 800623c:	4313      	orrs	r3, r2
 800623e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006240:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006244:	0212      	lsls	r2, r2, #8
 8006246:	4313      	orrs	r3, r2
 8006248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800624a:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800624e:	431a      	orrs	r2, r3
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006256:	330c      	adds	r3, #12
 8006258:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006260:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006264:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <find_volume+0x6b4>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	4b0b      	ldr	r3, [pc, #44]	; (800629c <find_volume+0x6b4>)
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <find_volume+0x6b4>)
 8006274:	881a      	ldrh	r2, [r3, #0]
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627c:	3306      	adds	r3, #6
 800627e:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006282:	f7fd fddb 	bl	8003e3c <clear_lock>
#endif

	return FR_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3758      	adds	r7, #88	; 0x58
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	ffffaa55 	.word	0xffffaa55
 8006294:	41615252 	.word	0x41615252
 8006298:	61417272 	.word	0x61417272
 800629c:	20000214 	.word	0x20000214

080062a0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d02d      	beq.n	800630e <validate+0x6e>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d027      	beq.n	800630e <validate+0x6e>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01e      	beq.n	800630e <validate+0x6e>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062dc:	3306      	adds	r3, #6
 80062de:	881a      	ldrh	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062e6:	3304      	adds	r3, #4
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d10f      	bne.n	800630e <validate+0x6e>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062fa:	3301      	adds	r3, #1
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fd faec 	bl	80038dc <disk_status>
 8006304:	4603      	mov	r3, r0
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <validate+0x72>
		return FR_INVALID_OBJECT;
 800630e:	2309      	movs	r3, #9
 8006310:	e000      	b.n	8006314 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b088      	sub	sp, #32
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800632e:	f107 0310 	add.w	r3, r7, #16
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fba7 	bl	8005a86 <get_ldnumber>
 8006338:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	da01      	bge.n	8006344 <f_mount+0x28>
 8006340:	230b      	movs	r3, #11
 8006342:	e02f      	b.n	80063a4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006344:	4a19      	ldr	r2, [pc, #100]	; (80063ac <f_mount+0x90>)
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d007      	beq.n	8006364 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8006354:	69b8      	ldr	r0, [r7, #24]
 8006356:	f7fd fd71 	bl	8003e3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	490d      	ldr	r1, [pc, #52]	; (80063ac <f_mount+0x90>)
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <f_mount+0x6e>
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d001      	beq.n	800638e <f_mount+0x72>
 800638a:	2300      	movs	r3, #0
 800638c:	e00a      	b.n	80063a4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800638e:	f107 0108 	add.w	r1, r7, #8
 8006392:	f107 030c 	add.w	r3, r7, #12
 8006396:	2200      	movs	r2, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fc25 	bl	8005be8 <find_volume>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20000210 	.word	0x20000210

080063b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	f107 0318 	add.w	r3, r7, #24
 80063be:	3b0c      	subs	r3, #12
 80063c0:	6018      	str	r0, [r3, #0]
 80063c2:	f107 0318 	add.w	r3, r7, #24
 80063c6:	3b10      	subs	r3, #16
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	3b11      	subs	r3, #17
 80063d0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80063d2:	f107 0318 	add.w	r3, r7, #24
 80063d6:	3b0c      	subs	r3, #12
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <f_open+0x32>
 80063de:	2309      	movs	r3, #9
 80063e0:	e319      	b.n	8006a16 <f_open+0x666>
	fp->fs = 0;			/* Clear file object */
 80063e2:	f107 0318 	add.w	r3, r7, #24
 80063e6:	3b0c      	subs	r3, #12
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	3b11      	subs	r3, #17
 80063f8:	f107 0218 	add.w	r2, r7, #24
 80063fc:	3a11      	subs	r2, #17
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	f002 021f 	and.w	r2, r2, #31
 8006404:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006406:	f107 0318 	add.w	r3, r7, #24
 800640a:	3b11      	subs	r3, #17
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	f107 0118 	add.w	r1, r7, #24
 8006418:	3910      	subs	r1, #16
 800641a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800641e:	3b18      	subs	r3, #24
 8006420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fbdf 	bl	8005be8 <find_volume>
 800642a:	4603      	mov	r3, r0
 800642c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006430:	f102 0217 	add.w	r2, r2, #23
 8006434:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006436:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800643a:	f103 0317 	add.w	r3, r3, #23
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 82e3 	bne.w	8006a0c <f_open+0x65c>
		INIT_BUF(dj);
 8006446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800644a:	3b18      	subs	r3, #24
 800644c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006450:	3318      	adds	r3, #24
 8006452:	f107 0218 	add.w	r2, r7, #24
 8006456:	3a04      	subs	r2, #4
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800645e:	3b18      	subs	r3, #24
 8006460:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006464:	4ad1      	ldr	r2, [pc, #836]	; (80067ac <f_open+0x3fc>)
 8006466:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006468:	f107 0318 	add.w	r3, r7, #24
 800646c:	3b10      	subs	r3, #16
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006474:	3b18      	subs	r3, #24
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff fa8b 	bl	8005994 <follow_path>
 800647e:	4603      	mov	r3, r0
 8006480:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006484:	f102 0217 	add.w	r2, r2, #23
 8006488:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800648a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800648e:	3b18      	subs	r3, #24
 8006490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006494:	3314      	adds	r3, #20
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800649c:	f102 0210 	add.w	r2, r2, #16
 80064a0:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80064a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80064a6:	f103 0317 	add.w	r3, r3, #23
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d126      	bne.n	80064fe <f_open+0x14e>
			if (!dir)	/* Default directory itself */
 80064b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80064b4:	f103 0310 	add.w	r3, r3, #16
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <f_open+0x11c>
				res = FR_INVALID_NAME;
 80064be:	2306      	movs	r3, #6
 80064c0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80064c4:	f102 0217 	add.w	r2, r2, #23
 80064c8:	7013      	strb	r3, [r2, #0]
 80064ca:	e018      	b.n	80064fe <f_open+0x14e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064cc:	f107 0318 	add.w	r3, r7, #24
 80064d0:	3b11      	subs	r3, #17
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	461a      	mov	r2, r3
 80064e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064e8:	3b18      	subs	r3, #24
 80064ea:	4611      	mov	r1, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fd fb0b 	bl	8003b08 <chk_lock>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80064f8:	f102 0217 	add.w	r2, r2, #23
 80064fc:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80064fe:	f107 0318 	add.w	r3, r7, #24
 8006502:	3b11      	subs	r3, #17
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 031c 	and.w	r3, r3, #28
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8150 	beq.w	80067b0 <f_open+0x400>
			if (res != FR_OK) {					/* No file, create new */
 8006510:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006514:	f103 0317 	add.w	r3, r3, #23
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d030      	beq.n	8006580 <f_open+0x1d0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800651e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006522:	f103 0317 	add.w	r3, r3, #23
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b04      	cmp	r3, #4
 800652a:	d112      	bne.n	8006552 <f_open+0x1a2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800652c:	f7fd fb5e 	bl	8003bec <enq_lock>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <f_open+0x196>
 8006536:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800653a:	3b18      	subs	r3, #24
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe ff37 	bl	80053b0 <dir_register>
 8006542:	4603      	mov	r3, r0
 8006544:	e000      	b.n	8006548 <f_open+0x198>
 8006546:	2312      	movs	r3, #18
 8006548:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800654c:	f102 0217 	add.w	r2, r2, #23
 8006550:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006552:	f107 0318 	add.w	r3, r7, #24
 8006556:	3b11      	subs	r3, #17
 8006558:	f107 0218 	add.w	r2, r7, #24
 800655c:	3a11      	subs	r2, #17
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	f042 0208 	orr.w	r2, r2, #8
 8006564:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8006566:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800656a:	3b18      	subs	r3, #24
 800656c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006570:	3314      	adds	r3, #20
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006578:	f102 0210 	add.w	r2, r2, #16
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e01f      	b.n	80065c0 <f_open+0x210>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006580:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006584:	f103 0310 	add.w	r3, r3, #16
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330b      	adds	r3, #11
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	f003 0311 	and.w	r3, r3, #17
 8006592:	2b00      	cmp	r3, #0
 8006594:	d006      	beq.n	80065a4 <f_open+0x1f4>
					res = FR_DENIED;
 8006596:	2307      	movs	r3, #7
 8006598:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800659c:	f102 0217 	add.w	r2, r2, #23
 80065a0:	7013      	strb	r3, [r2, #0]
 80065a2:	e00d      	b.n	80065c0 <f_open+0x210>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80065a4:	f107 0318 	add.w	r3, r7, #24
 80065a8:	3b11      	subs	r3, #17
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <f_open+0x210>
						res = FR_EXIST;
 80065b4:	2308      	movs	r3, #8
 80065b6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80065ba:	f102 0217 	add.w	r2, r2, #23
 80065be:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80065c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065c4:	f103 0317 	add.w	r3, r3, #23
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f040 8122 	bne.w	8006814 <f_open+0x464>
 80065d0:	f107 0318 	add.w	r3, r7, #24
 80065d4:	3b11      	subs	r3, #17
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 8119 	beq.w	8006814 <f_open+0x464>
				dw = GET_FATTIME();				/* Created time */
 80065e2:	f7fd f923 	bl	800382c <get_fattime>
 80065e6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065ea:	f103 030c 	add.w	r3, r3, #12
 80065ee:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80065f0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80065f4:	f103 0310 	add.w	r3, r3, #16
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330e      	adds	r3, #14
 80065fc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006600:	f102 020c 	add.w	r2, r2, #12
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800660e:	f103 030c 	add.w	r3, r3, #12
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	b29a      	uxth	r2, r3
 800661a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800661e:	f103 0310 	add.w	r3, r3, #16
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330f      	adds	r3, #15
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800662e:	f103 030c 	add.w	r3, r3, #12
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	0c1a      	lsrs	r2, r3, #16
 8006636:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800663a:	f103 0310 	add.w	r3, r3, #16
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3310      	adds	r3, #16
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800664a:	f103 030c 	add.w	r3, r3, #12
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	0e1a      	lsrs	r2, r3, #24
 8006652:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006656:	f103 0310 	add.w	r3, r3, #16
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3311      	adds	r3, #17
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006662:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006666:	f103 0310 	add.w	r3, r3, #16
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330b      	adds	r3, #11
 800666e:	2200      	movs	r2, #0
 8006670:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006672:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006676:	f103 0310 	add.w	r3, r3, #16
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	331c      	adds	r3, #28
 800667e:	2200      	movs	r2, #0
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006686:	f103 0310 	add.w	r3, r3, #16
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	331d      	adds	r3, #29
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006696:	f103 0310 	add.w	r3, r3, #16
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	331e      	adds	r3, #30
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066a6:	f103 0310 	add.w	r3, r3, #16
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	331f      	adds	r3, #31
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80066b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066b6:	3b18      	subs	r3, #24
 80066b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80066c2:	f102 0210 	add.w	r2, r2, #16
 80066c6:	6811      	ldr	r1, [r2, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fbb4 	bl	8004e36 <ld_clust>
 80066ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066d2:	f103 0308 	add.w	r3, r3, #8
 80066d6:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 80066d8:	2100      	movs	r1, #0
 80066da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80066de:	f103 0310 	add.w	r3, r3, #16
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	f7fe fbd5 	bl	8004e92 <st_clust>
				dj.fs->wflag = 1;
 80066e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066ec:	3b18      	subs	r3, #24
 80066ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f8:	3304      	adds	r3, #4
 80066fa:	2201      	movs	r2, #1
 80066fc:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 80066fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006702:	f103 0308 	add.w	r3, r3, #8
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 8083 	beq.w	8006814 <f_open+0x464>
					dw = dj.fs->winsect;
 800670e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006712:	3b18      	subs	r3, #24
 8006714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800671e:	330c      	adds	r3, #12
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006726:	f102 020c 	add.w	r2, r2, #12
 800672a:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800672c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006730:	3b18      	subs	r3, #24
 8006732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800673c:	f102 0208 	add.w	r2, r2, #8
 8006740:	6811      	ldr	r1, [r2, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7fd ff8d 	bl	8004662 <remove_chain>
 8006748:	4603      	mov	r3, r0
 800674a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800674e:	f102 0217 	add.w	r2, r2, #23
 8006752:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8006754:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006758:	f103 0317 	add.w	r3, r3, #23
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d158      	bne.n	8006814 <f_open+0x464>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006766:	3b18      	subs	r3, #24
 8006768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006772:	f102 0208 	add.w	r2, r2, #8
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	3a01      	subs	r2, #1
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	330c      	adds	r3, #12
 8006780:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 8006782:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006786:	3b18      	subs	r3, #24
 8006788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006792:	f102 020c 	add.w	r2, r2, #12
 8006796:	6811      	ldr	r1, [r2, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7fd fbd3 	bl	8003f44 <move_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80067a4:	f102 0217 	add.w	r2, r2, #23
 80067a8:	7013      	strb	r3, [r2, #0]
 80067aa:	e033      	b.n	8006814 <f_open+0x464>
 80067ac:	20000230 	.word	0x20000230
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80067b0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067b4:	f103 0317 	add.w	r3, r3, #23
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d12a      	bne.n	8006814 <f_open+0x464>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80067be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067c2:	f103 0310 	add.w	r3, r3, #16
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	330b      	adds	r3, #11
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <f_open+0x432>
					res = FR_NO_FILE;
 80067d4:	2304      	movs	r3, #4
 80067d6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80067da:	f102 0217 	add.w	r2, r2, #23
 80067de:	7013      	strb	r3, [r2, #0]
 80067e0:	e018      	b.n	8006814 <f_open+0x464>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80067e2:	f107 0318 	add.w	r3, r7, #24
 80067e6:	3b11      	subs	r3, #17
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d010      	beq.n	8006814 <f_open+0x464>
 80067f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80067f6:	f103 0310 	add.w	r3, r3, #16
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330b      	adds	r3, #11
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <f_open+0x464>
						res = FR_DENIED;
 8006808:	2307      	movs	r3, #7
 800680a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800680e:	f102 0217 	add.w	r2, r2, #23
 8006812:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006814:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006818:	f103 0317 	add.w	r3, r3, #23
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d15b      	bne.n	80068da <f_open+0x52a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006822:	f107 0318 	add.w	r3, r7, #24
 8006826:	3b11      	subs	r3, #17
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <f_open+0x496>
				mode |= FA__WRITTEN;
 8006832:	f107 0318 	add.w	r3, r7, #24
 8006836:	3b11      	subs	r3, #17
 8006838:	f107 0218 	add.w	r2, r7, #24
 800683c:	3a11      	subs	r2, #17
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	f042 0220 	orr.w	r2, r2, #32
 8006844:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006846:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800684a:	3b18      	subs	r3, #24
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006856:	330c      	adds	r3, #12
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	f107 0318 	add.w	r3, r7, #24
 800685e:	3b0c      	subs	r3, #12
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006866:	331c      	adds	r3, #28
 8006868:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 800686a:	f107 0318 	add.w	r3, r7, #24
 800686e:	3b0c      	subs	r3, #12
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006876:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800687a:	f102 0210 	add.w	r2, r2, #16
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006882:	f107 0318 	add.w	r3, r7, #24
 8006886:	3b11      	subs	r3, #17
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	bf14      	ite	ne
 8006892:	2301      	movne	r3, #1
 8006894:	2300      	moveq	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800689e:	3b18      	subs	r3, #24
 80068a0:	4611      	mov	r1, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fd f9c6 	bl	8003c34 <inc_lock>
 80068a8:	4602      	mov	r2, r0
 80068aa:	f107 0318 	add.w	r3, r7, #24
 80068ae:	3b0c      	subs	r3, #12
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068b6:	3308      	adds	r3, #8
 80068b8:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 80068ba:	f107 0318 	add.w	r3, r7, #24
 80068be:	3b0c      	subs	r3, #12
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80068c6:	3308      	adds	r3, #8
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d105      	bne.n	80068da <f_open+0x52a>
 80068ce:	2302      	movs	r3, #2
 80068d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80068d4:	f102 0217 	add.w	r2, r2, #23
 80068d8:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80068da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80068de:	f103 0317 	add.w	r3, r3, #23
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 8091 	bne.w	8006a0c <f_open+0x65c>
			fp->flag = mode;					/* File access mode */
 80068ea:	f107 0318 	add.w	r3, r7, #24
 80068ee:	3b0c      	subs	r3, #12
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f6:	3306      	adds	r3, #6
 80068f8:	f107 0218 	add.w	r2, r7, #24
 80068fc:	3a11      	subs	r2, #17
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 8006902:	f107 0318 	add.w	r3, r7, #24
 8006906:	3b0c      	subs	r3, #12
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690e:	3307      	adds	r3, #7
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006918:	3b18      	subs	r3, #24
 800691a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006924:	f102 0210 	add.w	r2, r2, #16
 8006928:	6811      	ldr	r1, [r2, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7fe fa83 	bl	8004e36 <ld_clust>
 8006930:	4602      	mov	r2, r0
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	3b0c      	subs	r3, #12
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693e:	3310      	adds	r3, #16
 8006940:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006942:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006946:	f103 0310 	add.w	r3, r3, #16
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	331f      	adds	r3, #31
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	061a      	lsls	r2, r3, #24
 8006952:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006956:	f103 0310 	add.w	r3, r3, #16
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	331e      	adds	r3, #30
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	041b      	lsls	r3, r3, #16
 8006962:	4313      	orrs	r3, r2
 8006964:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8006968:	f102 0210 	add.w	r2, r2, #16
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	321d      	adds	r2, #29
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	0212      	lsls	r2, r2, #8
 8006974:	4313      	orrs	r3, r2
 8006976:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800697a:	f102 0210 	add.w	r2, r2, #16
 800697e:	6812      	ldr	r2, [r2, #0]
 8006980:	321c      	adds	r2, #28
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	431a      	orrs	r2, r3
 8006986:	f107 0318 	add.w	r3, r7, #24
 800698a:	3b0c      	subs	r3, #12
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	330c      	adds	r3, #12
 8006994:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8006996:	f107 0318 	add.w	r3, r7, #24
 800699a:	3b0c      	subs	r3, #12
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a2:	3308      	adds	r3, #8
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 80069a8:	f107 0318 	add.w	r3, r7, #24
 80069ac:	3b0c      	subs	r3, #12
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069b4:	3318      	adds	r3, #24
 80069b6:	2200      	movs	r2, #0
 80069b8:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80069ba:	f107 0318 	add.w	r3, r7, #24
 80069be:	3b0c      	subs	r3, #12
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80069c6:	3304      	adds	r3, #4
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80069cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069d0:	3b18      	subs	r3, #24
 80069d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	f107 0318 	add.w	r3, r7, #24
 80069dc:	3b0c      	subs	r3, #12
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e4:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 80069e6:	f107 0318 	add.w	r3, r7, #24
 80069ea:	3b0c      	subs	r3, #12
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f8:	3306      	adds	r3, #6
 80069fa:	881a      	ldrh	r2, [r3, #0]
 80069fc:	f107 0318 	add.w	r3, r7, #24
 8006a00:	3b0c      	subs	r3, #12
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a08:	3304      	adds	r3, #4
 8006a0a:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8006a0c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8006a10:	f103 0317 	add.w	r3, r3, #23
 8006a14:	781b      	ldrb	r3, [r3, #0]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop

08006a24 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08c      	sub	sp, #48	; 0x30
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff fc2f 	bl	80062a0 <validate>
 8006a42:	4603      	mov	r3, r0
 8006a44:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006a46:	7ffb      	ldrb	r3, [r7, #31]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <f_read+0x2c>
 8006a4c:	7ffb      	ldrb	r3, [r7, #31]
 8006a4e:	e1fb      	b.n	8006e48 <f_read+0x424>
	if (fp->err)								/* Check error */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a56:	3307      	adds	r3, #7
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a64:	3307      	adds	r3, #7
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	e1ee      	b.n	8006e48 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a70:	3306      	adds	r3, #6
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006a7c:	2307      	movs	r3, #7
 8006a7e:	e1e3      	b.n	8006e48 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a86:	330c      	adds	r3, #12
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a90:	3308      	adds	r3, #8
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	f240 81ce 	bls.w	8006e3e <f_read+0x41a>
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006aa6:	e1ca      	b.n	8006e3e <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aae:	3308      	adds	r3, #8
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006abe:	330a      	adds	r3, #10
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac6:	fb03 f301 	mul.w	r3, r3, r1
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8160 	bne.w	8006d92 <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ad8:	3308      	adds	r3, #8
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae8:	330a      	adds	r3, #10
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afe:	3302      	adds	r3, #2
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	4013      	ands	r3, r2
 8006b08:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d14a      	bne.n	8006ba6 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b16:	3308      	adds	r3, #8
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b24:	3310      	adds	r3, #16
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2a:	e01f      	b.n	8006b6c <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006b32:	3304      	adds	r3, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b40:	3308      	adds	r3, #8
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4619      	mov	r1, r3
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7fd fea4 	bl	8004894 <clmt_clust>
 8006b4c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006b4e:	e00d      	b.n	8006b6c <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	3314      	adds	r3, #20
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fd fb17 	bl	8004198 <get_fat>
 8006b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d807      	bhi.n	8006b82 <f_read+0x15e>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b78:	3307      	adds	r3, #7
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e162      	b.n	8006e48 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d107      	bne.n	8006b9a <f_read+0x176>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b90:	3307      	adds	r3, #7
 8006b92:	2201      	movs	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	2301      	movs	r3, #1
 8006b98:	e156      	b.n	8006e48 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba0:	3314      	adds	r3, #20
 8006ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba4:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb4:	3314      	adds	r3, #20
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4610      	mov	r0, r2
 8006bbc:	f7fd fac5 	bl	800414a <clust2sect>
 8006bc0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <f_read+0x1b4>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bce:	3307      	adds	r3, #7
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e137      	b.n	8006e48 <f_read+0x424>
			sect += csect;
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4413      	add	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bec:	330a      	adds	r3, #10
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d070      	beq.n	8006ce2 <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006c00:	7dfa      	ldrb	r2, [r7, #23]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	441a      	add	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c12:	3302      	adds	r3, #2
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d90b      	bls.n	8006c32 <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c26:	3302      	adds	r3, #2
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	7dfb      	ldrb	r3, [r7, #23]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3e:	3301      	adds	r3, #1
 8006c40:	7818      	ldrb	r0, [r3, #0]
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	6a39      	ldr	r1, [r7, #32]
 8006c48:	f7fc fe88 	bl	800395c <disk_read>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c58:	3307      	adds	r3, #7
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e0f2      	b.n	8006e48 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c68:	3306      	adds	r3, #6
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d028      	beq.n	8006cc6 <f_read+0x2a2>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7a:	3318      	adds	r3, #24
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d91e      	bls.n	8006cc6 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8e:	3318      	adds	r3, #24
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca2:	330a      	adds	r3, #10
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	fb03 f302 	mul.w	r3, r3, r2
 8006caa:	6a3a      	ldr	r2, [r7, #32]
 8006cac:	18d0      	adds	r0, r2, r3
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	330a      	adds	r3, #10
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f7fc fea9 	bl	8003a18 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd2:	330a      	adds	r3, #10
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	fb02 f303 	mul.w	r3, r2, r3
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8006ce0:	e093      	b.n	8006e0a <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce8:	3318      	adds	r3, #24
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d049      	beq.n	8006d86 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf8:	3306      	adds	r3, #6
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d028      	beq.n	8006d56 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d10:	3301      	adds	r3, #1
 8006d12:	7818      	ldrb	r0, [r3, #0]
 8006d14:	68f9      	ldr	r1, [r7, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1c:	3318      	adds	r3, #24
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	2301      	movs	r3, #1
 8006d22:	f7fc fe3b 	bl	800399c <disk_write>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d007      	beq.n	8006d3c <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d32:	3307      	adds	r3, #7
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e085      	b.n	8006e48 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	3306      	adds	r3, #6
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4a:	b2da      	uxtb	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d52:	3306      	adds	r3, #6
 8006d54:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d62:	3301      	adds	r3, #1
 8006d64:	7818      	ldrb	r0, [r3, #0]
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	f7fc fdf6 	bl	800395c <disk_read>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	2201      	movs	r2, #1
 8006d80:	701a      	strb	r2, [r3, #0]
 8006d82:	2301      	movs	r3, #1
 8006d84:	e060      	b.n	8006e48 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9e:	330a      	adds	r3, #10
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006daa:	3308      	adds	r3, #8
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dba:	330a      	adds	r3, #10
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dc2:	fb03 f301 	mul.w	r3, r3, r1
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	1ac3      	subs	r3, r0, r3
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8006dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d901      	bls.n	8006dd8 <f_read+0x3b4>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dde:	3308      	adds	r3, #8
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dee:	330a      	adds	r3, #10
 8006df0:	881b      	ldrh	r3, [r3, #0]
 8006df2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006df6:	fb03 f301 	mul.w	r3, r3, r1
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e02:	4619      	mov	r1, r3
 8006e04:	6a38      	ldr	r0, [r7, #32]
 8006e06:	f7fc fe07 	bl	8003a18 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006e0a:	6a3a      	ldr	r2, [r7, #32]
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	4413      	add	r3, r2
 8006e10:	623b      	str	r3, [r7, #32]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e18:	3308      	adds	r3, #8
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	441a      	add	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e26:	3308      	adds	r3, #8
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	441a      	add	r2, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f ae31 	bne.w	8006aa8 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3730      	adds	r7, #48	; 0x30
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff fa19 	bl	80062a0 <validate>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006e72:	7dfb      	ldrb	r3, [r7, #23]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <f_write+0x2c>
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	e258      	b.n	800732e <f_write+0x4de>
	if (fp->err)							/* Check error */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e82:	3307      	adds	r3, #7
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e90:	3307      	adds	r3, #7
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	e24b      	b.n	800732e <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9c:	3306      	adds	r3, #6
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006ea8:	2307      	movs	r3, #7
 8006eaa:	e240      	b.n	800732e <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	3308      	adds	r3, #8
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	441a      	add	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	f080 8208 	bcs.w	80072da <f_write+0x48a>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006ece:	e204      	b.n	80072da <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed6:	3308      	adds	r3, #8
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ee6:	330a      	adds	r3, #10
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	fbb2 f1f3 	udiv	r1, r2, r3
 8006eee:	fb03 f301 	mul.w	r3, r3, r1
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 818d 	bne.w	8007214 <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f00:	3308      	adds	r3, #8
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f10:	330a      	adds	r3, #10
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f26:	3302      	adds	r3, #2
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	4013      	ands	r3, r2
 8006f30:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006f32:	7dbb      	ldrb	r3, [r7, #22]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d167      	bne.n	8007008 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f3e:	3308      	adds	r3, #8
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d112      	bne.n	8006f6c <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f4c:	3310      	adds	r3, #16
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d129      	bne.n	8006fac <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2100      	movs	r1, #0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd fbe5 	bl	8004732 <create_chain>
 8006f68:	6278      	str	r0, [r7, #36]	; 0x24
 8006f6a:	e01f      	b.n	8006fac <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006f72:	3304      	adds	r3, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f80:	3308      	adds	r3, #8
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7fd fc84 	bl	8004894 <clmt_clust>
 8006f8c:	6278      	str	r0, [r7, #36]	; 0x24
 8006f8e:	e00d      	b.n	8006fac <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f9e:	3314      	adds	r3, #20
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7fd fbc4 	bl	8004732 <create_chain>
 8006faa:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 8198 	beq.w	80072e4 <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d107      	bne.n	8006fca <f_write+0x17a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc0:	3307      	adds	r3, #7
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e1b1      	b.n	800732e <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d107      	bne.n	8006fe2 <f_write+0x192>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd8:	3307      	adds	r3, #7
 8006fda:	2201      	movs	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e1a5      	b.n	800732e <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe8:	3314      	adds	r3, #20
 8006fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fec:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <f_write+0x1b8>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007002:	3310      	adds	r3, #16
 8007004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007006:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800700e:	3306      	adds	r3, #6
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d028      	beq.n	800706c <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007026:	3301      	adds	r3, #1
 8007028:	7818      	ldrb	r0, [r3, #0]
 800702a:	68f9      	ldr	r1, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007032:	3318      	adds	r3, #24
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	2301      	movs	r3, #1
 8007038:	f7fc fcb0 	bl	800399c <disk_write>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007048:	3307      	adds	r3, #7
 800704a:	2201      	movs	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	2301      	movs	r3, #1
 8007050:	e16d      	b.n	800732e <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007058:	3306      	adds	r3, #6
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007068:	3306      	adds	r3, #6
 800706a:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707a:	3314      	adds	r3, #20
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7fd f862 	bl	800414a <clust2sect>
 8007086:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <f_write+0x24e>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007094:	3307      	adds	r3, #7
 8007096:	2202      	movs	r2, #2
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	2302      	movs	r3, #2
 800709c:	e147      	b.n	800732e <f_write+0x4de>
			sect += csect;
 800709e:	7dbb      	ldrb	r3, [r7, #22]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b2:	330a      	adds	r3, #10
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80070be:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d074      	beq.n	80071b0 <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80070c6:	7dba      	ldrb	r2, [r7, #22]
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	441a      	add	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d8:	3302      	adds	r3, #2
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d90b      	bls.n	80070f8 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ec:	3302      	adds	r3, #2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	7dbb      	ldrb	r3, [r7, #22]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007104:	3301      	adds	r3, #1
 8007106:	7818      	ldrb	r0, [r3, #0]
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	69b9      	ldr	r1, [r7, #24]
 800710e:	f7fc fc45 	bl	800399c <disk_write>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711e:	3307      	adds	r3, #7
 8007120:	2201      	movs	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	2301      	movs	r3, #1
 8007126:	e102      	b.n	800732e <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	3318      	adds	r3, #24
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	429a      	cmp	r2, r3
 800713a:	d92b      	bls.n	8007194 <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007144:	3318      	adds	r3, #24
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007158:	330a      	adds	r3, #10
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	fb03 f302 	mul.w	r3, r3, r2
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	18d1      	adds	r1, r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007170:	330a      	adds	r3, #10
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	f7fc fc4f 	bl	8003a18 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007180:	3306      	adds	r3, #6
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007190:	3306      	adds	r3, #6
 8007192:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a0:	330a      	adds	r3, #10
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	fb02 f303 	mul.w	r3, r2, r3
 80071ac:	623b      	str	r3, [r7, #32]
				continue;
 80071ae:	e07a      	b.n	80072a6 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b6:	3318      	adds	r3, #24
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d023      	beq.n	8007208 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c6:	3308      	adds	r3, #8
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d0:	330c      	adds	r3, #12
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d217      	bcs.n	8007208 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e4:	3301      	adds	r3, #1
 80071e6:	7818      	ldrb	r0, [r3, #0]
 80071e8:	68f9      	ldr	r1, [r7, #12]
 80071ea:	2301      	movs	r3, #1
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	f7fc fbb5 	bl	800395c <disk_read>
 80071f2:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	3307      	adds	r3, #7
 8007200:	2201      	movs	r2, #1
 8007202:	701a      	strb	r2, [r3, #0]
 8007204:	2301      	movs	r3, #1
 8007206:	e092      	b.n	800732e <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800720e:	3318      	adds	r3, #24
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007220:	330a      	adds	r3, #10
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800722c:	3308      	adds	r3, #8
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723c:	330a      	adds	r3, #10
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	fbb2 f1f3 	udiv	r1, r2, r3
 8007244:	fb03 f301 	mul.w	r3, r3, r1
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	1ac3      	subs	r3, r0, r3
 800724c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800724e:	6a3a      	ldr	r2, [r7, #32]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	429a      	cmp	r2, r3
 8007254:	d901      	bls.n	800725a <f_write+0x40a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007260:	3308      	adds	r3, #8
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007270:	330a      	adds	r3, #10
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	fbb2 f1f3 	udiv	r1, r2, r3
 8007278:	fb03 f301 	mul.w	r3, r3, r1
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	4618      	mov	r0, r3
 8007288:	f7fc fbc6 	bl	8003a18 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007292:	3306      	adds	r3, #6
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800729a:	b2da      	uxtb	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a2:	3306      	adds	r3, #6
 80072a4:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	4413      	add	r3, r2
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b4:	3308      	adds	r3, #8
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	441a      	add	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c2:	3308      	adds	r3, #8
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	441a      	add	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	6a3b      	ldr	r3, [r7, #32]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f47f adf7 	bne.w	8006ed0 <f_write+0x80>
 80072e2:	e000      	b.n	80072e6 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80072e4:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ec:	3308      	adds	r3, #8
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f6:	330c      	adds	r3, #12
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d909      	bls.n	8007312 <f_write+0x4c2>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007304:	3308      	adds	r3, #8
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800730e:	330c      	adds	r3, #12
 8007310:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007318:	3306      	adds	r3, #6
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f043 0320 	orr.w	r3, r3, #32
 8007320:	b2da      	uxtb	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007328:	3306      	adds	r3, #6
 800732a:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3728      	adds	r7, #40	; 0x28
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fe ffae 	bl	80062a0 <validate>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 80cc 	bne.w	80074e8 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007356:	3306      	adds	r3, #6
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80c2 	beq.w	80074e8 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800736a:	3306      	adds	r3, #6
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d022      	beq.n	80073bc <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007382:	3301      	adds	r3, #1
 8007384:	7818      	ldrb	r0, [r3, #0]
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800738e:	3318      	adds	r3, #24
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	2301      	movs	r3, #1
 8007394:	f7fc fb02 	bl	800399c <disk_write>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800739e:	2301      	movs	r3, #1
 80073a0:	e0a3      	b.n	80074ea <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073a8:	3306      	adds	r3, #6
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b8:	3306      	adds	r3, #6
 80073ba:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ca:	331c      	adds	r3, #28
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f7fc fdb7 	bl	8003f44 <move_window>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80073da:	7dfb      	ldrb	r3, [r7, #23]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8083 	bne.w	80074e8 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	330b      	adds	r3, #11
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	330b      	adds	r3, #11
 80073f6:	f042 0220 	orr.w	r2, r2, #32
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007404:	330c      	adds	r3, #12
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	331c      	adds	r3, #28
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007416:	330c      	adds	r3, #12
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	b29a      	uxth	r2, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	331d      	adds	r3, #29
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742e:	330c      	adds	r3, #12
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	0c1a      	lsrs	r2, r3, #16
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	331e      	adds	r3, #30
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007442:	330c      	adds	r3, #12
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	0e1a      	lsrs	r2, r3, #24
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	331f      	adds	r3, #31
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007456:	3310      	adds	r3, #16
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	6938      	ldr	r0, [r7, #16]
 800745e:	f7fd fd18 	bl	8004e92 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007462:	f7fc f9e3 	bl	800382c <get_fattime>
 8007466:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	3316      	adds	r3, #22
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	b29b      	uxth	r3, r3
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	b29a      	uxth	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3317      	adds	r3, #23
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	0c1a      	lsrs	r2, r3, #16
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3318      	adds	r3, #24
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	0e1a      	lsrs	r2, r3, #24
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3319      	adds	r3, #25
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	3312      	adds	r3, #18
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3313      	adds	r3, #19
 80074a6:	2200      	movs	r2, #0
 80074a8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b0:	3306      	adds	r3, #6
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	f023 0320 	bic.w	r3, r3, #32
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074c0:	3306      	adds	r3, #6
 80074c2:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074d0:	3304      	adds	r3, #4
 80074d2:	2201      	movs	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fc fd64 	bl	8003fac <sync_fs>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff1b 	bl	8007336 <f_sync>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d119      	bne.n	800753e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7fe fec8 	bl	80062a0 <validate>
 8007510:	4603      	mov	r3, r0
 8007512:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d111      	bne.n	800753e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007520:	3308      	adds	r3, #8
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4618      	mov	r0, r3
 8007526:	f7fc fc45 	bl	8003db4 <dec_lock>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800753e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b08e      	sub	sp, #56	; 0x38
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007554:	f107 030c 	add.w	r3, r7, #12
 8007558:	2200      	movs	r2, #0
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fe fb43 	bl	8005be8 <find_volume>
 8007562:	4603      	mov	r3, r0
 8007564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 800756e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 80c4 	bne.w	8007700 <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800757e:	3310      	adds	r3, #16
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007588:	3314      	adds	r3, #20
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3b02      	subs	r3, #2
 800758e:	429a      	cmp	r2, r3
 8007590:	d807      	bhi.n	80075a2 <f_getfree+0x5a>
			*nclst = fs->free_clust;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007598:	3310      	adds	r3, #16
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	e0ae      	b.n	8007700 <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80075b0:	7efb      	ldrb	r3, [r7, #27]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d127      	bne.n	8007606 <f_getfree+0xbe>
				clst = 2;
 80075b6:	2302      	movs	r3, #2
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80075ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075bc:	69f8      	ldr	r0, [r7, #28]
 80075be:	f7fc fdeb 	bl	8004198 <get_fat>
 80075c2:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ca:	d103      	bne.n	80075d4 <f_getfree+0x8c>
 80075cc:	2301      	movs	r3, #1
 80075ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80075d2:	e07f      	b.n	80076d4 <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d103      	bne.n	80075e2 <f_getfree+0x9a>
 80075da:	2302      	movs	r3, #2
 80075dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80075e0:	e078      	b.n	80076d4 <f_getfree+0x18c>
					if (stat == 0) n++;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <f_getfree+0xa6>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	3301      	adds	r3, #1
 80075ec:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	3301      	adds	r3, #1
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fa:	3314      	adds	r3, #20
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007600:	429a      	cmp	r2, r3
 8007602:	d3da      	bcc.n	80075ba <f_getfree+0x72>
 8007604:	e066      	b.n	80076d4 <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800760c:	3314      	adds	r3, #20
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
 8007620:	2300      	movs	r3, #0
 8007622:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2b00      	cmp	r3, #0
 8007628:	d115      	bne.n	8007656 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 800762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007630:	4619      	mov	r1, r3
 8007632:	69f8      	ldr	r0, [r7, #28]
 8007634:	f7fc fc86 	bl	8003f44 <move_window>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 800763e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007642:	2b00      	cmp	r3, #0
 8007644:	d145      	bne.n	80076d2 <f_getfree+0x18a>
						p = fs->win.d8;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007650:	330a      	adds	r3, #10
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8007656:	7efb      	ldrb	r3, [r7, #27]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d115      	bne.n	8007688 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	3301      	adds	r3, #1
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	b21a      	sxth	r2, r3
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b21b      	sxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b21b      	sxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <f_getfree+0x132>
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	3301      	adds	r3, #1
 8007678:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	3302      	adds	r3, #2
 800767e:	623b      	str	r3, [r7, #32]
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	3b02      	subs	r3, #2
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
 8007686:	e01d      	b.n	80076c4 <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	061a      	lsls	r2, r3, #24
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	3302      	adds	r3, #2
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	4313      	orrs	r3, r2
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	3201      	adds	r2, #1
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	0212      	lsls	r2, r2, #8
 80076a2:	4313      	orrs	r3, r2
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <f_getfree+0x170>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	3301      	adds	r3, #1
 80076b6:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	3304      	adds	r3, #4
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	3b04      	subs	r3, #4
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	3b01      	subs	r3, #1
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1a9      	bne.n	8007624 <f_getfree+0xdc>
 80076d0:	e000      	b.n	80076d4 <f_getfree+0x18c>
						if (res != FR_OK) break;
 80076d2:	bf00      	nop
			}
			fs->free_clust = n;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076da:	3310      	adds	r3, #16
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076e6:	3305      	adds	r3, #5
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f6:	3305      	adds	r3, #5
 80076f8:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fe:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8007704:	4618      	mov	r0, r3
 8007706:	3738      	adds	r7, #56	; 0x38
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007720:	e01b      	b.n	800775a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007722:	f107 0310 	add.w	r3, r7, #16
 8007726:	f107 0114 	add.w	r1, r7, #20
 800772a:	2201      	movs	r2, #1
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f7ff f979 	bl	8006a24 <f_read>
		if (rc != 1) break;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d116      	bne.n	8007766 <f_gets+0x5a>
		c = s[0];
 8007738:	7d3b      	ldrb	r3, [r7, #20]
 800773a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b0d      	cmp	r3, #13
 8007740:	d100      	bne.n	8007744 <f_gets+0x38>
 8007742:	e00a      	b.n	800775a <f_gets+0x4e>
		*p++ = c;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	61ba      	str	r2, [r7, #24]
 800774a:	7dfa      	ldrb	r2, [r7, #23]
 800774c:	701a      	strb	r2, [r3, #0]
		n++;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	3301      	adds	r3, #1
 8007752:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b0a      	cmp	r3, #10
 8007758:	d007      	beq.n	800776a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	3b01      	subs	r3, #1
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	429a      	cmp	r2, r3
 8007762:	dbde      	blt.n	8007722 <f_gets+0x16>
 8007764:	e002      	b.n	800776c <f_gets+0x60>
		if (rc != 1) break;
 8007766:	bf00      	nop
 8007768:	e000      	b.n	800776c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800776a:	bf00      	nop
	}
	*p = 0;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2200      	movs	r2, #0
 8007770:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <f_gets+0x70>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	e000      	b.n	800777e <f_gets+0x72>
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	2b0a      	cmp	r3, #10
 8007796:	d103      	bne.n	80077a0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007798:	210d      	movs	r1, #13
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fff3 	bl	8007786 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	db25      	blt.n	80077f8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	60fa      	str	r2, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b3c      	cmp	r3, #60	; 0x3c
 80077be:	dd12      	ble.n	80077e6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f103 010c 	add.w	r1, r3, #12
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	f107 0308 	add.w	r3, r7, #8
 80077d0:	f7ff fb3e 	bl	8006e50 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d101      	bne.n	80077e0 <putc_bfd+0x5a>
 80077dc:	2300      	movs	r3, #0
 80077de:	e001      	b.n	80077e4 <putc_bfd+0x5e>
 80077e0:	f04f 33ff 	mov.w	r3, #4294967295
 80077e4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	609a      	str	r2, [r3, #8]
 80077f6:	e000      	b.n	80077fa <putc_bfd+0x74>
	if (i < 0) return;
 80077f8:	bf00      	nop
}
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b097      	sub	sp, #92	; 0x5c
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8007816:	e009      	b.n	800782c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	607a      	str	r2, [r7, #4]
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff ffad 	bl	8007786 <putc_bfd>
	while (*str)			/* Put the string */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f1      	bne.n	8007818 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	db15      	blt.n	8007866 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	461c      	mov	r4, r3
 8007840:	f107 0208 	add.w	r2, r7, #8
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	f103 010c 	add.w	r1, r3, #12
 800784c:	4613      	mov	r3, r2
 800784e:	4622      	mov	r2, r4
 8007850:	f7ff fafe 	bl	8006e50 <f_write>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d105      	bne.n	8007866 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4293      	cmp	r3, r2
 8007860:	d101      	bne.n	8007866 <f_puts+0x66>
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	e001      	b.n	800786a <f_puts+0x6a>
	return EOF;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800786a:	4618      	mov	r0, r3
 800786c:	375c      	adds	r7, #92	; 0x5c
 800786e:	46bd      	mov	sp, r7
 8007870:	bd90      	pop	{r4, r7, pc}
	...

08007874 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007882:	2301      	movs	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800788a:	4b1e      	ldr	r3, [pc, #120]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 800788c:	7a5b      	ldrb	r3, [r3, #9]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	d831      	bhi.n	80078f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 8007896:	7a5b      	ldrb	r3, [r3, #9]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 800789e:	2100      	movs	r1, #0
 80078a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80078a2:	4b18      	ldr	r3, [pc, #96]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 80078a4:	7a5b      	ldrb	r3, [r3, #9]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4a16      	ldr	r2, [pc, #88]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80078b2:	4b14      	ldr	r3, [pc, #80]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 80078b4:	7a5b      	ldrb	r3, [r3, #9]
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 80078bc:	4413      	add	r3, r2
 80078be:	79fa      	ldrb	r2, [r7, #7]
 80078c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078c2:	4b10      	ldr	r3, [pc, #64]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 80078c4:	7a5b      	ldrb	r3, [r3, #9]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	b2d1      	uxtb	r1, r2
 80078cc:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <FATFS_LinkDriverEx+0x90>)
 80078ce:	7251      	strb	r1, [r2, #9]
 80078d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80078d2:	7dbb      	ldrb	r3, [r7, #22]
 80078d4:	3330      	adds	r3, #48	; 0x30
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	3301      	adds	r3, #1
 80078e0:	223a      	movs	r2, #58	; 0x3a
 80078e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	3302      	adds	r3, #2
 80078e8:	222f      	movs	r2, #47	; 0x2f
 80078ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3303      	adds	r3, #3
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr
 8007904:	20000430 	.word	0x20000430

08007908 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007912:	2200      	movs	r2, #0
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff ffac 	bl	8007874 <FATFS_LinkDriverEx>
 800791c:	4603      	mov	r3, r0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	6039      	str	r1, [r7, #0]
 8007932:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007934:	88fb      	ldrh	r3, [r7, #6]
 8007936:	2b7f      	cmp	r3, #127	; 0x7f
 8007938:	d802      	bhi.n	8007940 <ff_convert+0x18>
		c = chr;
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	81fb      	strh	r3, [r7, #14]
 800793e:	e025      	b.n	800798c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00b      	beq.n	800795e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	2bff      	cmp	r3, #255	; 0xff
 800794a:	d805      	bhi.n	8007958 <ff_convert+0x30>
 800794c:	88fb      	ldrh	r3, [r7, #6]
 800794e:	3b80      	subs	r3, #128	; 0x80
 8007950:	4a11      	ldr	r2, [pc, #68]	; (8007998 <ff_convert+0x70>)
 8007952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007956:	e000      	b.n	800795a <ff_convert+0x32>
 8007958:	2300      	movs	r3, #0
 800795a:	81fb      	strh	r3, [r7, #14]
 800795c:	e016      	b.n	800798c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800795e:	2300      	movs	r3, #0
 8007960:	81fb      	strh	r3, [r7, #14]
 8007962:	e009      	b.n	8007978 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007964:	89fb      	ldrh	r3, [r7, #14]
 8007966:	4a0c      	ldr	r2, [pc, #48]	; (8007998 <ff_convert+0x70>)
 8007968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	429a      	cmp	r2, r3
 8007970:	d006      	beq.n	8007980 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007972:	89fb      	ldrh	r3, [r7, #14]
 8007974:	3301      	adds	r3, #1
 8007976:	81fb      	strh	r3, [r7, #14]
 8007978:	89fb      	ldrh	r3, [r7, #14]
 800797a:	2b7f      	cmp	r3, #127	; 0x7f
 800797c:	d9f2      	bls.n	8007964 <ff_convert+0x3c>
 800797e:	e000      	b.n	8007982 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007980:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007982:	89fb      	ldrh	r3, [r7, #14]
 8007984:	3380      	adds	r3, #128	; 0x80
 8007986:	b29b      	uxth	r3, r3
 8007988:	b2db      	uxtb	r3, r3
 800798a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800798c:	89fb      	ldrh	r3, [r7, #14]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr
 8007998:	0800a8fc 	.word	0x0800a8fc

0800799c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	e002      	b.n	80079b2 <ff_wtoupper+0x16>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <ff_wtoupper+0x54>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d006      	beq.n	80079cc <ff_wtoupper+0x30>
 80079be:	4a0c      	ldr	r2, [pc, #48]	; (80079f0 <ff_wtoupper+0x54>)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c6:	88fa      	ldrh	r2, [r7, #6]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d1ef      	bne.n	80079ac <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80079cc:	4a08      	ldr	r2, [pc, #32]	; (80079f0 <ff_wtoupper+0x54>)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <ff_wtoupper+0x46>
 80079d8:	4a06      	ldr	r2, [pc, #24]	; (80079f4 <ff_wtoupper+0x58>)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079e0:	e000      	b.n	80079e4 <ff_wtoupper+0x48>
 80079e2:	88fb      	ldrh	r3, [r7, #6]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	0800a9fc 	.word	0x0800a9fc
 80079f4:	0800abdc 	.word	0x0800abdc

080079f8 <__errno>:
 80079f8:	4b01      	ldr	r3, [pc, #4]	; (8007a00 <__errno+0x8>)
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000020 	.word	0x20000020

08007a04 <__sflush_r>:
 8007a04:	898a      	ldrh	r2, [r1, #12]
 8007a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	0710      	lsls	r0, r2, #28
 8007a0e:	460c      	mov	r4, r1
 8007a10:	d458      	bmi.n	8007ac4 <__sflush_r+0xc0>
 8007a12:	684b      	ldr	r3, [r1, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dc05      	bgt.n	8007a24 <__sflush_r+0x20>
 8007a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dc02      	bgt.n	8007a24 <__sflush_r+0x20>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a26:	2e00      	cmp	r6, #0
 8007a28:	d0f9      	beq.n	8007a1e <__sflush_r+0x1a>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a30:	682f      	ldr	r7, [r5, #0]
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	d032      	beq.n	8007a9c <__sflush_r+0x98>
 8007a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	075a      	lsls	r2, r3, #29
 8007a3c:	d505      	bpl.n	8007a4a <__sflush_r+0x46>
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	1ac0      	subs	r0, r0, r3
 8007a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a44:	b10b      	cbz	r3, 8007a4a <__sflush_r+0x46>
 8007a46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a48:	1ac0      	subs	r0, r0, r3
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a50:	4628      	mov	r0, r5
 8007a52:	6a21      	ldr	r1, [r4, #32]
 8007a54:	47b0      	blx	r6
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	d106      	bne.n	8007a6a <__sflush_r+0x66>
 8007a5c:	6829      	ldr	r1, [r5, #0]
 8007a5e:	291d      	cmp	r1, #29
 8007a60:	d82c      	bhi.n	8007abc <__sflush_r+0xb8>
 8007a62:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <__sflush_r+0x108>)
 8007a64:	40ca      	lsrs	r2, r1
 8007a66:	07d6      	lsls	r6, r2, #31
 8007a68:	d528      	bpl.n	8007abc <__sflush_r+0xb8>
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	6062      	str	r2, [r4, #4]
 8007a6e:	6922      	ldr	r2, [r4, #16]
 8007a70:	04d9      	lsls	r1, r3, #19
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	d504      	bpl.n	8007a80 <__sflush_r+0x7c>
 8007a76:	1c42      	adds	r2, r0, #1
 8007a78:	d101      	bne.n	8007a7e <__sflush_r+0x7a>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	b903      	cbnz	r3, 8007a80 <__sflush_r+0x7c>
 8007a7e:	6560      	str	r0, [r4, #84]	; 0x54
 8007a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a82:	602f      	str	r7, [r5, #0]
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d0ca      	beq.n	8007a1e <__sflush_r+0x1a>
 8007a88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a8c:	4299      	cmp	r1, r3
 8007a8e:	d002      	beq.n	8007a96 <__sflush_r+0x92>
 8007a90:	4628      	mov	r0, r5
 8007a92:	f000 f9bf 	bl	8007e14 <_free_r>
 8007a96:	2000      	movs	r0, #0
 8007a98:	6360      	str	r0, [r4, #52]	; 0x34
 8007a9a:	e7c1      	b.n	8007a20 <__sflush_r+0x1c>
 8007a9c:	6a21      	ldr	r1, [r4, #32]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	47b0      	blx	r6
 8007aa4:	1c41      	adds	r1, r0, #1
 8007aa6:	d1c7      	bne.n	8007a38 <__sflush_r+0x34>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0c4      	beq.n	8007a38 <__sflush_r+0x34>
 8007aae:	2b1d      	cmp	r3, #29
 8007ab0:	d001      	beq.n	8007ab6 <__sflush_r+0xb2>
 8007ab2:	2b16      	cmp	r3, #22
 8007ab4:	d101      	bne.n	8007aba <__sflush_r+0xb6>
 8007ab6:	602f      	str	r7, [r5, #0]
 8007ab8:	e7b1      	b.n	8007a1e <__sflush_r+0x1a>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	e7ad      	b.n	8007a20 <__sflush_r+0x1c>
 8007ac4:	690f      	ldr	r7, [r1, #16]
 8007ac6:	2f00      	cmp	r7, #0
 8007ac8:	d0a9      	beq.n	8007a1e <__sflush_r+0x1a>
 8007aca:	0793      	lsls	r3, r2, #30
 8007acc:	bf18      	it	ne
 8007ace:	2300      	movne	r3, #0
 8007ad0:	680e      	ldr	r6, [r1, #0]
 8007ad2:	bf08      	it	eq
 8007ad4:	694b      	ldreq	r3, [r1, #20]
 8007ad6:	eba6 0807 	sub.w	r8, r6, r7
 8007ada:	600f      	str	r7, [r1, #0]
 8007adc:	608b      	str	r3, [r1, #8]
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	dd9c      	ble.n	8007a1e <__sflush_r+0x1a>
 8007ae4:	4643      	mov	r3, r8
 8007ae6:	463a      	mov	r2, r7
 8007ae8:	4628      	mov	r0, r5
 8007aea:	6a21      	ldr	r1, [r4, #32]
 8007aec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aee:	47b0      	blx	r6
 8007af0:	2800      	cmp	r0, #0
 8007af2:	dc06      	bgt.n	8007b02 <__sflush_r+0xfe>
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	f04f 30ff 	mov.w	r0, #4294967295
 8007afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	e78e      	b.n	8007a20 <__sflush_r+0x1c>
 8007b02:	4407      	add	r7, r0
 8007b04:	eba8 0800 	sub.w	r8, r8, r0
 8007b08:	e7e9      	b.n	8007ade <__sflush_r+0xda>
 8007b0a:	bf00      	nop
 8007b0c:	20400001 	.word	0x20400001

08007b10 <_fflush_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	690b      	ldr	r3, [r1, #16]
 8007b14:	4605      	mov	r5, r0
 8007b16:	460c      	mov	r4, r1
 8007b18:	b913      	cbnz	r3, 8007b20 <_fflush_r+0x10>
 8007b1a:	2500      	movs	r5, #0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	b118      	cbz	r0, 8007b2a <_fflush_r+0x1a>
 8007b22:	6983      	ldr	r3, [r0, #24]
 8007b24:	b90b      	cbnz	r3, 8007b2a <_fflush_r+0x1a>
 8007b26:	f000 f899 	bl	8007c5c <__sinit>
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <_fflush_r+0x6c>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d11b      	bne.n	8007b68 <_fflush_r+0x58>
 8007b30:	686c      	ldr	r4, [r5, #4]
 8007b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ef      	beq.n	8007b1a <_fflush_r+0xa>
 8007b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b3c:	07d0      	lsls	r0, r2, #31
 8007b3e:	d404      	bmi.n	8007b4a <_fflush_r+0x3a>
 8007b40:	0599      	lsls	r1, r3, #22
 8007b42:	d402      	bmi.n	8007b4a <_fflush_r+0x3a>
 8007b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b46:	f000 f94c 	bl	8007de2 <__retarget_lock_acquire_recursive>
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	f7ff ff59 	bl	8007a04 <__sflush_r>
 8007b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b54:	4605      	mov	r5, r0
 8007b56:	07da      	lsls	r2, r3, #31
 8007b58:	d4e0      	bmi.n	8007b1c <_fflush_r+0xc>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	059b      	lsls	r3, r3, #22
 8007b5e:	d4dd      	bmi.n	8007b1c <_fflush_r+0xc>
 8007b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b62:	f000 f93f 	bl	8007de4 <__retarget_lock_release_recursive>
 8007b66:	e7d9      	b.n	8007b1c <_fflush_r+0xc>
 8007b68:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <_fflush_r+0x70>)
 8007b6a:	429c      	cmp	r4, r3
 8007b6c:	d101      	bne.n	8007b72 <_fflush_r+0x62>
 8007b6e:	68ac      	ldr	r4, [r5, #8]
 8007b70:	e7df      	b.n	8007b32 <_fflush_r+0x22>
 8007b72:	4b04      	ldr	r3, [pc, #16]	; (8007b84 <_fflush_r+0x74>)
 8007b74:	429c      	cmp	r4, r3
 8007b76:	bf08      	it	eq
 8007b78:	68ec      	ldreq	r4, [r5, #12]
 8007b7a:	e7da      	b.n	8007b32 <_fflush_r+0x22>
 8007b7c:	0800addc 	.word	0x0800addc
 8007b80:	0800adfc 	.word	0x0800adfc
 8007b84:	0800adbc 	.word	0x0800adbc

08007b88 <fflush>:
 8007b88:	4601      	mov	r1, r0
 8007b8a:	b920      	cbnz	r0, 8007b96 <fflush+0xe>
 8007b8c:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <fflush+0x18>)
 8007b8e:	4905      	ldr	r1, [pc, #20]	; (8007ba4 <fflush+0x1c>)
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f000 b8e1 	b.w	8007d58 <_fwalk_reent>
 8007b96:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <fflush+0x20>)
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	f7ff bfb9 	b.w	8007b10 <_fflush_r>
 8007b9e:	bf00      	nop
 8007ba0:	0800ae1c 	.word	0x0800ae1c
 8007ba4:	08007b11 	.word	0x08007b11
 8007ba8:	20000020 	.word	0x20000020

08007bac <std>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bba:	6083      	str	r3, [r0, #8]
 8007bbc:	8181      	strh	r1, [r0, #12]
 8007bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8007bc0:	81c2      	strh	r2, [r0, #14]
 8007bc2:	6183      	str	r3, [r0, #24]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	305c      	adds	r0, #92	; 0x5c
 8007bca:	f000 f91a 	bl	8007e02 <memset>
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <std+0x38>)
 8007bd0:	6224      	str	r4, [r4, #32]
 8007bd2:	6263      	str	r3, [r4, #36]	; 0x24
 8007bd4:	4b04      	ldr	r3, [pc, #16]	; (8007be8 <std+0x3c>)
 8007bd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <std+0x40>)
 8007bda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <std+0x44>)
 8007bde:	6323      	str	r3, [r4, #48]	; 0x30
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	0800895d 	.word	0x0800895d
 8007be8:	0800897f 	.word	0x0800897f
 8007bec:	080089b7 	.word	0x080089b7
 8007bf0:	080089db 	.word	0x080089db

08007bf4 <_cleanup_r>:
 8007bf4:	4901      	ldr	r1, [pc, #4]	; (8007bfc <_cleanup_r+0x8>)
 8007bf6:	f000 b8af 	b.w	8007d58 <_fwalk_reent>
 8007bfa:	bf00      	nop
 8007bfc:	08007b11 	.word	0x08007b11

08007c00 <__sfmoreglue>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	2568      	movs	r5, #104	; 0x68
 8007c04:	1e4a      	subs	r2, r1, #1
 8007c06:	4355      	muls	r5, r2
 8007c08:	460e      	mov	r6, r1
 8007c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c0e:	f000 f94d 	bl	8007eac <_malloc_r>
 8007c12:	4604      	mov	r4, r0
 8007c14:	b140      	cbz	r0, 8007c28 <__sfmoreglue+0x28>
 8007c16:	2100      	movs	r1, #0
 8007c18:	e9c0 1600 	strd	r1, r6, [r0]
 8007c1c:	300c      	adds	r0, #12
 8007c1e:	60a0      	str	r0, [r4, #8]
 8007c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c24:	f000 f8ed 	bl	8007e02 <memset>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}

08007c2c <__sfp_lock_acquire>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	; (8007c34 <__sfp_lock_acquire+0x8>)
 8007c2e:	f000 b8d8 	b.w	8007de2 <__retarget_lock_acquire_recursive>
 8007c32:	bf00      	nop
 8007c34:	2000467c 	.word	0x2000467c

08007c38 <__sfp_lock_release>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sfp_lock_release+0x8>)
 8007c3a:	f000 b8d3 	b.w	8007de4 <__retarget_lock_release_recursive>
 8007c3e:	bf00      	nop
 8007c40:	2000467c 	.word	0x2000467c

08007c44 <__sinit_lock_acquire>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__sinit_lock_acquire+0x8>)
 8007c46:	f000 b8cc 	b.w	8007de2 <__retarget_lock_acquire_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	20004677 	.word	0x20004677

08007c50 <__sinit_lock_release>:
 8007c50:	4801      	ldr	r0, [pc, #4]	; (8007c58 <__sinit_lock_release+0x8>)
 8007c52:	f000 b8c7 	b.w	8007de4 <__retarget_lock_release_recursive>
 8007c56:	bf00      	nop
 8007c58:	20004677 	.word	0x20004677

08007c5c <__sinit>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4604      	mov	r4, r0
 8007c60:	f7ff fff0 	bl	8007c44 <__sinit_lock_acquire>
 8007c64:	69a3      	ldr	r3, [r4, #24]
 8007c66:	b11b      	cbz	r3, 8007c70 <__sinit+0x14>
 8007c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6c:	f7ff bff0 	b.w	8007c50 <__sinit_lock_release>
 8007c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c74:	6523      	str	r3, [r4, #80]	; 0x50
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <__sinit+0x68>)
 8007c78:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <__sinit+0x6c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	bf08      	it	eq
 8007c82:	2301      	moveq	r3, #1
 8007c84:	4620      	mov	r0, r4
 8007c86:	bf08      	it	eq
 8007c88:	61a3      	streq	r3, [r4, #24]
 8007c8a:	f000 f81f 	bl	8007ccc <__sfp>
 8007c8e:	6060      	str	r0, [r4, #4]
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 f81b 	bl	8007ccc <__sfp>
 8007c96:	60a0      	str	r0, [r4, #8]
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f817 	bl	8007ccc <__sfp>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	60e0      	str	r0, [r4, #12]
 8007ca4:	6860      	ldr	r0, [r4, #4]
 8007ca6:	f7ff ff81 	bl	8007bac <std>
 8007caa:	2201      	movs	r2, #1
 8007cac:	2109      	movs	r1, #9
 8007cae:	68a0      	ldr	r0, [r4, #8]
 8007cb0:	f7ff ff7c 	bl	8007bac <std>
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	2112      	movs	r1, #18
 8007cb8:	68e0      	ldr	r0, [r4, #12]
 8007cba:	f7ff ff77 	bl	8007bac <std>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61a3      	str	r3, [r4, #24]
 8007cc2:	e7d1      	b.n	8007c68 <__sinit+0xc>
 8007cc4:	0800ae1c 	.word	0x0800ae1c
 8007cc8:	08007bf5 	.word	0x08007bf5

08007ccc <__sfp>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f7ff ffac 	bl	8007c2c <__sfp_lock_acquire>
 8007cd4:	4b1e      	ldr	r3, [pc, #120]	; (8007d50 <__sfp+0x84>)
 8007cd6:	681e      	ldr	r6, [r3, #0]
 8007cd8:	69b3      	ldr	r3, [r6, #24]
 8007cda:	b913      	cbnz	r3, 8007ce2 <__sfp+0x16>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff ffbd 	bl	8007c5c <__sinit>
 8007ce2:	3648      	adds	r6, #72	; 0x48
 8007ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	d503      	bpl.n	8007cf4 <__sfp+0x28>
 8007cec:	6833      	ldr	r3, [r6, #0]
 8007cee:	b30b      	cbz	r3, 8007d34 <__sfp+0x68>
 8007cf0:	6836      	ldr	r6, [r6, #0]
 8007cf2:	e7f7      	b.n	8007ce4 <__sfp+0x18>
 8007cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cf8:	b9d5      	cbnz	r5, 8007d30 <__sfp+0x64>
 8007cfa:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <__sfp+0x88>)
 8007cfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d00:	60e3      	str	r3, [r4, #12]
 8007d02:	6665      	str	r5, [r4, #100]	; 0x64
 8007d04:	f000 f86c 	bl	8007de0 <__retarget_lock_init_recursive>
 8007d08:	f7ff ff96 	bl	8007c38 <__sfp_lock_release>
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	4629      	mov	r1, r5
 8007d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	61a5      	str	r5, [r4, #24]
 8007d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d20:	f000 f86f 	bl	8007e02 <memset>
 8007d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d30:	3468      	adds	r4, #104	; 0x68
 8007d32:	e7d9      	b.n	8007ce8 <__sfp+0x1c>
 8007d34:	2104      	movs	r1, #4
 8007d36:	4638      	mov	r0, r7
 8007d38:	f7ff ff62 	bl	8007c00 <__sfmoreglue>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	6030      	str	r0, [r6, #0]
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d1d5      	bne.n	8007cf0 <__sfp+0x24>
 8007d44:	f7ff ff78 	bl	8007c38 <__sfp_lock_release>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	e7ee      	b.n	8007d2c <__sfp+0x60>
 8007d4e:	bf00      	nop
 8007d50:	0800ae1c 	.word	0x0800ae1c
 8007d54:	ffff0001 	.word	0xffff0001

08007d58 <_fwalk_reent>:
 8007d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	4688      	mov	r8, r1
 8007d60:	2700      	movs	r7, #0
 8007d62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d6e:	d505      	bpl.n	8007d7c <_fwalk_reent+0x24>
 8007d70:	6824      	ldr	r4, [r4, #0]
 8007d72:	2c00      	cmp	r4, #0
 8007d74:	d1f7      	bne.n	8007d66 <_fwalk_reent+0xe>
 8007d76:	4638      	mov	r0, r7
 8007d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7c:	89ab      	ldrh	r3, [r5, #12]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d907      	bls.n	8007d92 <_fwalk_reent+0x3a>
 8007d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d86:	3301      	adds	r3, #1
 8007d88:	d003      	beq.n	8007d92 <_fwalk_reent+0x3a>
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	47c0      	blx	r8
 8007d90:	4307      	orrs	r7, r0
 8007d92:	3568      	adds	r5, #104	; 0x68
 8007d94:	e7e9      	b.n	8007d6a <_fwalk_reent+0x12>
	...

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	4d0c      	ldr	r5, [pc, #48]	; (8007dd0 <__libc_init_array+0x38>)
 8007d9e:	4c0d      	ldr	r4, [pc, #52]	; (8007dd4 <__libc_init_array+0x3c>)
 8007da0:	1b64      	subs	r4, r4, r5
 8007da2:	10a4      	asrs	r4, r4, #2
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	f002 fbce 	bl	800a548 <_init>
 8007dac:	2600      	movs	r6, #0
 8007dae:	4d0a      	ldr	r5, [pc, #40]	; (8007dd8 <__libc_init_array+0x40>)
 8007db0:	4c0a      	ldr	r4, [pc, #40]	; (8007ddc <__libc_init_array+0x44>)
 8007db2:	1b64      	subs	r4, r4, r5
 8007db4:	10a4      	asrs	r4, r4, #2
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	0800b19c 	.word	0x0800b19c
 8007dd4:	0800b19c 	.word	0x0800b19c
 8007dd8:	0800b19c 	.word	0x0800b19c
 8007ddc:	0800b1a0 	.word	0x0800b1a0

08007de0 <__retarget_lock_init_recursive>:
 8007de0:	4770      	bx	lr

08007de2 <__retarget_lock_acquire_recursive>:
 8007de2:	4770      	bx	lr

08007de4 <__retarget_lock_release_recursive>:
 8007de4:	4770      	bx	lr

08007de6 <memcpy>:
 8007de6:	440a      	add	r2, r1
 8007de8:	4291      	cmp	r1, r2
 8007dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dee:	d100      	bne.n	8007df2 <memcpy+0xc>
 8007df0:	4770      	bx	lr
 8007df2:	b510      	push	{r4, lr}
 8007df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df8:	4291      	cmp	r1, r2
 8007dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dfe:	d1f9      	bne.n	8007df4 <memcpy+0xe>
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <memset>:
 8007e02:	4603      	mov	r3, r0
 8007e04:	4402      	add	r2, r0
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d100      	bne.n	8007e0c <memset+0xa>
 8007e0a:	4770      	bx	lr
 8007e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e10:	e7f9      	b.n	8007e06 <memset+0x4>
	...

08007e14 <_free_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4605      	mov	r5, r0
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	d043      	beq.n	8007ea4 <_free_r+0x90>
 8007e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e20:	1f0c      	subs	r4, r1, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfb8      	it	lt
 8007e26:	18e4      	addlt	r4, r4, r3
 8007e28:	f001 fdcc 	bl	80099c4 <__malloc_lock>
 8007e2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <_free_r+0x94>)
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	4610      	mov	r0, r2
 8007e32:	b933      	cbnz	r3, 8007e42 <_free_r+0x2e>
 8007e34:	6063      	str	r3, [r4, #4]
 8007e36:	6014      	str	r4, [r2, #0]
 8007e38:	4628      	mov	r0, r5
 8007e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3e:	f001 bdc7 	b.w	80099d0 <__malloc_unlock>
 8007e42:	42a3      	cmp	r3, r4
 8007e44:	d90a      	bls.n	8007e5c <_free_r+0x48>
 8007e46:	6821      	ldr	r1, [r4, #0]
 8007e48:	1862      	adds	r2, r4, r1
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	bf01      	itttt	eq
 8007e4e:	681a      	ldreq	r2, [r3, #0]
 8007e50:	685b      	ldreq	r3, [r3, #4]
 8007e52:	1852      	addeq	r2, r2, r1
 8007e54:	6022      	streq	r2, [r4, #0]
 8007e56:	6063      	str	r3, [r4, #4]
 8007e58:	6004      	str	r4, [r0, #0]
 8007e5a:	e7ed      	b.n	8007e38 <_free_r+0x24>
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	b10b      	cbz	r3, 8007e66 <_free_r+0x52>
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	d9fa      	bls.n	8007e5c <_free_r+0x48>
 8007e66:	6811      	ldr	r1, [r2, #0]
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	42a0      	cmp	r0, r4
 8007e6c:	d10b      	bne.n	8007e86 <_free_r+0x72>
 8007e6e:	6820      	ldr	r0, [r4, #0]
 8007e70:	4401      	add	r1, r0
 8007e72:	1850      	adds	r0, r2, r1
 8007e74:	4283      	cmp	r3, r0
 8007e76:	6011      	str	r1, [r2, #0]
 8007e78:	d1de      	bne.n	8007e38 <_free_r+0x24>
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4401      	add	r1, r0
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	6053      	str	r3, [r2, #4]
 8007e84:	e7d8      	b.n	8007e38 <_free_r+0x24>
 8007e86:	d902      	bls.n	8007e8e <_free_r+0x7a>
 8007e88:	230c      	movs	r3, #12
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	e7d4      	b.n	8007e38 <_free_r+0x24>
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1821      	adds	r1, r4, r0
 8007e92:	428b      	cmp	r3, r1
 8007e94:	bf01      	itttt	eq
 8007e96:	6819      	ldreq	r1, [r3, #0]
 8007e98:	685b      	ldreq	r3, [r3, #4]
 8007e9a:	1809      	addeq	r1, r1, r0
 8007e9c:	6021      	streq	r1, [r4, #0]
 8007e9e:	6063      	str	r3, [r4, #4]
 8007ea0:	6054      	str	r4, [r2, #4]
 8007ea2:	e7c9      	b.n	8007e38 <_free_r+0x24>
 8007ea4:	bd38      	pop	{r3, r4, r5, pc}
 8007ea6:	bf00      	nop
 8007ea8:	2000043c 	.word	0x2000043c

08007eac <_malloc_r>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	1ccd      	adds	r5, r1, #3
 8007eb0:	f025 0503 	bic.w	r5, r5, #3
 8007eb4:	3508      	adds	r5, #8
 8007eb6:	2d0c      	cmp	r5, #12
 8007eb8:	bf38      	it	cc
 8007eba:	250c      	movcc	r5, #12
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	db01      	blt.n	8007ec6 <_malloc_r+0x1a>
 8007ec2:	42a9      	cmp	r1, r5
 8007ec4:	d903      	bls.n	8007ece <_malloc_r+0x22>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	2000      	movs	r0, #0
 8007ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ece:	f001 fd79 	bl	80099c4 <__malloc_lock>
 8007ed2:	4921      	ldr	r1, [pc, #132]	; (8007f58 <_malloc_r+0xac>)
 8007ed4:	680a      	ldr	r2, [r1, #0]
 8007ed6:	4614      	mov	r4, r2
 8007ed8:	b99c      	cbnz	r4, 8007f02 <_malloc_r+0x56>
 8007eda:	4f20      	ldr	r7, [pc, #128]	; (8007f5c <_malloc_r+0xb0>)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	b923      	cbnz	r3, 8007eea <_malloc_r+0x3e>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f000 fd2a 	bl	800893c <_sbrk_r>
 8007ee8:	6038      	str	r0, [r7, #0]
 8007eea:	4629      	mov	r1, r5
 8007eec:	4630      	mov	r0, r6
 8007eee:	f000 fd25 	bl	800893c <_sbrk_r>
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	d123      	bne.n	8007f3e <_malloc_r+0x92>
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	4630      	mov	r0, r6
 8007efa:	6033      	str	r3, [r6, #0]
 8007efc:	f001 fd68 	bl	80099d0 <__malloc_unlock>
 8007f00:	e7e3      	b.n	8007eca <_malloc_r+0x1e>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	1b5b      	subs	r3, r3, r5
 8007f06:	d417      	bmi.n	8007f38 <_malloc_r+0x8c>
 8007f08:	2b0b      	cmp	r3, #11
 8007f0a:	d903      	bls.n	8007f14 <_malloc_r+0x68>
 8007f0c:	6023      	str	r3, [r4, #0]
 8007f0e:	441c      	add	r4, r3
 8007f10:	6025      	str	r5, [r4, #0]
 8007f12:	e004      	b.n	8007f1e <_malloc_r+0x72>
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	42a2      	cmp	r2, r4
 8007f18:	bf0c      	ite	eq
 8007f1a:	600b      	streq	r3, [r1, #0]
 8007f1c:	6053      	strne	r3, [r2, #4]
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f001 fd56 	bl	80099d0 <__malloc_unlock>
 8007f24:	f104 000b 	add.w	r0, r4, #11
 8007f28:	1d23      	adds	r3, r4, #4
 8007f2a:	f020 0007 	bic.w	r0, r0, #7
 8007f2e:	1ac2      	subs	r2, r0, r3
 8007f30:	d0cc      	beq.n	8007ecc <_malloc_r+0x20>
 8007f32:	1a1b      	subs	r3, r3, r0
 8007f34:	50a3      	str	r3, [r4, r2]
 8007f36:	e7c9      	b.n	8007ecc <_malloc_r+0x20>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	6864      	ldr	r4, [r4, #4]
 8007f3c:	e7cc      	b.n	8007ed8 <_malloc_r+0x2c>
 8007f3e:	1cc4      	adds	r4, r0, #3
 8007f40:	f024 0403 	bic.w	r4, r4, #3
 8007f44:	42a0      	cmp	r0, r4
 8007f46:	d0e3      	beq.n	8007f10 <_malloc_r+0x64>
 8007f48:	1a21      	subs	r1, r4, r0
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f000 fcf6 	bl	800893c <_sbrk_r>
 8007f50:	3001      	adds	r0, #1
 8007f52:	d1dd      	bne.n	8007f10 <_malloc_r+0x64>
 8007f54:	e7cf      	b.n	8007ef6 <_malloc_r+0x4a>
 8007f56:	bf00      	nop
 8007f58:	2000043c 	.word	0x2000043c
 8007f5c:	20000440 	.word	0x20000440

08007f60 <__cvt>:
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f66:	461f      	mov	r7, r3
 8007f68:	bfbb      	ittet	lt
 8007f6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f6e:	461f      	movlt	r7, r3
 8007f70:	2300      	movge	r3, #0
 8007f72:	232d      	movlt	r3, #45	; 0x2d
 8007f74:	b088      	sub	sp, #32
 8007f76:	4614      	mov	r4, r2
 8007f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f7c:	7013      	strb	r3, [r2, #0]
 8007f7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f84:	f023 0820 	bic.w	r8, r3, #32
 8007f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f8c:	d005      	beq.n	8007f9a <__cvt+0x3a>
 8007f8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f92:	d100      	bne.n	8007f96 <__cvt+0x36>
 8007f94:	3501      	adds	r5, #1
 8007f96:	2302      	movs	r3, #2
 8007f98:	e000      	b.n	8007f9c <__cvt+0x3c>
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	aa07      	add	r2, sp, #28
 8007f9e:	9204      	str	r2, [sp, #16]
 8007fa0:	aa06      	add	r2, sp, #24
 8007fa2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fa6:	e9cd 3500 	strd	r3, r5, [sp]
 8007faa:	4622      	mov	r2, r4
 8007fac:	463b      	mov	r3, r7
 8007fae:	f000 fe8b 	bl	8008cc8 <_dtoa_r>
 8007fb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	d102      	bne.n	8007fc0 <__cvt+0x60>
 8007fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fbc:	07db      	lsls	r3, r3, #31
 8007fbe:	d522      	bpl.n	8008006 <__cvt+0xa6>
 8007fc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fc4:	eb06 0905 	add.w	r9, r6, r5
 8007fc8:	d110      	bne.n	8007fec <__cvt+0x8c>
 8007fca:	7833      	ldrb	r3, [r6, #0]
 8007fcc:	2b30      	cmp	r3, #48	; 0x30
 8007fce:	d10a      	bne.n	8007fe6 <__cvt+0x86>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	f7f8 fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8007fdc:	b918      	cbnz	r0, 8007fe6 <__cvt+0x86>
 8007fde:	f1c5 0501 	rsb	r5, r5, #1
 8007fe2:	f8ca 5000 	str.w	r5, [sl]
 8007fe6:	f8da 3000 	ldr.w	r3, [sl]
 8007fea:	4499      	add	r9, r3
 8007fec:	2200      	movs	r2, #0
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff8:	b108      	cbz	r0, 8007ffe <__cvt+0x9e>
 8007ffa:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ffe:	2230      	movs	r2, #48	; 0x30
 8008000:	9b07      	ldr	r3, [sp, #28]
 8008002:	454b      	cmp	r3, r9
 8008004:	d307      	bcc.n	8008016 <__cvt+0xb6>
 8008006:	4630      	mov	r0, r6
 8008008:	9b07      	ldr	r3, [sp, #28]
 800800a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800800c:	1b9b      	subs	r3, r3, r6
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	b008      	add	sp, #32
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	1c59      	adds	r1, r3, #1
 8008018:	9107      	str	r1, [sp, #28]
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	e7f0      	b.n	8008000 <__cvt+0xa0>

0800801e <__exponent>:
 800801e:	4603      	mov	r3, r0
 8008020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008022:	2900      	cmp	r1, #0
 8008024:	f803 2b02 	strb.w	r2, [r3], #2
 8008028:	bfb6      	itet	lt
 800802a:	222d      	movlt	r2, #45	; 0x2d
 800802c:	222b      	movge	r2, #43	; 0x2b
 800802e:	4249      	neglt	r1, r1
 8008030:	2909      	cmp	r1, #9
 8008032:	7042      	strb	r2, [r0, #1]
 8008034:	dd2b      	ble.n	800808e <__exponent+0x70>
 8008036:	f10d 0407 	add.w	r4, sp, #7
 800803a:	46a4      	mov	ip, r4
 800803c:	270a      	movs	r7, #10
 800803e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008042:	460a      	mov	r2, r1
 8008044:	46a6      	mov	lr, r4
 8008046:	fb07 1516 	mls	r5, r7, r6, r1
 800804a:	2a63      	cmp	r2, #99	; 0x63
 800804c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008050:	4631      	mov	r1, r6
 8008052:	f104 34ff 	add.w	r4, r4, #4294967295
 8008056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800805a:	dcf0      	bgt.n	800803e <__exponent+0x20>
 800805c:	3130      	adds	r1, #48	; 0x30
 800805e:	f1ae 0502 	sub.w	r5, lr, #2
 8008062:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008066:	4629      	mov	r1, r5
 8008068:	1c44      	adds	r4, r0, #1
 800806a:	4561      	cmp	r1, ip
 800806c:	d30a      	bcc.n	8008084 <__exponent+0x66>
 800806e:	f10d 0209 	add.w	r2, sp, #9
 8008072:	eba2 020e 	sub.w	r2, r2, lr
 8008076:	4565      	cmp	r5, ip
 8008078:	bf88      	it	hi
 800807a:	2200      	movhi	r2, #0
 800807c:	4413      	add	r3, r2
 800807e:	1a18      	subs	r0, r3, r0
 8008080:	b003      	add	sp, #12
 8008082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008084:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008088:	f804 2f01 	strb.w	r2, [r4, #1]!
 800808c:	e7ed      	b.n	800806a <__exponent+0x4c>
 800808e:	2330      	movs	r3, #48	; 0x30
 8008090:	3130      	adds	r1, #48	; 0x30
 8008092:	7083      	strb	r3, [r0, #2]
 8008094:	70c1      	strb	r1, [r0, #3]
 8008096:	1d03      	adds	r3, r0, #4
 8008098:	e7f1      	b.n	800807e <__exponent+0x60>
	...

0800809c <_printf_float>:
 800809c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a0:	b091      	sub	sp, #68	; 0x44
 80080a2:	460c      	mov	r4, r1
 80080a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080a8:	4616      	mov	r6, r2
 80080aa:	461f      	mov	r7, r3
 80080ac:	4605      	mov	r5, r0
 80080ae:	f001 fbf9 	bl	80098a4 <_localeconv_r>
 80080b2:	6803      	ldr	r3, [r0, #0]
 80080b4:	4618      	mov	r0, r3
 80080b6:	9309      	str	r3, [sp, #36]	; 0x24
 80080b8:	f7f8 f84a 	bl	8000150 <strlen>
 80080bc:	2300      	movs	r3, #0
 80080be:	930e      	str	r3, [sp, #56]	; 0x38
 80080c0:	f8d8 3000 	ldr.w	r3, [r8]
 80080c4:	900a      	str	r0, [sp, #40]	; 0x28
 80080c6:	3307      	adds	r3, #7
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	f103 0208 	add.w	r2, r3, #8
 80080d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80080d4:	f8d4 b000 	ldr.w	fp, [r4]
 80080d8:	f8c8 2000 	str.w	r2, [r8]
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80080e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80080ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295
 80080f2:	4640      	mov	r0, r8
 80080f4:	4b9c      	ldr	r3, [pc, #624]	; (8008368 <_printf_float+0x2cc>)
 80080f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080f8:	f7f8 fc88 	bl	8000a0c <__aeabi_dcmpun>
 80080fc:	bb70      	cbnz	r0, 800815c <_printf_float+0xc0>
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	4640      	mov	r0, r8
 8008104:	4b98      	ldr	r3, [pc, #608]	; (8008368 <_printf_float+0x2cc>)
 8008106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008108:	f7f8 fc62 	bl	80009d0 <__aeabi_dcmple>
 800810c:	bb30      	cbnz	r0, 800815c <_printf_float+0xc0>
 800810e:	2200      	movs	r2, #0
 8008110:	2300      	movs	r3, #0
 8008112:	4640      	mov	r0, r8
 8008114:	4651      	mov	r1, sl
 8008116:	f7f8 fc51 	bl	80009bc <__aeabi_dcmplt>
 800811a:	b110      	cbz	r0, 8008122 <_printf_float+0x86>
 800811c:	232d      	movs	r3, #45	; 0x2d
 800811e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008122:	4b92      	ldr	r3, [pc, #584]	; (800836c <_printf_float+0x2d0>)
 8008124:	4892      	ldr	r0, [pc, #584]	; (8008370 <_printf_float+0x2d4>)
 8008126:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800812a:	bf94      	ite	ls
 800812c:	4698      	movls	r8, r3
 800812e:	4680      	movhi	r8, r0
 8008130:	2303      	movs	r3, #3
 8008132:	f04f 0a00 	mov.w	sl, #0
 8008136:	6123      	str	r3, [r4, #16]
 8008138:	f02b 0304 	bic.w	r3, fp, #4
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	4633      	mov	r3, r6
 8008140:	4621      	mov	r1, r4
 8008142:	4628      	mov	r0, r5
 8008144:	9700      	str	r7, [sp, #0]
 8008146:	aa0f      	add	r2, sp, #60	; 0x3c
 8008148:	f000 f9d4 	bl	80084f4 <_printf_common>
 800814c:	3001      	adds	r0, #1
 800814e:	f040 8090 	bne.w	8008272 <_printf_float+0x1d6>
 8008152:	f04f 30ff 	mov.w	r0, #4294967295
 8008156:	b011      	add	sp, #68	; 0x44
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	4642      	mov	r2, r8
 800815e:	4653      	mov	r3, sl
 8008160:	4640      	mov	r0, r8
 8008162:	4651      	mov	r1, sl
 8008164:	f7f8 fc52 	bl	8000a0c <__aeabi_dcmpun>
 8008168:	b148      	cbz	r0, 800817e <_printf_float+0xe2>
 800816a:	f1ba 0f00 	cmp.w	sl, #0
 800816e:	bfb8      	it	lt
 8008170:	232d      	movlt	r3, #45	; 0x2d
 8008172:	4880      	ldr	r0, [pc, #512]	; (8008374 <_printf_float+0x2d8>)
 8008174:	bfb8      	it	lt
 8008176:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800817a:	4b7f      	ldr	r3, [pc, #508]	; (8008378 <_printf_float+0x2dc>)
 800817c:	e7d3      	b.n	8008126 <_printf_float+0x8a>
 800817e:	6863      	ldr	r3, [r4, #4]
 8008180:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	d142      	bne.n	800820e <_printf_float+0x172>
 8008188:	2306      	movs	r3, #6
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	9206      	str	r2, [sp, #24]
 8008190:	aa0e      	add	r2, sp, #56	; 0x38
 8008192:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008196:	aa0d      	add	r2, sp, #52	; 0x34
 8008198:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800819c:	9203      	str	r2, [sp, #12]
 800819e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	6863      	ldr	r3, [r4, #4]
 80081aa:	4642      	mov	r2, r8
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4628      	mov	r0, r5
 80081b0:	4653      	mov	r3, sl
 80081b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80081b4:	f7ff fed4 	bl	8007f60 <__cvt>
 80081b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081ba:	4680      	mov	r8, r0
 80081bc:	2947      	cmp	r1, #71	; 0x47
 80081be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081c0:	d108      	bne.n	80081d4 <_printf_float+0x138>
 80081c2:	1cc8      	adds	r0, r1, #3
 80081c4:	db02      	blt.n	80081cc <_printf_float+0x130>
 80081c6:	6863      	ldr	r3, [r4, #4]
 80081c8:	4299      	cmp	r1, r3
 80081ca:	dd40      	ble.n	800824e <_printf_float+0x1b2>
 80081cc:	f1a9 0902 	sub.w	r9, r9, #2
 80081d0:	fa5f f989 	uxtb.w	r9, r9
 80081d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081d8:	d81f      	bhi.n	800821a <_printf_float+0x17e>
 80081da:	464a      	mov	r2, r9
 80081dc:	3901      	subs	r1, #1
 80081de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081e2:	910d      	str	r1, [sp, #52]	; 0x34
 80081e4:	f7ff ff1b 	bl	800801e <__exponent>
 80081e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ea:	4682      	mov	sl, r0
 80081ec:	1813      	adds	r3, r2, r0
 80081ee:	2a01      	cmp	r2, #1
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	dc02      	bgt.n	80081fa <_printf_float+0x15e>
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	07d2      	lsls	r2, r2, #31
 80081f8:	d501      	bpl.n	80081fe <_printf_float+0x162>
 80081fa:	3301      	adds	r3, #1
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008202:	2b00      	cmp	r3, #0
 8008204:	d09b      	beq.n	800813e <_printf_float+0xa2>
 8008206:	232d      	movs	r3, #45	; 0x2d
 8008208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800820c:	e797      	b.n	800813e <_printf_float+0xa2>
 800820e:	2947      	cmp	r1, #71	; 0x47
 8008210:	d1bc      	bne.n	800818c <_printf_float+0xf0>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1ba      	bne.n	800818c <_printf_float+0xf0>
 8008216:	2301      	movs	r3, #1
 8008218:	e7b7      	b.n	800818a <_printf_float+0xee>
 800821a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800821e:	d118      	bne.n	8008252 <_printf_float+0x1b6>
 8008220:	2900      	cmp	r1, #0
 8008222:	6863      	ldr	r3, [r4, #4]
 8008224:	dd0b      	ble.n	800823e <_printf_float+0x1a2>
 8008226:	6121      	str	r1, [r4, #16]
 8008228:	b913      	cbnz	r3, 8008230 <_printf_float+0x194>
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	07d0      	lsls	r0, r2, #31
 800822e:	d502      	bpl.n	8008236 <_printf_float+0x19a>
 8008230:	3301      	adds	r3, #1
 8008232:	440b      	add	r3, r1
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	f04f 0a00 	mov.w	sl, #0
 800823a:	65a1      	str	r1, [r4, #88]	; 0x58
 800823c:	e7df      	b.n	80081fe <_printf_float+0x162>
 800823e:	b913      	cbnz	r3, 8008246 <_printf_float+0x1aa>
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	07d2      	lsls	r2, r2, #31
 8008244:	d501      	bpl.n	800824a <_printf_float+0x1ae>
 8008246:	3302      	adds	r3, #2
 8008248:	e7f4      	b.n	8008234 <_printf_float+0x198>
 800824a:	2301      	movs	r3, #1
 800824c:	e7f2      	b.n	8008234 <_printf_float+0x198>
 800824e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008254:	4299      	cmp	r1, r3
 8008256:	db05      	blt.n	8008264 <_printf_float+0x1c8>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	6121      	str	r1, [r4, #16]
 800825c:	07d8      	lsls	r0, r3, #31
 800825e:	d5ea      	bpl.n	8008236 <_printf_float+0x19a>
 8008260:	1c4b      	adds	r3, r1, #1
 8008262:	e7e7      	b.n	8008234 <_printf_float+0x198>
 8008264:	2900      	cmp	r1, #0
 8008266:	bfcc      	ite	gt
 8008268:	2201      	movgt	r2, #1
 800826a:	f1c1 0202 	rsble	r2, r1, #2
 800826e:	4413      	add	r3, r2
 8008270:	e7e0      	b.n	8008234 <_printf_float+0x198>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	055a      	lsls	r2, r3, #21
 8008276:	d407      	bmi.n	8008288 <_printf_float+0x1ec>
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	4642      	mov	r2, r8
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	47b8      	blx	r7
 8008282:	3001      	adds	r0, #1
 8008284:	d12b      	bne.n	80082de <_printf_float+0x242>
 8008286:	e764      	b.n	8008152 <_printf_float+0xb6>
 8008288:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800828c:	f240 80dd 	bls.w	800844a <_printf_float+0x3ae>
 8008290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008294:	2200      	movs	r2, #0
 8008296:	2300      	movs	r3, #0
 8008298:	f7f8 fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800829c:	2800      	cmp	r0, #0
 800829e:	d033      	beq.n	8008308 <_printf_float+0x26c>
 80082a0:	2301      	movs	r3, #1
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	4a35      	ldr	r2, [pc, #212]	; (800837c <_printf_float+0x2e0>)
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af51 	beq.w	8008152 <_printf_float+0xb6>
 80082b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082b4:	429a      	cmp	r2, r3
 80082b6:	db02      	blt.n	80082be <_printf_float+0x222>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	07d8      	lsls	r0, r3, #31
 80082bc:	d50f      	bpl.n	80082de <_printf_float+0x242>
 80082be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082c2:	4631      	mov	r1, r6
 80082c4:	4628      	mov	r0, r5
 80082c6:	47b8      	blx	r7
 80082c8:	3001      	adds	r0, #1
 80082ca:	f43f af42 	beq.w	8008152 <_printf_float+0xb6>
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	f104 091a 	add.w	r9, r4, #26
 80082d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082d8:	3b01      	subs	r3, #1
 80082da:	4543      	cmp	r3, r8
 80082dc:	dc09      	bgt.n	80082f2 <_printf_float+0x256>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	079b      	lsls	r3, r3, #30
 80082e2:	f100 8102 	bmi.w	80084ea <_printf_float+0x44e>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082ea:	4298      	cmp	r0, r3
 80082ec:	bfb8      	it	lt
 80082ee:	4618      	movlt	r0, r3
 80082f0:	e731      	b.n	8008156 <_printf_float+0xba>
 80082f2:	2301      	movs	r3, #1
 80082f4:	464a      	mov	r2, r9
 80082f6:	4631      	mov	r1, r6
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b8      	blx	r7
 80082fc:	3001      	adds	r0, #1
 80082fe:	f43f af28 	beq.w	8008152 <_printf_float+0xb6>
 8008302:	f108 0801 	add.w	r8, r8, #1
 8008306:	e7e6      	b.n	80082d6 <_printf_float+0x23a>
 8008308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc38      	bgt.n	8008380 <_printf_float+0x2e4>
 800830e:	2301      	movs	r3, #1
 8008310:	4631      	mov	r1, r6
 8008312:	4628      	mov	r0, r5
 8008314:	4a19      	ldr	r2, [pc, #100]	; (800837c <_printf_float+0x2e0>)
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f af1a 	beq.w	8008152 <_printf_float+0xb6>
 800831e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008322:	4313      	orrs	r3, r2
 8008324:	d102      	bne.n	800832c <_printf_float+0x290>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	07d9      	lsls	r1, r3, #31
 800832a:	d5d8      	bpl.n	80082de <_printf_float+0x242>
 800832c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f af0b 	beq.w	8008152 <_printf_float+0xb6>
 800833c:	f04f 0900 	mov.w	r9, #0
 8008340:	f104 0a1a 	add.w	sl, r4, #26
 8008344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008346:	425b      	negs	r3, r3
 8008348:	454b      	cmp	r3, r9
 800834a:	dc01      	bgt.n	8008350 <_printf_float+0x2b4>
 800834c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800834e:	e794      	b.n	800827a <_printf_float+0x1de>
 8008350:	2301      	movs	r3, #1
 8008352:	4652      	mov	r2, sl
 8008354:	4631      	mov	r1, r6
 8008356:	4628      	mov	r0, r5
 8008358:	47b8      	blx	r7
 800835a:	3001      	adds	r0, #1
 800835c:	f43f aef9 	beq.w	8008152 <_printf_float+0xb6>
 8008360:	f109 0901 	add.w	r9, r9, #1
 8008364:	e7ee      	b.n	8008344 <_printf_float+0x2a8>
 8008366:	bf00      	nop
 8008368:	7fefffff 	.word	0x7fefffff
 800836c:	0800ae20 	.word	0x0800ae20
 8008370:	0800ae24 	.word	0x0800ae24
 8008374:	0800ae2c 	.word	0x0800ae2c
 8008378:	0800ae28 	.word	0x0800ae28
 800837c:	0800ae30 	.word	0x0800ae30
 8008380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008384:	429a      	cmp	r2, r3
 8008386:	bfa8      	it	ge
 8008388:	461a      	movge	r2, r3
 800838a:	2a00      	cmp	r2, #0
 800838c:	4691      	mov	r9, r2
 800838e:	dc37      	bgt.n	8008400 <_printf_float+0x364>
 8008390:	f04f 0b00 	mov.w	fp, #0
 8008394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008398:	f104 021a 	add.w	r2, r4, #26
 800839c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083a0:	ebaa 0309 	sub.w	r3, sl, r9
 80083a4:	455b      	cmp	r3, fp
 80083a6:	dc33      	bgt.n	8008410 <_printf_float+0x374>
 80083a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083ac:	429a      	cmp	r2, r3
 80083ae:	db3b      	blt.n	8008428 <_printf_float+0x38c>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	07da      	lsls	r2, r3, #31
 80083b4:	d438      	bmi.n	8008428 <_printf_float+0x38c>
 80083b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80083ba:	eba2 030a 	sub.w	r3, r2, sl
 80083be:	eba2 0901 	sub.w	r9, r2, r1
 80083c2:	4599      	cmp	r9, r3
 80083c4:	bfa8      	it	ge
 80083c6:	4699      	movge	r9, r3
 80083c8:	f1b9 0f00 	cmp.w	r9, #0
 80083cc:	dc34      	bgt.n	8008438 <_printf_float+0x39c>
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d6:	f104 0a1a 	add.w	sl, r4, #26
 80083da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	eba3 0309 	sub.w	r3, r3, r9
 80083e4:	4543      	cmp	r3, r8
 80083e6:	f77f af7a 	ble.w	80082de <_printf_float+0x242>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4652      	mov	r2, sl
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	f43f aeac 	beq.w	8008152 <_printf_float+0xb6>
 80083fa:	f108 0801 	add.w	r8, r8, #1
 80083fe:	e7ec      	b.n	80083da <_printf_float+0x33e>
 8008400:	4613      	mov	r3, r2
 8008402:	4631      	mov	r1, r6
 8008404:	4642      	mov	r2, r8
 8008406:	4628      	mov	r0, r5
 8008408:	47b8      	blx	r7
 800840a:	3001      	adds	r0, #1
 800840c:	d1c0      	bne.n	8008390 <_printf_float+0x2f4>
 800840e:	e6a0      	b.n	8008152 <_printf_float+0xb6>
 8008410:	2301      	movs	r3, #1
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	920b      	str	r2, [sp, #44]	; 0x2c
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f ae99 	beq.w	8008152 <_printf_float+0xb6>
 8008420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008422:	f10b 0b01 	add.w	fp, fp, #1
 8008426:	e7b9      	b.n	800839c <_printf_float+0x300>
 8008428:	4631      	mov	r1, r6
 800842a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800842e:	4628      	mov	r0, r5
 8008430:	47b8      	blx	r7
 8008432:	3001      	adds	r0, #1
 8008434:	d1bf      	bne.n	80083b6 <_printf_float+0x31a>
 8008436:	e68c      	b.n	8008152 <_printf_float+0xb6>
 8008438:	464b      	mov	r3, r9
 800843a:	4631      	mov	r1, r6
 800843c:	4628      	mov	r0, r5
 800843e:	eb08 020a 	add.w	r2, r8, sl
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	d1c2      	bne.n	80083ce <_printf_float+0x332>
 8008448:	e683      	b.n	8008152 <_printf_float+0xb6>
 800844a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800844c:	2a01      	cmp	r2, #1
 800844e:	dc01      	bgt.n	8008454 <_printf_float+0x3b8>
 8008450:	07db      	lsls	r3, r3, #31
 8008452:	d537      	bpl.n	80084c4 <_printf_float+0x428>
 8008454:	2301      	movs	r3, #1
 8008456:	4642      	mov	r2, r8
 8008458:	4631      	mov	r1, r6
 800845a:	4628      	mov	r0, r5
 800845c:	47b8      	blx	r7
 800845e:	3001      	adds	r0, #1
 8008460:	f43f ae77 	beq.w	8008152 <_printf_float+0xb6>
 8008464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f ae6f 	beq.w	8008152 <_printf_float+0xb6>
 8008474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	f7f8 fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8008480:	b9d8      	cbnz	r0, 80084ba <_printf_float+0x41e>
 8008482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008484:	f108 0201 	add.w	r2, r8, #1
 8008488:	3b01      	subs	r3, #1
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d10e      	bne.n	80084b2 <_printf_float+0x416>
 8008494:	e65d      	b.n	8008152 <_printf_float+0xb6>
 8008496:	2301      	movs	r3, #1
 8008498:	464a      	mov	r2, r9
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	f43f ae56 	beq.w	8008152 <_printf_float+0xb6>
 80084a6:	f108 0801 	add.w	r8, r8, #1
 80084aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ac:	3b01      	subs	r3, #1
 80084ae:	4543      	cmp	r3, r8
 80084b0:	dcf1      	bgt.n	8008496 <_printf_float+0x3fa>
 80084b2:	4653      	mov	r3, sl
 80084b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084b8:	e6e0      	b.n	800827c <_printf_float+0x1e0>
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	f104 091a 	add.w	r9, r4, #26
 80084c2:	e7f2      	b.n	80084aa <_printf_float+0x40e>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4642      	mov	r2, r8
 80084c8:	e7df      	b.n	800848a <_printf_float+0x3ee>
 80084ca:	2301      	movs	r3, #1
 80084cc:	464a      	mov	r2, r9
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae3c 	beq.w	8008152 <_printf_float+0xb6>
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	4543      	cmp	r3, r8
 80084e6:	dcf0      	bgt.n	80084ca <_printf_float+0x42e>
 80084e8:	e6fd      	b.n	80082e6 <_printf_float+0x24a>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	f104 0919 	add.w	r9, r4, #25
 80084f2:	e7f4      	b.n	80084de <_printf_float+0x442>

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4616      	mov	r6, r2
 80084fa:	4699      	mov	r9, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	4607      	mov	r7, r0
 8008502:	4293      	cmp	r3, r2
 8008504:	bfb8      	it	lt
 8008506:	4613      	movlt	r3, r2
 8008508:	6033      	str	r3, [r6, #0]
 800850a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800850e:	460c      	mov	r4, r1
 8008510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008514:	b10a      	cbz	r2, 800851a <_printf_common+0x26>
 8008516:	3301      	adds	r3, #1
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	6833      	ldrmi	r3, [r6, #0]
 8008522:	3302      	addmi	r3, #2
 8008524:	6033      	strmi	r3, [r6, #0]
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	f015 0506 	ands.w	r5, r5, #6
 800852c:	d106      	bne.n	800853c <_printf_common+0x48>
 800852e:	f104 0a19 	add.w	sl, r4, #25
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc28      	bgt.n	800858e <_printf_common+0x9a>
 800853c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008540:	1e13      	subs	r3, r2, #0
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	bf18      	it	ne
 8008546:	2301      	movne	r3, #1
 8008548:	0692      	lsls	r2, r2, #26
 800854a:	d42d      	bmi.n	80085a8 <_printf_common+0xb4>
 800854c:	4649      	mov	r1, r9
 800854e:	4638      	mov	r0, r7
 8008550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008554:	47c0      	blx	r8
 8008556:	3001      	adds	r0, #1
 8008558:	d020      	beq.n	800859c <_printf_common+0xa8>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	68e5      	ldr	r5, [r4, #12]
 800855e:	f003 0306 	and.w	r3, r3, #6
 8008562:	2b04      	cmp	r3, #4
 8008564:	bf18      	it	ne
 8008566:	2500      	movne	r5, #0
 8008568:	6832      	ldr	r2, [r6, #0]
 800856a:	f04f 0600 	mov.w	r6, #0
 800856e:	68a3      	ldr	r3, [r4, #8]
 8008570:	bf08      	it	eq
 8008572:	1aad      	subeq	r5, r5, r2
 8008574:	6922      	ldr	r2, [r4, #16]
 8008576:	bf08      	it	eq
 8008578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800857c:	4293      	cmp	r3, r2
 800857e:	bfc4      	itt	gt
 8008580:	1a9b      	subgt	r3, r3, r2
 8008582:	18ed      	addgt	r5, r5, r3
 8008584:	341a      	adds	r4, #26
 8008586:	42b5      	cmp	r5, r6
 8008588:	d11a      	bne.n	80085c0 <_printf_common+0xcc>
 800858a:	2000      	movs	r0, #0
 800858c:	e008      	b.n	80085a0 <_printf_common+0xac>
 800858e:	2301      	movs	r3, #1
 8008590:	4652      	mov	r2, sl
 8008592:	4649      	mov	r1, r9
 8008594:	4638      	mov	r0, r7
 8008596:	47c0      	blx	r8
 8008598:	3001      	adds	r0, #1
 800859a:	d103      	bne.n	80085a4 <_printf_common+0xb0>
 800859c:	f04f 30ff 	mov.w	r0, #4294967295
 80085a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a4:	3501      	adds	r5, #1
 80085a6:	e7c4      	b.n	8008532 <_printf_common+0x3e>
 80085a8:	2030      	movs	r0, #48	; 0x30
 80085aa:	18e1      	adds	r1, r4, r3
 80085ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085b0:	1c5a      	adds	r2, r3, #1
 80085b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085b6:	4422      	add	r2, r4
 80085b8:	3302      	adds	r3, #2
 80085ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085be:	e7c5      	b.n	800854c <_printf_common+0x58>
 80085c0:	2301      	movs	r3, #1
 80085c2:	4622      	mov	r2, r4
 80085c4:	4649      	mov	r1, r9
 80085c6:	4638      	mov	r0, r7
 80085c8:	47c0      	blx	r8
 80085ca:	3001      	adds	r0, #1
 80085cc:	d0e6      	beq.n	800859c <_printf_common+0xa8>
 80085ce:	3601      	adds	r6, #1
 80085d0:	e7d9      	b.n	8008586 <_printf_common+0x92>
	...

080085d4 <_printf_i>:
 80085d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	7e27      	ldrb	r7, [r4, #24]
 80085dc:	4691      	mov	r9, r2
 80085de:	2f78      	cmp	r7, #120	; 0x78
 80085e0:	4680      	mov	r8, r0
 80085e2:	469a      	mov	sl, r3
 80085e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ea:	d807      	bhi.n	80085fc <_printf_i+0x28>
 80085ec:	2f62      	cmp	r7, #98	; 0x62
 80085ee:	d80a      	bhi.n	8008606 <_printf_i+0x32>
 80085f0:	2f00      	cmp	r7, #0
 80085f2:	f000 80d9 	beq.w	80087a8 <_printf_i+0x1d4>
 80085f6:	2f58      	cmp	r7, #88	; 0x58
 80085f8:	f000 80a4 	beq.w	8008744 <_printf_i+0x170>
 80085fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008604:	e03a      	b.n	800867c <_printf_i+0xa8>
 8008606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800860a:	2b15      	cmp	r3, #21
 800860c:	d8f6      	bhi.n	80085fc <_printf_i+0x28>
 800860e:	a001      	add	r0, pc, #4	; (adr r0, 8008614 <_printf_i+0x40>)
 8008610:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008614:	0800866d 	.word	0x0800866d
 8008618:	08008681 	.word	0x08008681
 800861c:	080085fd 	.word	0x080085fd
 8008620:	080085fd 	.word	0x080085fd
 8008624:	080085fd 	.word	0x080085fd
 8008628:	080085fd 	.word	0x080085fd
 800862c:	08008681 	.word	0x08008681
 8008630:	080085fd 	.word	0x080085fd
 8008634:	080085fd 	.word	0x080085fd
 8008638:	080085fd 	.word	0x080085fd
 800863c:	080085fd 	.word	0x080085fd
 8008640:	0800878f 	.word	0x0800878f
 8008644:	080086b1 	.word	0x080086b1
 8008648:	08008771 	.word	0x08008771
 800864c:	080085fd 	.word	0x080085fd
 8008650:	080085fd 	.word	0x080085fd
 8008654:	080087b1 	.word	0x080087b1
 8008658:	080085fd 	.word	0x080085fd
 800865c:	080086b1 	.word	0x080086b1
 8008660:	080085fd 	.word	0x080085fd
 8008664:	080085fd 	.word	0x080085fd
 8008668:	08008779 	.word	0x08008779
 800866c:	680b      	ldr	r3, [r1, #0]
 800866e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	600a      	str	r2, [r1, #0]
 8008678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800867c:	2301      	movs	r3, #1
 800867e:	e0a4      	b.n	80087ca <_printf_i+0x1f6>
 8008680:	6825      	ldr	r5, [r4, #0]
 8008682:	6808      	ldr	r0, [r1, #0]
 8008684:	062e      	lsls	r6, r5, #24
 8008686:	f100 0304 	add.w	r3, r0, #4
 800868a:	d50a      	bpl.n	80086a2 <_printf_i+0xce>
 800868c:	6805      	ldr	r5, [r0, #0]
 800868e:	600b      	str	r3, [r1, #0]
 8008690:	2d00      	cmp	r5, #0
 8008692:	da03      	bge.n	800869c <_printf_i+0xc8>
 8008694:	232d      	movs	r3, #45	; 0x2d
 8008696:	426d      	negs	r5, r5
 8008698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800869c:	230a      	movs	r3, #10
 800869e:	485e      	ldr	r0, [pc, #376]	; (8008818 <_printf_i+0x244>)
 80086a0:	e019      	b.n	80086d6 <_printf_i+0x102>
 80086a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086a6:	6805      	ldr	r5, [r0, #0]
 80086a8:	600b      	str	r3, [r1, #0]
 80086aa:	bf18      	it	ne
 80086ac:	b22d      	sxthne	r5, r5
 80086ae:	e7ef      	b.n	8008690 <_printf_i+0xbc>
 80086b0:	680b      	ldr	r3, [r1, #0]
 80086b2:	6825      	ldr	r5, [r4, #0]
 80086b4:	1d18      	adds	r0, r3, #4
 80086b6:	6008      	str	r0, [r1, #0]
 80086b8:	0628      	lsls	r0, r5, #24
 80086ba:	d501      	bpl.n	80086c0 <_printf_i+0xec>
 80086bc:	681d      	ldr	r5, [r3, #0]
 80086be:	e002      	b.n	80086c6 <_printf_i+0xf2>
 80086c0:	0669      	lsls	r1, r5, #25
 80086c2:	d5fb      	bpl.n	80086bc <_printf_i+0xe8>
 80086c4:	881d      	ldrh	r5, [r3, #0]
 80086c6:	2f6f      	cmp	r7, #111	; 0x6f
 80086c8:	bf0c      	ite	eq
 80086ca:	2308      	moveq	r3, #8
 80086cc:	230a      	movne	r3, #10
 80086ce:	4852      	ldr	r0, [pc, #328]	; (8008818 <_printf_i+0x244>)
 80086d0:	2100      	movs	r1, #0
 80086d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086d6:	6866      	ldr	r6, [r4, #4]
 80086d8:	2e00      	cmp	r6, #0
 80086da:	bfa8      	it	ge
 80086dc:	6821      	ldrge	r1, [r4, #0]
 80086de:	60a6      	str	r6, [r4, #8]
 80086e0:	bfa4      	itt	ge
 80086e2:	f021 0104 	bicge.w	r1, r1, #4
 80086e6:	6021      	strge	r1, [r4, #0]
 80086e8:	b90d      	cbnz	r5, 80086ee <_printf_i+0x11a>
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	d04d      	beq.n	800878a <_printf_i+0x1b6>
 80086ee:	4616      	mov	r6, r2
 80086f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80086f4:	fb03 5711 	mls	r7, r3, r1, r5
 80086f8:	5dc7      	ldrb	r7, [r0, r7]
 80086fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086fe:	462f      	mov	r7, r5
 8008700:	42bb      	cmp	r3, r7
 8008702:	460d      	mov	r5, r1
 8008704:	d9f4      	bls.n	80086f0 <_printf_i+0x11c>
 8008706:	2b08      	cmp	r3, #8
 8008708:	d10b      	bne.n	8008722 <_printf_i+0x14e>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	07df      	lsls	r7, r3, #31
 800870e:	d508      	bpl.n	8008722 <_printf_i+0x14e>
 8008710:	6923      	ldr	r3, [r4, #16]
 8008712:	6861      	ldr	r1, [r4, #4]
 8008714:	4299      	cmp	r1, r3
 8008716:	bfde      	ittt	le
 8008718:	2330      	movle	r3, #48	; 0x30
 800871a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800871e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008722:	1b92      	subs	r2, r2, r6
 8008724:	6122      	str	r2, [r4, #16]
 8008726:	464b      	mov	r3, r9
 8008728:	4621      	mov	r1, r4
 800872a:	4640      	mov	r0, r8
 800872c:	f8cd a000 	str.w	sl, [sp]
 8008730:	aa03      	add	r2, sp, #12
 8008732:	f7ff fedf 	bl	80084f4 <_printf_common>
 8008736:	3001      	adds	r0, #1
 8008738:	d14c      	bne.n	80087d4 <_printf_i+0x200>
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	b004      	add	sp, #16
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	4834      	ldr	r0, [pc, #208]	; (8008818 <_printf_i+0x244>)
 8008746:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800874a:	680e      	ldr	r6, [r1, #0]
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008752:	061f      	lsls	r7, r3, #24
 8008754:	600e      	str	r6, [r1, #0]
 8008756:	d514      	bpl.n	8008782 <_printf_i+0x1ae>
 8008758:	07d9      	lsls	r1, r3, #31
 800875a:	bf44      	itt	mi
 800875c:	f043 0320 	orrmi.w	r3, r3, #32
 8008760:	6023      	strmi	r3, [r4, #0]
 8008762:	b91d      	cbnz	r5, 800876c <_printf_i+0x198>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	f023 0320 	bic.w	r3, r3, #32
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	2310      	movs	r3, #16
 800876e:	e7af      	b.n	80086d0 <_printf_i+0xfc>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	f043 0320 	orr.w	r3, r3, #32
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	2378      	movs	r3, #120	; 0x78
 800877a:	4828      	ldr	r0, [pc, #160]	; (800881c <_printf_i+0x248>)
 800877c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008780:	e7e3      	b.n	800874a <_printf_i+0x176>
 8008782:	065e      	lsls	r6, r3, #25
 8008784:	bf48      	it	mi
 8008786:	b2ad      	uxthmi	r5, r5
 8008788:	e7e6      	b.n	8008758 <_printf_i+0x184>
 800878a:	4616      	mov	r6, r2
 800878c:	e7bb      	b.n	8008706 <_printf_i+0x132>
 800878e:	680b      	ldr	r3, [r1, #0]
 8008790:	6826      	ldr	r6, [r4, #0]
 8008792:	1d1d      	adds	r5, r3, #4
 8008794:	6960      	ldr	r0, [r4, #20]
 8008796:	600d      	str	r5, [r1, #0]
 8008798:	0635      	lsls	r5, r6, #24
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	d501      	bpl.n	80087a2 <_printf_i+0x1ce>
 800879e:	6018      	str	r0, [r3, #0]
 80087a0:	e002      	b.n	80087a8 <_printf_i+0x1d4>
 80087a2:	0671      	lsls	r1, r6, #25
 80087a4:	d5fb      	bpl.n	800879e <_printf_i+0x1ca>
 80087a6:	8018      	strh	r0, [r3, #0]
 80087a8:	2300      	movs	r3, #0
 80087aa:	4616      	mov	r6, r2
 80087ac:	6123      	str	r3, [r4, #16]
 80087ae:	e7ba      	b.n	8008726 <_printf_i+0x152>
 80087b0:	680b      	ldr	r3, [r1, #0]
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	600a      	str	r2, [r1, #0]
 80087b6:	681e      	ldr	r6, [r3, #0]
 80087b8:	2100      	movs	r1, #0
 80087ba:	4630      	mov	r0, r6
 80087bc:	6862      	ldr	r2, [r4, #4]
 80087be:	f001 f8f3 	bl	80099a8 <memchr>
 80087c2:	b108      	cbz	r0, 80087c8 <_printf_i+0x1f4>
 80087c4:	1b80      	subs	r0, r0, r6
 80087c6:	6060      	str	r0, [r4, #4]
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	2300      	movs	r3, #0
 80087ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d2:	e7a8      	b.n	8008726 <_printf_i+0x152>
 80087d4:	4632      	mov	r2, r6
 80087d6:	4649      	mov	r1, r9
 80087d8:	4640      	mov	r0, r8
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	47d0      	blx	sl
 80087de:	3001      	adds	r0, #1
 80087e0:	d0ab      	beq.n	800873a <_printf_i+0x166>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	079b      	lsls	r3, r3, #30
 80087e6:	d413      	bmi.n	8008810 <_printf_i+0x23c>
 80087e8:	68e0      	ldr	r0, [r4, #12]
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	4298      	cmp	r0, r3
 80087ee:	bfb8      	it	lt
 80087f0:	4618      	movlt	r0, r3
 80087f2:	e7a4      	b.n	800873e <_printf_i+0x16a>
 80087f4:	2301      	movs	r3, #1
 80087f6:	4632      	mov	r2, r6
 80087f8:	4649      	mov	r1, r9
 80087fa:	4640      	mov	r0, r8
 80087fc:	47d0      	blx	sl
 80087fe:	3001      	adds	r0, #1
 8008800:	d09b      	beq.n	800873a <_printf_i+0x166>
 8008802:	3501      	adds	r5, #1
 8008804:	68e3      	ldr	r3, [r4, #12]
 8008806:	9903      	ldr	r1, [sp, #12]
 8008808:	1a5b      	subs	r3, r3, r1
 800880a:	42ab      	cmp	r3, r5
 800880c:	dcf2      	bgt.n	80087f4 <_printf_i+0x220>
 800880e:	e7eb      	b.n	80087e8 <_printf_i+0x214>
 8008810:	2500      	movs	r5, #0
 8008812:	f104 0619 	add.w	r6, r4, #25
 8008816:	e7f5      	b.n	8008804 <_printf_i+0x230>
 8008818:	0800ae32 	.word	0x0800ae32
 800881c:	0800ae43 	.word	0x0800ae43

08008820 <iprintf>:
 8008820:	b40f      	push	{r0, r1, r2, r3}
 8008822:	4b0a      	ldr	r3, [pc, #40]	; (800884c <iprintf+0x2c>)
 8008824:	b513      	push	{r0, r1, r4, lr}
 8008826:	681c      	ldr	r4, [r3, #0]
 8008828:	b124      	cbz	r4, 8008834 <iprintf+0x14>
 800882a:	69a3      	ldr	r3, [r4, #24]
 800882c:	b913      	cbnz	r3, 8008834 <iprintf+0x14>
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff fa14 	bl	8007c5c <__sinit>
 8008834:	ab05      	add	r3, sp, #20
 8008836:	4620      	mov	r0, r4
 8008838:	9a04      	ldr	r2, [sp, #16]
 800883a:	68a1      	ldr	r1, [r4, #8]
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	f001 fc85 	bl	800a14c <_vfiprintf_r>
 8008842:	b002      	add	sp, #8
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	b004      	add	sp, #16
 800884a:	4770      	bx	lr
 800884c:	20000020 	.word	0x20000020

08008850 <_puts_r>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	460e      	mov	r6, r1
 8008854:	4605      	mov	r5, r0
 8008856:	b118      	cbz	r0, 8008860 <_puts_r+0x10>
 8008858:	6983      	ldr	r3, [r0, #24]
 800885a:	b90b      	cbnz	r3, 8008860 <_puts_r+0x10>
 800885c:	f7ff f9fe 	bl	8007c5c <__sinit>
 8008860:	69ab      	ldr	r3, [r5, #24]
 8008862:	68ac      	ldr	r4, [r5, #8]
 8008864:	b913      	cbnz	r3, 800886c <_puts_r+0x1c>
 8008866:	4628      	mov	r0, r5
 8008868:	f7ff f9f8 	bl	8007c5c <__sinit>
 800886c:	4b2c      	ldr	r3, [pc, #176]	; (8008920 <_puts_r+0xd0>)
 800886e:	429c      	cmp	r4, r3
 8008870:	d120      	bne.n	80088b4 <_puts_r+0x64>
 8008872:	686c      	ldr	r4, [r5, #4]
 8008874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008876:	07db      	lsls	r3, r3, #31
 8008878:	d405      	bmi.n	8008886 <_puts_r+0x36>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	0598      	lsls	r0, r3, #22
 800887e:	d402      	bmi.n	8008886 <_puts_r+0x36>
 8008880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008882:	f7ff faae 	bl	8007de2 <__retarget_lock_acquire_recursive>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	0719      	lsls	r1, r3, #28
 800888a:	d51d      	bpl.n	80088c8 <_puts_r+0x78>
 800888c:	6923      	ldr	r3, [r4, #16]
 800888e:	b1db      	cbz	r3, 80088c8 <_puts_r+0x78>
 8008890:	3e01      	subs	r6, #1
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008898:	3b01      	subs	r3, #1
 800889a:	60a3      	str	r3, [r4, #8]
 800889c:	bb39      	cbnz	r1, 80088ee <_puts_r+0x9e>
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da38      	bge.n	8008914 <_puts_r+0xc4>
 80088a2:	4622      	mov	r2, r4
 80088a4:	210a      	movs	r1, #10
 80088a6:	4628      	mov	r0, r5
 80088a8:	f000 f89c 	bl	80089e4 <__swbuf_r>
 80088ac:	3001      	adds	r0, #1
 80088ae:	d011      	beq.n	80088d4 <_puts_r+0x84>
 80088b0:	250a      	movs	r5, #10
 80088b2:	e011      	b.n	80088d8 <_puts_r+0x88>
 80088b4:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <_puts_r+0xd4>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d101      	bne.n	80088be <_puts_r+0x6e>
 80088ba:	68ac      	ldr	r4, [r5, #8]
 80088bc:	e7da      	b.n	8008874 <_puts_r+0x24>
 80088be:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <_puts_r+0xd8>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	bf08      	it	eq
 80088c4:	68ec      	ldreq	r4, [r5, #12]
 80088c6:	e7d5      	b.n	8008874 <_puts_r+0x24>
 80088c8:	4621      	mov	r1, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	f000 f8ee 	bl	8008aac <__swsetup_r>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	d0dd      	beq.n	8008890 <_puts_r+0x40>
 80088d4:	f04f 35ff 	mov.w	r5, #4294967295
 80088d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088da:	07da      	lsls	r2, r3, #31
 80088dc:	d405      	bmi.n	80088ea <_puts_r+0x9a>
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	059b      	lsls	r3, r3, #22
 80088e2:	d402      	bmi.n	80088ea <_puts_r+0x9a>
 80088e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e6:	f7ff fa7d 	bl	8007de4 <__retarget_lock_release_recursive>
 80088ea:	4628      	mov	r0, r5
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da04      	bge.n	80088fc <_puts_r+0xac>
 80088f2:	69a2      	ldr	r2, [r4, #24]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	dc06      	bgt.n	8008906 <_puts_r+0xb6>
 80088f8:	290a      	cmp	r1, #10
 80088fa:	d004      	beq.n	8008906 <_puts_r+0xb6>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	6022      	str	r2, [r4, #0]
 8008902:	7019      	strb	r1, [r3, #0]
 8008904:	e7c5      	b.n	8008892 <_puts_r+0x42>
 8008906:	4622      	mov	r2, r4
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f86b 	bl	80089e4 <__swbuf_r>
 800890e:	3001      	adds	r0, #1
 8008910:	d1bf      	bne.n	8008892 <_puts_r+0x42>
 8008912:	e7df      	b.n	80088d4 <_puts_r+0x84>
 8008914:	250a      	movs	r5, #10
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	6022      	str	r2, [r4, #0]
 800891c:	701d      	strb	r5, [r3, #0]
 800891e:	e7db      	b.n	80088d8 <_puts_r+0x88>
 8008920:	0800addc 	.word	0x0800addc
 8008924:	0800adfc 	.word	0x0800adfc
 8008928:	0800adbc 	.word	0x0800adbc

0800892c <puts>:
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <puts+0xc>)
 800892e:	4601      	mov	r1, r0
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f7ff bf8d 	b.w	8008850 <_puts_r>
 8008936:	bf00      	nop
 8008938:	20000020 	.word	0x20000020

0800893c <_sbrk_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	2300      	movs	r3, #0
 8008940:	4d05      	ldr	r5, [pc, #20]	; (8008958 <_sbrk_r+0x1c>)
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f8 fde2 	bl	8001510 <_sbrk>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_sbrk_r+0x1a>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_sbrk_r+0x1a>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20004680 	.word	0x20004680

0800895c <__sread>:
 800895c:	b510      	push	{r4, lr}
 800895e:	460c      	mov	r4, r1
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	f001 fd22 	bl	800a3ac <_read_r>
 8008968:	2800      	cmp	r0, #0
 800896a:	bfab      	itete	ge
 800896c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800896e:	89a3      	ldrhlt	r3, [r4, #12]
 8008970:	181b      	addge	r3, r3, r0
 8008972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008976:	bfac      	ite	ge
 8008978:	6563      	strge	r3, [r4, #84]	; 0x54
 800897a:	81a3      	strhlt	r3, [r4, #12]
 800897c:	bd10      	pop	{r4, pc}

0800897e <__swrite>:
 800897e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	461f      	mov	r7, r3
 8008984:	898b      	ldrh	r3, [r1, #12]
 8008986:	4605      	mov	r5, r0
 8008988:	05db      	lsls	r3, r3, #23
 800898a:	460c      	mov	r4, r1
 800898c:	4616      	mov	r6, r2
 800898e:	d505      	bpl.n	800899c <__swrite+0x1e>
 8008990:	2302      	movs	r3, #2
 8008992:	2200      	movs	r2, #0
 8008994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008998:	f000 ff88 	bl	80098ac <_lseek_r>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	4632      	mov	r2, r6
 80089a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	4628      	mov	r0, r5
 80089a8:	463b      	mov	r3, r7
 80089aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b2:	f000 b869 	b.w	8008a88 <_write_r>

080089b6 <__sseek>:
 80089b6:	b510      	push	{r4, lr}
 80089b8:	460c      	mov	r4, r1
 80089ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089be:	f000 ff75 	bl	80098ac <_lseek_r>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	bf15      	itete	ne
 80089c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089d2:	81a3      	strheq	r3, [r4, #12]
 80089d4:	bf18      	it	ne
 80089d6:	81a3      	strhne	r3, [r4, #12]
 80089d8:	bd10      	pop	{r4, pc}

080089da <__sclose>:
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 b8d3 	b.w	8008b88 <_close_r>
	...

080089e4 <__swbuf_r>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	460e      	mov	r6, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	4605      	mov	r5, r0
 80089ec:	b118      	cbz	r0, 80089f6 <__swbuf_r+0x12>
 80089ee:	6983      	ldr	r3, [r0, #24]
 80089f0:	b90b      	cbnz	r3, 80089f6 <__swbuf_r+0x12>
 80089f2:	f7ff f933 	bl	8007c5c <__sinit>
 80089f6:	4b21      	ldr	r3, [pc, #132]	; (8008a7c <__swbuf_r+0x98>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	d12b      	bne.n	8008a54 <__swbuf_r+0x70>
 80089fc:	686c      	ldr	r4, [r5, #4]
 80089fe:	69a3      	ldr	r3, [r4, #24]
 8008a00:	60a3      	str	r3, [r4, #8]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	071a      	lsls	r2, r3, #28
 8008a06:	d52f      	bpl.n	8008a68 <__swbuf_r+0x84>
 8008a08:	6923      	ldr	r3, [r4, #16]
 8008a0a:	b36b      	cbz	r3, 8008a68 <__swbuf_r+0x84>
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	b2f6      	uxtb	r6, r6
 8008a12:	1ac0      	subs	r0, r0, r3
 8008a14:	6963      	ldr	r3, [r4, #20]
 8008a16:	4637      	mov	r7, r6
 8008a18:	4283      	cmp	r3, r0
 8008a1a:	dc04      	bgt.n	8008a26 <__swbuf_r+0x42>
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f7ff f876 	bl	8007b10 <_fflush_r>
 8008a24:	bb30      	cbnz	r0, 8008a74 <__swbuf_r+0x90>
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	3001      	adds	r0, #1
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	60a3      	str	r3, [r4, #8]
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	6022      	str	r2, [r4, #0]
 8008a34:	701e      	strb	r6, [r3, #0]
 8008a36:	6963      	ldr	r3, [r4, #20]
 8008a38:	4283      	cmp	r3, r0
 8008a3a:	d004      	beq.n	8008a46 <__swbuf_r+0x62>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	07db      	lsls	r3, r3, #31
 8008a40:	d506      	bpl.n	8008a50 <__swbuf_r+0x6c>
 8008a42:	2e0a      	cmp	r6, #10
 8008a44:	d104      	bne.n	8008a50 <__swbuf_r+0x6c>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f7ff f861 	bl	8007b10 <_fflush_r>
 8008a4e:	b988      	cbnz	r0, 8008a74 <__swbuf_r+0x90>
 8008a50:	4638      	mov	r0, r7
 8008a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <__swbuf_r+0x9c>)
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d101      	bne.n	8008a5e <__swbuf_r+0x7a>
 8008a5a:	68ac      	ldr	r4, [r5, #8]
 8008a5c:	e7cf      	b.n	80089fe <__swbuf_r+0x1a>
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <__swbuf_r+0xa0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	bf08      	it	eq
 8008a64:	68ec      	ldreq	r4, [r5, #12]
 8008a66:	e7ca      	b.n	80089fe <__swbuf_r+0x1a>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f81e 	bl	8008aac <__swsetup_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0cb      	beq.n	8008a0c <__swbuf_r+0x28>
 8008a74:	f04f 37ff 	mov.w	r7, #4294967295
 8008a78:	e7ea      	b.n	8008a50 <__swbuf_r+0x6c>
 8008a7a:	bf00      	nop
 8008a7c:	0800addc 	.word	0x0800addc
 8008a80:	0800adfc 	.word	0x0800adfc
 8008a84:	0800adbc 	.word	0x0800adbc

08008a88 <_write_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	4611      	mov	r1, r2
 8008a90:	2200      	movs	r2, #0
 8008a92:	4d05      	ldr	r5, [pc, #20]	; (8008aa8 <_write_r+0x20>)
 8008a94:	602a      	str	r2, [r5, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	f7f8 fced 	bl	8001476 <_write>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_write_r+0x1e>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_write_r+0x1e>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20004680 	.word	0x20004680

08008aac <__swsetup_r>:
 8008aac:	4b32      	ldr	r3, [pc, #200]	; (8008b78 <__swsetup_r+0xcc>)
 8008aae:	b570      	push	{r4, r5, r6, lr}
 8008ab0:	681d      	ldr	r5, [r3, #0]
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	b125      	cbz	r5, 8008ac2 <__swsetup_r+0x16>
 8008ab8:	69ab      	ldr	r3, [r5, #24]
 8008aba:	b913      	cbnz	r3, 8008ac2 <__swsetup_r+0x16>
 8008abc:	4628      	mov	r0, r5
 8008abe:	f7ff f8cd 	bl	8007c5c <__sinit>
 8008ac2:	4b2e      	ldr	r3, [pc, #184]	; (8008b7c <__swsetup_r+0xd0>)
 8008ac4:	429c      	cmp	r4, r3
 8008ac6:	d10f      	bne.n	8008ae8 <__swsetup_r+0x3c>
 8008ac8:	686c      	ldr	r4, [r5, #4]
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ad0:	0719      	lsls	r1, r3, #28
 8008ad2:	d42c      	bmi.n	8008b2e <__swsetup_r+0x82>
 8008ad4:	06dd      	lsls	r5, r3, #27
 8008ad6:	d411      	bmi.n	8008afc <__swsetup_r+0x50>
 8008ad8:	2309      	movs	r3, #9
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae4:	81a3      	strh	r3, [r4, #12]
 8008ae6:	e03e      	b.n	8008b66 <__swsetup_r+0xba>
 8008ae8:	4b25      	ldr	r3, [pc, #148]	; (8008b80 <__swsetup_r+0xd4>)
 8008aea:	429c      	cmp	r4, r3
 8008aec:	d101      	bne.n	8008af2 <__swsetup_r+0x46>
 8008aee:	68ac      	ldr	r4, [r5, #8]
 8008af0:	e7eb      	b.n	8008aca <__swsetup_r+0x1e>
 8008af2:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <__swsetup_r+0xd8>)
 8008af4:	429c      	cmp	r4, r3
 8008af6:	bf08      	it	eq
 8008af8:	68ec      	ldreq	r4, [r5, #12]
 8008afa:	e7e6      	b.n	8008aca <__swsetup_r+0x1e>
 8008afc:	0758      	lsls	r0, r3, #29
 8008afe:	d512      	bpl.n	8008b26 <__swsetup_r+0x7a>
 8008b00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b02:	b141      	cbz	r1, 8008b16 <__swsetup_r+0x6a>
 8008b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	d002      	beq.n	8008b12 <__swsetup_r+0x66>
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff f981 	bl	8007e14 <_free_r>
 8008b12:	2300      	movs	r3, #0
 8008b14:	6363      	str	r3, [r4, #52]	; 0x34
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	f043 0308 	orr.w	r3, r3, #8
 8008b2c:	81a3      	strh	r3, [r4, #12]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	b94b      	cbnz	r3, 8008b46 <__swsetup_r+0x9a>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3c:	d003      	beq.n	8008b46 <__swsetup_r+0x9a>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4630      	mov	r0, r6
 8008b42:	f000 fee9 	bl	8009918 <__smakebuf_r>
 8008b46:	89a0      	ldrh	r0, [r4, #12]
 8008b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b4c:	f010 0301 	ands.w	r3, r0, #1
 8008b50:	d00a      	beq.n	8008b68 <__swsetup_r+0xbc>
 8008b52:	2300      	movs	r3, #0
 8008b54:	60a3      	str	r3, [r4, #8]
 8008b56:	6963      	ldr	r3, [r4, #20]
 8008b58:	425b      	negs	r3, r3
 8008b5a:	61a3      	str	r3, [r4, #24]
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	b943      	cbnz	r3, 8008b72 <__swsetup_r+0xc6>
 8008b60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b64:	d1ba      	bne.n	8008adc <__swsetup_r+0x30>
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	0781      	lsls	r1, r0, #30
 8008b6a:	bf58      	it	pl
 8008b6c:	6963      	ldrpl	r3, [r4, #20]
 8008b6e:	60a3      	str	r3, [r4, #8]
 8008b70:	e7f4      	b.n	8008b5c <__swsetup_r+0xb0>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e7f7      	b.n	8008b66 <__swsetup_r+0xba>
 8008b76:	bf00      	nop
 8008b78:	20000020 	.word	0x20000020
 8008b7c:	0800addc 	.word	0x0800addc
 8008b80:	0800adfc 	.word	0x0800adfc
 8008b84:	0800adbc 	.word	0x0800adbc

08008b88 <_close_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4d05      	ldr	r5, [pc, #20]	; (8008ba4 <_close_r+0x1c>)
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4608      	mov	r0, r1
 8008b92:	602b      	str	r3, [r5, #0]
 8008b94:	f7f8 fc8b 	bl	80014ae <_close>
 8008b98:	1c43      	adds	r3, r0, #1
 8008b9a:	d102      	bne.n	8008ba2 <_close_r+0x1a>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	b103      	cbz	r3, 8008ba2 <_close_r+0x1a>
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	bd38      	pop	{r3, r4, r5, pc}
 8008ba4:	20004680 	.word	0x20004680

08008ba8 <quorem>:
 8008ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	6903      	ldr	r3, [r0, #16]
 8008bae:	690c      	ldr	r4, [r1, #16]
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	f2c0 8083 	blt.w	8008cbe <quorem+0x116>
 8008bb8:	3c01      	subs	r4, #1
 8008bba:	f100 0514 	add.w	r5, r0, #20
 8008bbe:	f101 0814 	add.w	r8, r1, #20
 8008bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008be0:	d332      	bcc.n	8008c48 <quorem+0xa0>
 8008be2:	f04f 0e00 	mov.w	lr, #0
 8008be6:	4640      	mov	r0, r8
 8008be8:	46ac      	mov	ip, r5
 8008bea:	46f2      	mov	sl, lr
 8008bec:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bf0:	b293      	uxth	r3, r2
 8008bf2:	fb06 e303 	mla	r3, r6, r3, lr
 8008bf6:	0c12      	lsrs	r2, r2, #16
 8008bf8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008bfc:	fb06 e202 	mla	r2, r6, r2, lr
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	ebaa 0303 	sub.w	r3, sl, r3
 8008c06:	f8dc a000 	ldr.w	sl, [ip]
 8008c0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c0e:	fa1f fa8a 	uxth.w	sl, sl
 8008c12:	4453      	add	r3, sl
 8008c14:	fa1f fa82 	uxth.w	sl, r2
 8008c18:	f8dc 2000 	ldr.w	r2, [ip]
 8008c1c:	4581      	cmp	r9, r0
 8008c1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008c22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c30:	f84c 3b04 	str.w	r3, [ip], #4
 8008c34:	d2da      	bcs.n	8008bec <quorem+0x44>
 8008c36:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c3a:	b92b      	cbnz	r3, 8008c48 <quorem+0xa0>
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	3b04      	subs	r3, #4
 8008c40:	429d      	cmp	r5, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	d32f      	bcc.n	8008ca6 <quorem+0xfe>
 8008c46:	613c      	str	r4, [r7, #16]
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f001 f941 	bl	8009ed0 <__mcmp>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	db25      	blt.n	8008c9e <quorem+0xf6>
 8008c52:	4628      	mov	r0, r5
 8008c54:	f04f 0c00 	mov.w	ip, #0
 8008c58:	3601      	adds	r6, #1
 8008c5a:	f858 1b04 	ldr.w	r1, [r8], #4
 8008c5e:	f8d0 e000 	ldr.w	lr, [r0]
 8008c62:	b28b      	uxth	r3, r1
 8008c64:	ebac 0303 	sub.w	r3, ip, r3
 8008c68:	fa1f f28e 	uxth.w	r2, lr
 8008c6c:	4413      	add	r3, r2
 8008c6e:	0c0a      	lsrs	r2, r1, #16
 8008c70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7e:	45c1      	cmp	r9, r8
 8008c80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c84:	f840 3b04 	str.w	r3, [r0], #4
 8008c88:	d2e7      	bcs.n	8008c5a <quorem+0xb2>
 8008c8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c92:	b922      	cbnz	r2, 8008c9e <quorem+0xf6>
 8008c94:	3b04      	subs	r3, #4
 8008c96:	429d      	cmp	r5, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	d30a      	bcc.n	8008cb2 <quorem+0x10a>
 8008c9c:	613c      	str	r4, [r7, #16]
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	b003      	add	sp, #12
 8008ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca6:	6812      	ldr	r2, [r2, #0]
 8008ca8:	3b04      	subs	r3, #4
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	d1cb      	bne.n	8008c46 <quorem+0x9e>
 8008cae:	3c01      	subs	r4, #1
 8008cb0:	e7c6      	b.n	8008c40 <quorem+0x98>
 8008cb2:	6812      	ldr	r2, [r2, #0]
 8008cb4:	3b04      	subs	r3, #4
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	d1f0      	bne.n	8008c9c <quorem+0xf4>
 8008cba:	3c01      	subs	r4, #1
 8008cbc:	e7eb      	b.n	8008c96 <quorem+0xee>
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	e7ee      	b.n	8008ca0 <quorem+0xf8>
 8008cc2:	0000      	movs	r0, r0
 8008cc4:	0000      	movs	r0, r0
	...

08008cc8 <_dtoa_r>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	4616      	mov	r6, r2
 8008cce:	461f      	mov	r7, r3
 8008cd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008cd2:	b099      	sub	sp, #100	; 0x64
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008cda:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008cde:	b974      	cbnz	r4, 8008cfe <_dtoa_r+0x36>
 8008ce0:	2010      	movs	r0, #16
 8008ce2:	f000 fe59 	bl	8009998 <malloc>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	6268      	str	r0, [r5, #36]	; 0x24
 8008cea:	b920      	cbnz	r0, 8008cf6 <_dtoa_r+0x2e>
 8008cec:	21ea      	movs	r1, #234	; 0xea
 8008cee:	4bae      	ldr	r3, [pc, #696]	; (8008fa8 <_dtoa_r+0x2e0>)
 8008cf0:	48ae      	ldr	r0, [pc, #696]	; (8008fac <_dtoa_r+0x2e4>)
 8008cf2:	f001 fb6d 	bl	800a3d0 <__assert_func>
 8008cf6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cfa:	6004      	str	r4, [r0, #0]
 8008cfc:	60c4      	str	r4, [r0, #12]
 8008cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d00:	6819      	ldr	r1, [r3, #0]
 8008d02:	b151      	cbz	r1, 8008d1a <_dtoa_r+0x52>
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	2301      	movs	r3, #1
 8008d08:	4093      	lsls	r3, r2
 8008d0a:	604a      	str	r2, [r1, #4]
 8008d0c:	608b      	str	r3, [r1, #8]
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fea4 	bl	8009a5c <_Bfree>
 8008d14:	2200      	movs	r2, #0
 8008d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d18:	601a      	str	r2, [r3, #0]
 8008d1a:	1e3b      	subs	r3, r7, #0
 8008d1c:	bfaf      	iteee	ge
 8008d1e:	2300      	movge	r3, #0
 8008d20:	2201      	movlt	r2, #1
 8008d22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d26:	9305      	strlt	r3, [sp, #20]
 8008d28:	bfa8      	it	ge
 8008d2a:	f8c8 3000 	strge.w	r3, [r8]
 8008d2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008d32:	4b9f      	ldr	r3, [pc, #636]	; (8008fb0 <_dtoa_r+0x2e8>)
 8008d34:	bfb8      	it	lt
 8008d36:	f8c8 2000 	strlt.w	r2, [r8]
 8008d3a:	ea33 0309 	bics.w	r3, r3, r9
 8008d3e:	d119      	bne.n	8008d74 <_dtoa_r+0xac>
 8008d40:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d4c:	4333      	orrs	r3, r6
 8008d4e:	f000 8580 	beq.w	8009852 <_dtoa_r+0xb8a>
 8008d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d54:	b953      	cbnz	r3, 8008d6c <_dtoa_r+0xa4>
 8008d56:	4b97      	ldr	r3, [pc, #604]	; (8008fb4 <_dtoa_r+0x2ec>)
 8008d58:	e022      	b.n	8008da0 <_dtoa_r+0xd8>
 8008d5a:	4b97      	ldr	r3, [pc, #604]	; (8008fb8 <_dtoa_r+0x2f0>)
 8008d5c:	9308      	str	r3, [sp, #32]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	9808      	ldr	r0, [sp, #32]
 8008d66:	b019      	add	sp, #100	; 0x64
 8008d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6c:	4b91      	ldr	r3, [pc, #580]	; (8008fb4 <_dtoa_r+0x2ec>)
 8008d6e:	9308      	str	r3, [sp, #32]
 8008d70:	3303      	adds	r3, #3
 8008d72:	e7f5      	b.n	8008d60 <_dtoa_r+0x98>
 8008d74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d80:	2200      	movs	r2, #0
 8008d82:	2300      	movs	r3, #0
 8008d84:	f7f7 fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8008d88:	4680      	mov	r8, r0
 8008d8a:	b158      	cbz	r0, 8008da4 <_dtoa_r+0xdc>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d90:	6013      	str	r3, [r2, #0]
 8008d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8559 	beq.w	800984c <_dtoa_r+0xb84>
 8008d9a:	4888      	ldr	r0, [pc, #544]	; (8008fbc <_dtoa_r+0x2f4>)
 8008d9c:	6018      	str	r0, [r3, #0]
 8008d9e:	1e43      	subs	r3, r0, #1
 8008da0:	9308      	str	r3, [sp, #32]
 8008da2:	e7df      	b.n	8008d64 <_dtoa_r+0x9c>
 8008da4:	ab16      	add	r3, sp, #88	; 0x58
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	ab17      	add	r3, sp, #92	; 0x5c
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4628      	mov	r0, r5
 8008dae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008db2:	f001 f939 	bl	800a028 <__d2b>
 8008db6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008dba:	4682      	mov	sl, r0
 8008dbc:	2c00      	cmp	r4, #0
 8008dbe:	d07e      	beq.n	8008ebe <_dtoa_r+0x1f6>
 8008dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dc6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008dd2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008dd6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008dda:	2200      	movs	r2, #0
 8008ddc:	4b78      	ldr	r3, [pc, #480]	; (8008fc0 <_dtoa_r+0x2f8>)
 8008dde:	f7f7 f9c3 	bl	8000168 <__aeabi_dsub>
 8008de2:	a36b      	add	r3, pc, #428	; (adr r3, 8008f90 <_dtoa_r+0x2c8>)
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f7f7 fb76 	bl	80004d8 <__aeabi_dmul>
 8008dec:	a36a      	add	r3, pc, #424	; (adr r3, 8008f98 <_dtoa_r+0x2d0>)
 8008dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df2:	f7f7 f9bb 	bl	800016c <__adddf3>
 8008df6:	4606      	mov	r6, r0
 8008df8:	4620      	mov	r0, r4
 8008dfa:	460f      	mov	r7, r1
 8008dfc:	f7f7 fb02 	bl	8000404 <__aeabi_i2d>
 8008e00:	a367      	add	r3, pc, #412	; (adr r3, 8008fa0 <_dtoa_r+0x2d8>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 fb67 	bl	80004d8 <__aeabi_dmul>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4639      	mov	r1, r7
 8008e12:	f7f7 f9ab 	bl	800016c <__adddf3>
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	f7f7 fe0d 	bl	8000a38 <__aeabi_d2iz>
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4681      	mov	r9, r0
 8008e22:	2300      	movs	r3, #0
 8008e24:	4630      	mov	r0, r6
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fdc8 	bl	80009bc <__aeabi_dcmplt>
 8008e2c:	b148      	cbz	r0, 8008e42 <_dtoa_r+0x17a>
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f7f7 fae8 	bl	8000404 <__aeabi_i2d>
 8008e34:	4632      	mov	r2, r6
 8008e36:	463b      	mov	r3, r7
 8008e38:	f7f7 fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8008e3c:	b908      	cbnz	r0, 8008e42 <_dtoa_r+0x17a>
 8008e3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e42:	f1b9 0f16 	cmp.w	r9, #22
 8008e46:	d857      	bhi.n	8008ef8 <_dtoa_r+0x230>
 8008e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e4c:	4b5d      	ldr	r3, [pc, #372]	; (8008fc4 <_dtoa_r+0x2fc>)
 8008e4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f7f7 fdb1 	bl	80009bc <__aeabi_dcmplt>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d04e      	beq.n	8008efc <_dtoa_r+0x234>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e68:	1b1c      	subs	r4, r3, r4
 8008e6a:	1e63      	subs	r3, r4, #1
 8008e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e6e:	bf49      	itett	mi
 8008e70:	f1c4 0301 	rsbmi	r3, r4, #1
 8008e74:	2300      	movpl	r3, #0
 8008e76:	9306      	strmi	r3, [sp, #24]
 8008e78:	2300      	movmi	r3, #0
 8008e7a:	bf54      	ite	pl
 8008e7c:	9306      	strpl	r3, [sp, #24]
 8008e7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008e80:	f1b9 0f00 	cmp.w	r9, #0
 8008e84:	db3c      	blt.n	8008f00 <_dtoa_r+0x238>
 8008e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008e8c:	444b      	add	r3, r9
 8008e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e90:	2300      	movs	r3, #0
 8008e92:	930a      	str	r3, [sp, #40]	; 0x28
 8008e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e96:	2b09      	cmp	r3, #9
 8008e98:	d86c      	bhi.n	8008f74 <_dtoa_r+0x2ac>
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	bfc4      	itt	gt
 8008e9e:	3b04      	subgt	r3, #4
 8008ea0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008ea2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008ea4:	bfc8      	it	gt
 8008ea6:	2400      	movgt	r4, #0
 8008ea8:	f1a3 0302 	sub.w	r3, r3, #2
 8008eac:	bfd8      	it	le
 8008eae:	2401      	movle	r4, #1
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	f200 808b 	bhi.w	8008fcc <_dtoa_r+0x304>
 8008eb6:	e8df f003 	tbb	[pc, r3]
 8008eba:	4f2d      	.short	0x4f2d
 8008ebc:	5b4d      	.short	0x5b4d
 8008ebe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008ec2:	441c      	add	r4, r3
 8008ec4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008ec8:	2b20      	cmp	r3, #32
 8008eca:	bfc3      	ittte	gt
 8008ecc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ed0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008ed4:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ed8:	f1c3 0320 	rsble	r3, r3, #32
 8008edc:	bfc6      	itte	gt
 8008ede:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ee2:	4318      	orrgt	r0, r3
 8008ee4:	fa06 f003 	lslle.w	r0, r6, r3
 8008ee8:	f7f7 fa7c 	bl	80003e4 <__aeabi_ui2d>
 8008eec:	2301      	movs	r3, #1
 8008eee:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008ef2:	3c01      	subs	r4, #1
 8008ef4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ef6:	e770      	b.n	8008dda <_dtoa_r+0x112>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e7b3      	b.n	8008e64 <_dtoa_r+0x19c>
 8008efc:	900f      	str	r0, [sp, #60]	; 0x3c
 8008efe:	e7b2      	b.n	8008e66 <_dtoa_r+0x19e>
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	eba3 0309 	sub.w	r3, r3, r9
 8008f06:	9306      	str	r3, [sp, #24]
 8008f08:	f1c9 0300 	rsb	r3, r9, #0
 8008f0c:	930a      	str	r3, [sp, #40]	; 0x28
 8008f0e:	2300      	movs	r3, #0
 8008f10:	930e      	str	r3, [sp, #56]	; 0x38
 8008f12:	e7bf      	b.n	8008e94 <_dtoa_r+0x1cc>
 8008f14:	2300      	movs	r3, #0
 8008f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc59      	bgt.n	8008fd2 <_dtoa_r+0x30a>
 8008f1e:	f04f 0b01 	mov.w	fp, #1
 8008f22:	465b      	mov	r3, fp
 8008f24:	f8cd b008 	str.w	fp, [sp, #8]
 8008f28:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f30:	6042      	str	r2, [r0, #4]
 8008f32:	2204      	movs	r2, #4
 8008f34:	f102 0614 	add.w	r6, r2, #20
 8008f38:	429e      	cmp	r6, r3
 8008f3a:	6841      	ldr	r1, [r0, #4]
 8008f3c:	d94f      	bls.n	8008fde <_dtoa_r+0x316>
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f000 fd4c 	bl	80099dc <_Balloc>
 8008f44:	9008      	str	r0, [sp, #32]
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d14d      	bne.n	8008fe6 <_dtoa_r+0x31e>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f50:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <_dtoa_r+0x300>)
 8008f52:	e6cd      	b.n	8008cf0 <_dtoa_r+0x28>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e7de      	b.n	8008f16 <_dtoa_r+0x24e>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f5e:	eb09 0b03 	add.w	fp, r9, r3
 8008f62:	f10b 0301 	add.w	r3, fp, #1
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	bfb8      	it	lt
 8008f6c:	2301      	movlt	r3, #1
 8008f6e:	e7dd      	b.n	8008f2c <_dtoa_r+0x264>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e7f2      	b.n	8008f5a <_dtoa_r+0x292>
 8008f74:	2401      	movs	r4, #1
 8008f76:	2300      	movs	r3, #0
 8008f78:	940b      	str	r4, [sp, #44]	; 0x2c
 8008f7a:	9322      	str	r3, [sp, #136]	; 0x88
 8008f7c:	f04f 3bff 	mov.w	fp, #4294967295
 8008f80:	2200      	movs	r2, #0
 8008f82:	2312      	movs	r3, #18
 8008f84:	f8cd b008 	str.w	fp, [sp, #8]
 8008f88:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f8a:	e7cf      	b.n	8008f2c <_dtoa_r+0x264>
 8008f8c:	f3af 8000 	nop.w
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800ae61 	.word	0x0800ae61
 8008fac:	0800ae78 	.word	0x0800ae78
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800ae5d 	.word	0x0800ae5d
 8008fb8:	0800ae54 	.word	0x0800ae54
 8008fbc:	0800ae31 	.word	0x0800ae31
 8008fc0:	3ff80000 	.word	0x3ff80000
 8008fc4:	0800af70 	.word	0x0800af70
 8008fc8:	0800aed7 	.word	0x0800aed7
 8008fcc:	2301      	movs	r3, #1
 8008fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fd0:	e7d4      	b.n	8008f7c <_dtoa_r+0x2b4>
 8008fd2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	f8cd b008 	str.w	fp, [sp, #8]
 8008fdc:	e7a6      	b.n	8008f2c <_dtoa_r+0x264>
 8008fde:	3101      	adds	r1, #1
 8008fe0:	6041      	str	r1, [r0, #4]
 8008fe2:	0052      	lsls	r2, r2, #1
 8008fe4:	e7a6      	b.n	8008f34 <_dtoa_r+0x26c>
 8008fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fe8:	9a08      	ldr	r2, [sp, #32]
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	9b02      	ldr	r3, [sp, #8]
 8008fee:	2b0e      	cmp	r3, #14
 8008ff0:	f200 80a8 	bhi.w	8009144 <_dtoa_r+0x47c>
 8008ff4:	2c00      	cmp	r4, #0
 8008ff6:	f000 80a5 	beq.w	8009144 <_dtoa_r+0x47c>
 8008ffa:	f1b9 0f00 	cmp.w	r9, #0
 8008ffe:	dd34      	ble.n	800906a <_dtoa_r+0x3a2>
 8009000:	4a9a      	ldr	r2, [pc, #616]	; (800926c <_dtoa_r+0x5a4>)
 8009002:	f009 030f 	and.w	r3, r9, #15
 8009006:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800900a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800900e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009012:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009016:	ea4f 1429 	mov.w	r4, r9, asr #4
 800901a:	d016      	beq.n	800904a <_dtoa_r+0x382>
 800901c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009020:	4b93      	ldr	r3, [pc, #588]	; (8009270 <_dtoa_r+0x5a8>)
 8009022:	2703      	movs	r7, #3
 8009024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009028:	f7f7 fb80 	bl	800072c <__aeabi_ddiv>
 800902c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009030:	f004 040f 	and.w	r4, r4, #15
 8009034:	4e8e      	ldr	r6, [pc, #568]	; (8009270 <_dtoa_r+0x5a8>)
 8009036:	b954      	cbnz	r4, 800904e <_dtoa_r+0x386>
 8009038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800903c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009040:	f7f7 fb74 	bl	800072c <__aeabi_ddiv>
 8009044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009048:	e029      	b.n	800909e <_dtoa_r+0x3d6>
 800904a:	2702      	movs	r7, #2
 800904c:	e7f2      	b.n	8009034 <_dtoa_r+0x36c>
 800904e:	07e1      	lsls	r1, r4, #31
 8009050:	d508      	bpl.n	8009064 <_dtoa_r+0x39c>
 8009052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009056:	e9d6 2300 	ldrd	r2, r3, [r6]
 800905a:	f7f7 fa3d 	bl	80004d8 <__aeabi_dmul>
 800905e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009062:	3701      	adds	r7, #1
 8009064:	1064      	asrs	r4, r4, #1
 8009066:	3608      	adds	r6, #8
 8009068:	e7e5      	b.n	8009036 <_dtoa_r+0x36e>
 800906a:	f000 80a5 	beq.w	80091b8 <_dtoa_r+0x4f0>
 800906e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009072:	f1c9 0400 	rsb	r4, r9, #0
 8009076:	4b7d      	ldr	r3, [pc, #500]	; (800926c <_dtoa_r+0x5a4>)
 8009078:	f004 020f 	and.w	r2, r4, #15
 800907c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	f7f7 fa28 	bl	80004d8 <__aeabi_dmul>
 8009088:	2702      	movs	r7, #2
 800908a:	2300      	movs	r3, #0
 800908c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009090:	4e77      	ldr	r6, [pc, #476]	; (8009270 <_dtoa_r+0x5a8>)
 8009092:	1124      	asrs	r4, r4, #4
 8009094:	2c00      	cmp	r4, #0
 8009096:	f040 8084 	bne.w	80091a2 <_dtoa_r+0x4da>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1d2      	bne.n	8009044 <_dtoa_r+0x37c>
 800909e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 808b 	beq.w	80091bc <_dtoa_r+0x4f4>
 80090a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80090aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80090ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090b2:	2200      	movs	r2, #0
 80090b4:	4b6f      	ldr	r3, [pc, #444]	; (8009274 <_dtoa_r+0x5ac>)
 80090b6:	f7f7 fc81 	bl	80009bc <__aeabi_dcmplt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d07e      	beq.n	80091bc <_dtoa_r+0x4f4>
 80090be:	9b02      	ldr	r3, [sp, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d07b      	beq.n	80091bc <_dtoa_r+0x4f4>
 80090c4:	f1bb 0f00 	cmp.w	fp, #0
 80090c8:	dd38      	ble.n	800913c <_dtoa_r+0x474>
 80090ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090ce:	2200      	movs	r2, #0
 80090d0:	4b69      	ldr	r3, [pc, #420]	; (8009278 <_dtoa_r+0x5b0>)
 80090d2:	f7f7 fa01 	bl	80004d8 <__aeabi_dmul>
 80090d6:	465c      	mov	r4, fp
 80090d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090dc:	f109 38ff 	add.w	r8, r9, #4294967295
 80090e0:	3701      	adds	r7, #1
 80090e2:	4638      	mov	r0, r7
 80090e4:	f7f7 f98e 	bl	8000404 <__aeabi_i2d>
 80090e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ec:	f7f7 f9f4 	bl	80004d8 <__aeabi_dmul>
 80090f0:	2200      	movs	r2, #0
 80090f2:	4b62      	ldr	r3, [pc, #392]	; (800927c <_dtoa_r+0x5b4>)
 80090f4:	f7f7 f83a 	bl	800016c <__adddf3>
 80090f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80090fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009100:	9611      	str	r6, [sp, #68]	; 0x44
 8009102:	2c00      	cmp	r4, #0
 8009104:	d15d      	bne.n	80091c2 <_dtoa_r+0x4fa>
 8009106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800910a:	2200      	movs	r2, #0
 800910c:	4b5c      	ldr	r3, [pc, #368]	; (8009280 <_dtoa_r+0x5b8>)
 800910e:	f7f7 f82b 	bl	8000168 <__aeabi_dsub>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800911a:	4633      	mov	r3, r6
 800911c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800911e:	f7f7 fc6b 	bl	80009f8 <__aeabi_dcmpgt>
 8009122:	2800      	cmp	r0, #0
 8009124:	f040 829e 	bne.w	8009664 <_dtoa_r+0x99c>
 8009128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800912c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800912e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009132:	f7f7 fc43 	bl	80009bc <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	f040 8292 	bne.w	8009660 <_dtoa_r+0x998>
 800913c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009140:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009146:	2b00      	cmp	r3, #0
 8009148:	f2c0 8153 	blt.w	80093f2 <_dtoa_r+0x72a>
 800914c:	f1b9 0f0e 	cmp.w	r9, #14
 8009150:	f300 814f 	bgt.w	80093f2 <_dtoa_r+0x72a>
 8009154:	4b45      	ldr	r3, [pc, #276]	; (800926c <_dtoa_r+0x5a4>)
 8009156:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800915a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800915e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009162:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009164:	2b00      	cmp	r3, #0
 8009166:	f280 80db 	bge.w	8009320 <_dtoa_r+0x658>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f300 80d7 	bgt.w	8009320 <_dtoa_r+0x658>
 8009172:	f040 8274 	bne.w	800965e <_dtoa_r+0x996>
 8009176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800917a:	2200      	movs	r2, #0
 800917c:	4b40      	ldr	r3, [pc, #256]	; (8009280 <_dtoa_r+0x5b8>)
 800917e:	f7f7 f9ab 	bl	80004d8 <__aeabi_dmul>
 8009182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009186:	f7f7 fc2d 	bl	80009e4 <__aeabi_dcmpge>
 800918a:	9c02      	ldr	r4, [sp, #8]
 800918c:	4626      	mov	r6, r4
 800918e:	2800      	cmp	r0, #0
 8009190:	f040 824a 	bne.w	8009628 <_dtoa_r+0x960>
 8009194:	2331      	movs	r3, #49	; 0x31
 8009196:	9f08      	ldr	r7, [sp, #32]
 8009198:	f109 0901 	add.w	r9, r9, #1
 800919c:	f807 3b01 	strb.w	r3, [r7], #1
 80091a0:	e246      	b.n	8009630 <_dtoa_r+0x968>
 80091a2:	07e2      	lsls	r2, r4, #31
 80091a4:	d505      	bpl.n	80091b2 <_dtoa_r+0x4ea>
 80091a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091aa:	f7f7 f995 	bl	80004d8 <__aeabi_dmul>
 80091ae:	2301      	movs	r3, #1
 80091b0:	3701      	adds	r7, #1
 80091b2:	1064      	asrs	r4, r4, #1
 80091b4:	3608      	adds	r6, #8
 80091b6:	e76d      	b.n	8009094 <_dtoa_r+0x3cc>
 80091b8:	2702      	movs	r7, #2
 80091ba:	e770      	b.n	800909e <_dtoa_r+0x3d6>
 80091bc:	46c8      	mov	r8, r9
 80091be:	9c02      	ldr	r4, [sp, #8]
 80091c0:	e78f      	b.n	80090e2 <_dtoa_r+0x41a>
 80091c2:	9908      	ldr	r1, [sp, #32]
 80091c4:	4b29      	ldr	r3, [pc, #164]	; (800926c <_dtoa_r+0x5a4>)
 80091c6:	4421      	add	r1, r4
 80091c8:	9112      	str	r1, [sp, #72]	; 0x48
 80091ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091d0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80091d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d8:	2900      	cmp	r1, #0
 80091da:	d055      	beq.n	8009288 <_dtoa_r+0x5c0>
 80091dc:	2000      	movs	r0, #0
 80091de:	4929      	ldr	r1, [pc, #164]	; (8009284 <_dtoa_r+0x5bc>)
 80091e0:	f7f7 faa4 	bl	800072c <__aeabi_ddiv>
 80091e4:	463b      	mov	r3, r7
 80091e6:	4632      	mov	r2, r6
 80091e8:	f7f6 ffbe 	bl	8000168 <__aeabi_dsub>
 80091ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091f0:	9f08      	ldr	r7, [sp, #32]
 80091f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f6:	f7f7 fc1f 	bl	8000a38 <__aeabi_d2iz>
 80091fa:	4604      	mov	r4, r0
 80091fc:	f7f7 f902 	bl	8000404 <__aeabi_i2d>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009208:	f7f6 ffae 	bl	8000168 <__aeabi_dsub>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	3430      	adds	r4, #48	; 0x30
 8009212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800921a:	f807 4b01 	strb.w	r4, [r7], #1
 800921e:	f7f7 fbcd 	bl	80009bc <__aeabi_dcmplt>
 8009222:	2800      	cmp	r0, #0
 8009224:	d174      	bne.n	8009310 <_dtoa_r+0x648>
 8009226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800922a:	2000      	movs	r0, #0
 800922c:	4911      	ldr	r1, [pc, #68]	; (8009274 <_dtoa_r+0x5ac>)
 800922e:	f7f6 ff9b 	bl	8000168 <__aeabi_dsub>
 8009232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009236:	f7f7 fbc1 	bl	80009bc <__aeabi_dcmplt>
 800923a:	2800      	cmp	r0, #0
 800923c:	f040 80b6 	bne.w	80093ac <_dtoa_r+0x6e4>
 8009240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009242:	429f      	cmp	r7, r3
 8009244:	f43f af7a 	beq.w	800913c <_dtoa_r+0x474>
 8009248:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800924c:	2200      	movs	r2, #0
 800924e:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <_dtoa_r+0x5b0>)
 8009250:	f7f7 f942 	bl	80004d8 <__aeabi_dmul>
 8009254:	2200      	movs	r2, #0
 8009256:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800925a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <_dtoa_r+0x5b0>)
 8009260:	f7f7 f93a 	bl	80004d8 <__aeabi_dmul>
 8009264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009268:	e7c3      	b.n	80091f2 <_dtoa_r+0x52a>
 800926a:	bf00      	nop
 800926c:	0800af70 	.word	0x0800af70
 8009270:	0800af48 	.word	0x0800af48
 8009274:	3ff00000 	.word	0x3ff00000
 8009278:	40240000 	.word	0x40240000
 800927c:	401c0000 	.word	0x401c0000
 8009280:	40140000 	.word	0x40140000
 8009284:	3fe00000 	.word	0x3fe00000
 8009288:	4630      	mov	r0, r6
 800928a:	4639      	mov	r1, r7
 800928c:	f7f7 f924 	bl	80004d8 <__aeabi_dmul>
 8009290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009292:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009296:	9c08      	ldr	r4, [sp, #32]
 8009298:	9314      	str	r3, [sp, #80]	; 0x50
 800929a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800929e:	f7f7 fbcb 	bl	8000a38 <__aeabi_d2iz>
 80092a2:	9015      	str	r0, [sp, #84]	; 0x54
 80092a4:	f7f7 f8ae 	bl	8000404 <__aeabi_i2d>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092b0:	f7f6 ff5a 	bl	8000168 <__aeabi_dsub>
 80092b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092b6:	4606      	mov	r6, r0
 80092b8:	3330      	adds	r3, #48	; 0x30
 80092ba:	f804 3b01 	strb.w	r3, [r4], #1
 80092be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092c0:	460f      	mov	r7, r1
 80092c2:	429c      	cmp	r4, r3
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	d124      	bne.n	8009314 <_dtoa_r+0x64c>
 80092ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092ce:	4bb3      	ldr	r3, [pc, #716]	; (800959c <_dtoa_r+0x8d4>)
 80092d0:	f7f6 ff4c 	bl	800016c <__adddf3>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4630      	mov	r0, r6
 80092da:	4639      	mov	r1, r7
 80092dc:	f7f7 fb8c 	bl	80009f8 <__aeabi_dcmpgt>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d162      	bne.n	80093aa <_dtoa_r+0x6e2>
 80092e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80092e8:	2000      	movs	r0, #0
 80092ea:	49ac      	ldr	r1, [pc, #688]	; (800959c <_dtoa_r+0x8d4>)
 80092ec:	f7f6 ff3c 	bl	8000168 <__aeabi_dsub>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f7 fb60 	bl	80009bc <__aeabi_dcmplt>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	f43f af1d 	beq.w	800913c <_dtoa_r+0x474>
 8009302:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009304:	1e7b      	subs	r3, r7, #1
 8009306:	9314      	str	r3, [sp, #80]	; 0x50
 8009308:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800930c:	2b30      	cmp	r3, #48	; 0x30
 800930e:	d0f8      	beq.n	8009302 <_dtoa_r+0x63a>
 8009310:	46c1      	mov	r9, r8
 8009312:	e03a      	b.n	800938a <_dtoa_r+0x6c2>
 8009314:	4ba2      	ldr	r3, [pc, #648]	; (80095a0 <_dtoa_r+0x8d8>)
 8009316:	f7f7 f8df 	bl	80004d8 <__aeabi_dmul>
 800931a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800931e:	e7bc      	b.n	800929a <_dtoa_r+0x5d2>
 8009320:	9f08      	ldr	r7, [sp, #32]
 8009322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800932a:	f7f7 f9ff 	bl	800072c <__aeabi_ddiv>
 800932e:	f7f7 fb83 	bl	8000a38 <__aeabi_d2iz>
 8009332:	4604      	mov	r4, r0
 8009334:	f7f7 f866 	bl	8000404 <__aeabi_i2d>
 8009338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800933c:	f7f7 f8cc 	bl	80004d8 <__aeabi_dmul>
 8009340:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009344:	460b      	mov	r3, r1
 8009346:	4602      	mov	r2, r0
 8009348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800934c:	f7f6 ff0c 	bl	8000168 <__aeabi_dsub>
 8009350:	f807 6b01 	strb.w	r6, [r7], #1
 8009354:	9e08      	ldr	r6, [sp, #32]
 8009356:	9b02      	ldr	r3, [sp, #8]
 8009358:	1bbe      	subs	r6, r7, r6
 800935a:	42b3      	cmp	r3, r6
 800935c:	d13a      	bne.n	80093d4 <_dtoa_r+0x70c>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	f7f6 ff03 	bl	800016c <__adddf3>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800936e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009372:	f7f7 fb41 	bl	80009f8 <__aeabi_dcmpgt>
 8009376:	bb58      	cbnz	r0, 80093d0 <_dtoa_r+0x708>
 8009378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800937c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009380:	f7f7 fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8009384:	b108      	cbz	r0, 800938a <_dtoa_r+0x6c2>
 8009386:	07e1      	lsls	r1, r4, #31
 8009388:	d422      	bmi.n	80093d0 <_dtoa_r+0x708>
 800938a:	4628      	mov	r0, r5
 800938c:	4651      	mov	r1, sl
 800938e:	f000 fb65 	bl	8009a5c <_Bfree>
 8009392:	2300      	movs	r3, #0
 8009394:	703b      	strb	r3, [r7, #0]
 8009396:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009398:	f109 0001 	add.w	r0, r9, #1
 800939c:	6018      	str	r0, [r3, #0]
 800939e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f43f acdf 	beq.w	8008d64 <_dtoa_r+0x9c>
 80093a6:	601f      	str	r7, [r3, #0]
 80093a8:	e4dc      	b.n	8008d64 <_dtoa_r+0x9c>
 80093aa:	4627      	mov	r7, r4
 80093ac:	463b      	mov	r3, r7
 80093ae:	461f      	mov	r7, r3
 80093b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093b4:	2a39      	cmp	r2, #57	; 0x39
 80093b6:	d107      	bne.n	80093c8 <_dtoa_r+0x700>
 80093b8:	9a08      	ldr	r2, [sp, #32]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d1f7      	bne.n	80093ae <_dtoa_r+0x6e6>
 80093be:	2230      	movs	r2, #48	; 0x30
 80093c0:	9908      	ldr	r1, [sp, #32]
 80093c2:	f108 0801 	add.w	r8, r8, #1
 80093c6:	700a      	strb	r2, [r1, #0]
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	3201      	adds	r2, #1
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	e79f      	b.n	8009310 <_dtoa_r+0x648>
 80093d0:	46c8      	mov	r8, r9
 80093d2:	e7eb      	b.n	80093ac <_dtoa_r+0x6e4>
 80093d4:	2200      	movs	r2, #0
 80093d6:	4b72      	ldr	r3, [pc, #456]	; (80095a0 <_dtoa_r+0x8d8>)
 80093d8:	f7f7 f87e 	bl	80004d8 <__aeabi_dmul>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	f7f7 fade 	bl	80009a8 <__aeabi_dcmpeq>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d098      	beq.n	8009322 <_dtoa_r+0x65a>
 80093f0:	e7cb      	b.n	800938a <_dtoa_r+0x6c2>
 80093f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 80cd 	beq.w	8009594 <_dtoa_r+0x8cc>
 80093fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093fc:	2a01      	cmp	r2, #1
 80093fe:	f300 80af 	bgt.w	8009560 <_dtoa_r+0x898>
 8009402:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009404:	2a00      	cmp	r2, #0
 8009406:	f000 80a7 	beq.w	8009558 <_dtoa_r+0x890>
 800940a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800940e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009410:	9f06      	ldr	r7, [sp, #24]
 8009412:	9a06      	ldr	r2, [sp, #24]
 8009414:	2101      	movs	r1, #1
 8009416:	441a      	add	r2, r3
 8009418:	9206      	str	r2, [sp, #24]
 800941a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800941c:	4628      	mov	r0, r5
 800941e:	441a      	add	r2, r3
 8009420:	9209      	str	r2, [sp, #36]	; 0x24
 8009422:	f000 fbd5 	bl	8009bd0 <__i2b>
 8009426:	4606      	mov	r6, r0
 8009428:	2f00      	cmp	r7, #0
 800942a:	dd0c      	ble.n	8009446 <_dtoa_r+0x77e>
 800942c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd09      	ble.n	8009446 <_dtoa_r+0x77e>
 8009432:	42bb      	cmp	r3, r7
 8009434:	bfa8      	it	ge
 8009436:	463b      	movge	r3, r7
 8009438:	9a06      	ldr	r2, [sp, #24]
 800943a:	1aff      	subs	r7, r7, r3
 800943c:	1ad2      	subs	r2, r2, r3
 800943e:	9206      	str	r2, [sp, #24]
 8009440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	9309      	str	r3, [sp, #36]	; 0x24
 8009446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009448:	b1f3      	cbz	r3, 8009488 <_dtoa_r+0x7c0>
 800944a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f000 80a9 	beq.w	80095a4 <_dtoa_r+0x8dc>
 8009452:	2c00      	cmp	r4, #0
 8009454:	dd10      	ble.n	8009478 <_dtoa_r+0x7b0>
 8009456:	4631      	mov	r1, r6
 8009458:	4622      	mov	r2, r4
 800945a:	4628      	mov	r0, r5
 800945c:	f000 fc72 	bl	8009d44 <__pow5mult>
 8009460:	4652      	mov	r2, sl
 8009462:	4601      	mov	r1, r0
 8009464:	4606      	mov	r6, r0
 8009466:	4628      	mov	r0, r5
 8009468:	f000 fbc8 	bl	8009bfc <__multiply>
 800946c:	4680      	mov	r8, r0
 800946e:	4651      	mov	r1, sl
 8009470:	4628      	mov	r0, r5
 8009472:	f000 faf3 	bl	8009a5c <_Bfree>
 8009476:	46c2      	mov	sl, r8
 8009478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800947a:	1b1a      	subs	r2, r3, r4
 800947c:	d004      	beq.n	8009488 <_dtoa_r+0x7c0>
 800947e:	4651      	mov	r1, sl
 8009480:	4628      	mov	r0, r5
 8009482:	f000 fc5f 	bl	8009d44 <__pow5mult>
 8009486:	4682      	mov	sl, r0
 8009488:	2101      	movs	r1, #1
 800948a:	4628      	mov	r0, r5
 800948c:	f000 fba0 	bl	8009bd0 <__i2b>
 8009490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009492:	4604      	mov	r4, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	f340 8087 	ble.w	80095a8 <_dtoa_r+0x8e0>
 800949a:	461a      	mov	r2, r3
 800949c:	4601      	mov	r1, r0
 800949e:	4628      	mov	r0, r5
 80094a0:	f000 fc50 	bl	8009d44 <__pow5mult>
 80094a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094a6:	4604      	mov	r4, r0
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	f340 8080 	ble.w	80095ae <_dtoa_r+0x8e6>
 80094ae:	f04f 0800 	mov.w	r8, #0
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094b8:	6918      	ldr	r0, [r3, #16]
 80094ba:	f000 fb3b 	bl	8009b34 <__hi0bits>
 80094be:	f1c0 0020 	rsb	r0, r0, #32
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	4418      	add	r0, r3
 80094c6:	f010 001f 	ands.w	r0, r0, #31
 80094ca:	f000 8092 	beq.w	80095f2 <_dtoa_r+0x92a>
 80094ce:	f1c0 0320 	rsb	r3, r0, #32
 80094d2:	2b04      	cmp	r3, #4
 80094d4:	f340 808a 	ble.w	80095ec <_dtoa_r+0x924>
 80094d8:	f1c0 001c 	rsb	r0, r0, #28
 80094dc:	9b06      	ldr	r3, [sp, #24]
 80094de:	4407      	add	r7, r0
 80094e0:	4403      	add	r3, r0
 80094e2:	9306      	str	r3, [sp, #24]
 80094e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e6:	4403      	add	r3, r0
 80094e8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ea:	9b06      	ldr	r3, [sp, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd05      	ble.n	80094fc <_dtoa_r+0x834>
 80094f0:	4651      	mov	r1, sl
 80094f2:	461a      	mov	r2, r3
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 fc7f 	bl	8009df8 <__lshift>
 80094fa:	4682      	mov	sl, r0
 80094fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dd05      	ble.n	800950e <_dtoa_r+0x846>
 8009502:	4621      	mov	r1, r4
 8009504:	461a      	mov	r2, r3
 8009506:	4628      	mov	r0, r5
 8009508:	f000 fc76 	bl	8009df8 <__lshift>
 800950c:	4604      	mov	r4, r0
 800950e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009510:	2b00      	cmp	r3, #0
 8009512:	d070      	beq.n	80095f6 <_dtoa_r+0x92e>
 8009514:	4621      	mov	r1, r4
 8009516:	4650      	mov	r0, sl
 8009518:	f000 fcda 	bl	8009ed0 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	da6a      	bge.n	80095f6 <_dtoa_r+0x92e>
 8009520:	2300      	movs	r3, #0
 8009522:	4651      	mov	r1, sl
 8009524:	220a      	movs	r2, #10
 8009526:	4628      	mov	r0, r5
 8009528:	f000 faba 	bl	8009aa0 <__multadd>
 800952c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800952e:	4682      	mov	sl, r0
 8009530:	f109 39ff 	add.w	r9, r9, #4294967295
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8193 	beq.w	8009860 <_dtoa_r+0xb98>
 800953a:	4631      	mov	r1, r6
 800953c:	2300      	movs	r3, #0
 800953e:	220a      	movs	r2, #10
 8009540:	4628      	mov	r0, r5
 8009542:	f000 faad 	bl	8009aa0 <__multadd>
 8009546:	f1bb 0f00 	cmp.w	fp, #0
 800954a:	4606      	mov	r6, r0
 800954c:	f300 8093 	bgt.w	8009676 <_dtoa_r+0x9ae>
 8009550:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009552:	2b02      	cmp	r3, #2
 8009554:	dc57      	bgt.n	8009606 <_dtoa_r+0x93e>
 8009556:	e08e      	b.n	8009676 <_dtoa_r+0x9ae>
 8009558:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800955a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800955e:	e756      	b.n	800940e <_dtoa_r+0x746>
 8009560:	9b02      	ldr	r3, [sp, #8]
 8009562:	1e5c      	subs	r4, r3, #1
 8009564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009566:	42a3      	cmp	r3, r4
 8009568:	bfb7      	itett	lt
 800956a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800956c:	1b1c      	subge	r4, r3, r4
 800956e:	1ae2      	sublt	r2, r4, r3
 8009570:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009572:	bfbe      	ittt	lt
 8009574:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009576:	189b      	addlt	r3, r3, r2
 8009578:	930e      	strlt	r3, [sp, #56]	; 0x38
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	bfb8      	it	lt
 800957e:	2400      	movlt	r4, #0
 8009580:	2b00      	cmp	r3, #0
 8009582:	bfbb      	ittet	lt
 8009584:	9b06      	ldrlt	r3, [sp, #24]
 8009586:	9a02      	ldrlt	r2, [sp, #8]
 8009588:	9f06      	ldrge	r7, [sp, #24]
 800958a:	1a9f      	sublt	r7, r3, r2
 800958c:	bfac      	ite	ge
 800958e:	9b02      	ldrge	r3, [sp, #8]
 8009590:	2300      	movlt	r3, #0
 8009592:	e73e      	b.n	8009412 <_dtoa_r+0x74a>
 8009594:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009596:	9f06      	ldr	r7, [sp, #24]
 8009598:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800959a:	e745      	b.n	8009428 <_dtoa_r+0x760>
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	40240000 	.word	0x40240000
 80095a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095a6:	e76a      	b.n	800947e <_dtoa_r+0x7b6>
 80095a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	dc19      	bgt.n	80095e2 <_dtoa_r+0x91a>
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	b9bb      	cbnz	r3, 80095e2 <_dtoa_r+0x91a>
 80095b2:	9b05      	ldr	r3, [sp, #20]
 80095b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095b8:	b99b      	cbnz	r3, 80095e2 <_dtoa_r+0x91a>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095c0:	0d1b      	lsrs	r3, r3, #20
 80095c2:	051b      	lsls	r3, r3, #20
 80095c4:	b183      	cbz	r3, 80095e8 <_dtoa_r+0x920>
 80095c6:	f04f 0801 	mov.w	r8, #1
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	3301      	adds	r3, #1
 80095ce:	9306      	str	r3, [sp, #24]
 80095d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d2:	3301      	adds	r3, #1
 80095d4:	9309      	str	r3, [sp, #36]	; 0x24
 80095d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f47f af6a 	bne.w	80094b2 <_dtoa_r+0x7ea>
 80095de:	2001      	movs	r0, #1
 80095e0:	e76f      	b.n	80094c2 <_dtoa_r+0x7fa>
 80095e2:	f04f 0800 	mov.w	r8, #0
 80095e6:	e7f6      	b.n	80095d6 <_dtoa_r+0x90e>
 80095e8:	4698      	mov	r8, r3
 80095ea:	e7f4      	b.n	80095d6 <_dtoa_r+0x90e>
 80095ec:	f43f af7d 	beq.w	80094ea <_dtoa_r+0x822>
 80095f0:	4618      	mov	r0, r3
 80095f2:	301c      	adds	r0, #28
 80095f4:	e772      	b.n	80094dc <_dtoa_r+0x814>
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	dc36      	bgt.n	800966a <_dtoa_r+0x9a2>
 80095fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095fe:	2b02      	cmp	r3, #2
 8009600:	dd33      	ble.n	800966a <_dtoa_r+0x9a2>
 8009602:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009606:	f1bb 0f00 	cmp.w	fp, #0
 800960a:	d10d      	bne.n	8009628 <_dtoa_r+0x960>
 800960c:	4621      	mov	r1, r4
 800960e:	465b      	mov	r3, fp
 8009610:	2205      	movs	r2, #5
 8009612:	4628      	mov	r0, r5
 8009614:	f000 fa44 	bl	8009aa0 <__multadd>
 8009618:	4601      	mov	r1, r0
 800961a:	4604      	mov	r4, r0
 800961c:	4650      	mov	r0, sl
 800961e:	f000 fc57 	bl	8009ed0 <__mcmp>
 8009622:	2800      	cmp	r0, #0
 8009624:	f73f adb6 	bgt.w	8009194 <_dtoa_r+0x4cc>
 8009628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800962a:	9f08      	ldr	r7, [sp, #32]
 800962c:	ea6f 0903 	mvn.w	r9, r3
 8009630:	f04f 0800 	mov.w	r8, #0
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f000 fa10 	bl	8009a5c <_Bfree>
 800963c:	2e00      	cmp	r6, #0
 800963e:	f43f aea4 	beq.w	800938a <_dtoa_r+0x6c2>
 8009642:	f1b8 0f00 	cmp.w	r8, #0
 8009646:	d005      	beq.n	8009654 <_dtoa_r+0x98c>
 8009648:	45b0      	cmp	r8, r6
 800964a:	d003      	beq.n	8009654 <_dtoa_r+0x98c>
 800964c:	4641      	mov	r1, r8
 800964e:	4628      	mov	r0, r5
 8009650:	f000 fa04 	bl	8009a5c <_Bfree>
 8009654:	4631      	mov	r1, r6
 8009656:	4628      	mov	r0, r5
 8009658:	f000 fa00 	bl	8009a5c <_Bfree>
 800965c:	e695      	b.n	800938a <_dtoa_r+0x6c2>
 800965e:	2400      	movs	r4, #0
 8009660:	4626      	mov	r6, r4
 8009662:	e7e1      	b.n	8009628 <_dtoa_r+0x960>
 8009664:	46c1      	mov	r9, r8
 8009666:	4626      	mov	r6, r4
 8009668:	e594      	b.n	8009194 <_dtoa_r+0x4cc>
 800966a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800966c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 80fc 	beq.w	800986e <_dtoa_r+0xba6>
 8009676:	2f00      	cmp	r7, #0
 8009678:	dd05      	ble.n	8009686 <_dtoa_r+0x9be>
 800967a:	4631      	mov	r1, r6
 800967c:	463a      	mov	r2, r7
 800967e:	4628      	mov	r0, r5
 8009680:	f000 fbba 	bl	8009df8 <__lshift>
 8009684:	4606      	mov	r6, r0
 8009686:	f1b8 0f00 	cmp.w	r8, #0
 800968a:	d05c      	beq.n	8009746 <_dtoa_r+0xa7e>
 800968c:	4628      	mov	r0, r5
 800968e:	6871      	ldr	r1, [r6, #4]
 8009690:	f000 f9a4 	bl	80099dc <_Balloc>
 8009694:	4607      	mov	r7, r0
 8009696:	b928      	cbnz	r0, 80096a4 <_dtoa_r+0x9dc>
 8009698:	4602      	mov	r2, r0
 800969a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800969e:	4b7e      	ldr	r3, [pc, #504]	; (8009898 <_dtoa_r+0xbd0>)
 80096a0:	f7ff bb26 	b.w	8008cf0 <_dtoa_r+0x28>
 80096a4:	6932      	ldr	r2, [r6, #16]
 80096a6:	f106 010c 	add.w	r1, r6, #12
 80096aa:	3202      	adds	r2, #2
 80096ac:	0092      	lsls	r2, r2, #2
 80096ae:	300c      	adds	r0, #12
 80096b0:	f7fe fb99 	bl	8007de6 <memcpy>
 80096b4:	2201      	movs	r2, #1
 80096b6:	4639      	mov	r1, r7
 80096b8:	4628      	mov	r0, r5
 80096ba:	f000 fb9d 	bl	8009df8 <__lshift>
 80096be:	46b0      	mov	r8, r6
 80096c0:	4606      	mov	r6, r0
 80096c2:	9b08      	ldr	r3, [sp, #32]
 80096c4:	3301      	adds	r3, #1
 80096c6:	9302      	str	r3, [sp, #8]
 80096c8:	9b08      	ldr	r3, [sp, #32]
 80096ca:	445b      	add	r3, fp
 80096cc:	930a      	str	r3, [sp, #40]	; 0x28
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	9309      	str	r3, [sp, #36]	; 0x24
 80096d6:	9b02      	ldr	r3, [sp, #8]
 80096d8:	4621      	mov	r1, r4
 80096da:	4650      	mov	r0, sl
 80096dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80096e0:	f7ff fa62 	bl	8008ba8 <quorem>
 80096e4:	4603      	mov	r3, r0
 80096e6:	4641      	mov	r1, r8
 80096e8:	3330      	adds	r3, #48	; 0x30
 80096ea:	9004      	str	r0, [sp, #16]
 80096ec:	4650      	mov	r0, sl
 80096ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80096f0:	f000 fbee 	bl	8009ed0 <__mcmp>
 80096f4:	4632      	mov	r2, r6
 80096f6:	9006      	str	r0, [sp, #24]
 80096f8:	4621      	mov	r1, r4
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 fc04 	bl	8009f08 <__mdiff>
 8009700:	68c2      	ldr	r2, [r0, #12]
 8009702:	4607      	mov	r7, r0
 8009704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009706:	bb02      	cbnz	r2, 800974a <_dtoa_r+0xa82>
 8009708:	4601      	mov	r1, r0
 800970a:	4650      	mov	r0, sl
 800970c:	f000 fbe0 	bl	8009ed0 <__mcmp>
 8009710:	4602      	mov	r2, r0
 8009712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009714:	4639      	mov	r1, r7
 8009716:	4628      	mov	r0, r5
 8009718:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800971c:	f000 f99e 	bl	8009a5c <_Bfree>
 8009720:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009724:	9f02      	ldr	r7, [sp, #8]
 8009726:	ea43 0102 	orr.w	r1, r3, r2
 800972a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972c:	430b      	orrs	r3, r1
 800972e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009730:	d10d      	bne.n	800974e <_dtoa_r+0xa86>
 8009732:	2b39      	cmp	r3, #57	; 0x39
 8009734:	d027      	beq.n	8009786 <_dtoa_r+0xabe>
 8009736:	9a06      	ldr	r2, [sp, #24]
 8009738:	2a00      	cmp	r2, #0
 800973a:	dd01      	ble.n	8009740 <_dtoa_r+0xa78>
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	3331      	adds	r3, #49	; 0x31
 8009740:	f88b 3000 	strb.w	r3, [fp]
 8009744:	e776      	b.n	8009634 <_dtoa_r+0x96c>
 8009746:	4630      	mov	r0, r6
 8009748:	e7b9      	b.n	80096be <_dtoa_r+0x9f6>
 800974a:	2201      	movs	r2, #1
 800974c:	e7e2      	b.n	8009714 <_dtoa_r+0xa4c>
 800974e:	9906      	ldr	r1, [sp, #24]
 8009750:	2900      	cmp	r1, #0
 8009752:	db04      	blt.n	800975e <_dtoa_r+0xa96>
 8009754:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009756:	4301      	orrs	r1, r0
 8009758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800975a:	4301      	orrs	r1, r0
 800975c:	d120      	bne.n	80097a0 <_dtoa_r+0xad8>
 800975e:	2a00      	cmp	r2, #0
 8009760:	ddee      	ble.n	8009740 <_dtoa_r+0xa78>
 8009762:	4651      	mov	r1, sl
 8009764:	2201      	movs	r2, #1
 8009766:	4628      	mov	r0, r5
 8009768:	9302      	str	r3, [sp, #8]
 800976a:	f000 fb45 	bl	8009df8 <__lshift>
 800976e:	4621      	mov	r1, r4
 8009770:	4682      	mov	sl, r0
 8009772:	f000 fbad 	bl	8009ed0 <__mcmp>
 8009776:	2800      	cmp	r0, #0
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	dc02      	bgt.n	8009782 <_dtoa_r+0xaba>
 800977c:	d1e0      	bne.n	8009740 <_dtoa_r+0xa78>
 800977e:	07da      	lsls	r2, r3, #31
 8009780:	d5de      	bpl.n	8009740 <_dtoa_r+0xa78>
 8009782:	2b39      	cmp	r3, #57	; 0x39
 8009784:	d1da      	bne.n	800973c <_dtoa_r+0xa74>
 8009786:	2339      	movs	r3, #57	; 0x39
 8009788:	f88b 3000 	strb.w	r3, [fp]
 800978c:	463b      	mov	r3, r7
 800978e:	461f      	mov	r7, r3
 8009790:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009794:	3b01      	subs	r3, #1
 8009796:	2a39      	cmp	r2, #57	; 0x39
 8009798:	d050      	beq.n	800983c <_dtoa_r+0xb74>
 800979a:	3201      	adds	r2, #1
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e749      	b.n	8009634 <_dtoa_r+0x96c>
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	dd03      	ble.n	80097ac <_dtoa_r+0xae4>
 80097a4:	2b39      	cmp	r3, #57	; 0x39
 80097a6:	d0ee      	beq.n	8009786 <_dtoa_r+0xabe>
 80097a8:	3301      	adds	r3, #1
 80097aa:	e7c9      	b.n	8009740 <_dtoa_r+0xa78>
 80097ac:	9a02      	ldr	r2, [sp, #8]
 80097ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097b4:	428a      	cmp	r2, r1
 80097b6:	d02a      	beq.n	800980e <_dtoa_r+0xb46>
 80097b8:	4651      	mov	r1, sl
 80097ba:	2300      	movs	r3, #0
 80097bc:	220a      	movs	r2, #10
 80097be:	4628      	mov	r0, r5
 80097c0:	f000 f96e 	bl	8009aa0 <__multadd>
 80097c4:	45b0      	cmp	r8, r6
 80097c6:	4682      	mov	sl, r0
 80097c8:	f04f 0300 	mov.w	r3, #0
 80097cc:	f04f 020a 	mov.w	r2, #10
 80097d0:	4641      	mov	r1, r8
 80097d2:	4628      	mov	r0, r5
 80097d4:	d107      	bne.n	80097e6 <_dtoa_r+0xb1e>
 80097d6:	f000 f963 	bl	8009aa0 <__multadd>
 80097da:	4680      	mov	r8, r0
 80097dc:	4606      	mov	r6, r0
 80097de:	9b02      	ldr	r3, [sp, #8]
 80097e0:	3301      	adds	r3, #1
 80097e2:	9302      	str	r3, [sp, #8]
 80097e4:	e777      	b.n	80096d6 <_dtoa_r+0xa0e>
 80097e6:	f000 f95b 	bl	8009aa0 <__multadd>
 80097ea:	4631      	mov	r1, r6
 80097ec:	4680      	mov	r8, r0
 80097ee:	2300      	movs	r3, #0
 80097f0:	220a      	movs	r2, #10
 80097f2:	4628      	mov	r0, r5
 80097f4:	f000 f954 	bl	8009aa0 <__multadd>
 80097f8:	4606      	mov	r6, r0
 80097fa:	e7f0      	b.n	80097de <_dtoa_r+0xb16>
 80097fc:	f1bb 0f00 	cmp.w	fp, #0
 8009800:	bfcc      	ite	gt
 8009802:	465f      	movgt	r7, fp
 8009804:	2701      	movle	r7, #1
 8009806:	f04f 0800 	mov.w	r8, #0
 800980a:	9a08      	ldr	r2, [sp, #32]
 800980c:	4417      	add	r7, r2
 800980e:	4651      	mov	r1, sl
 8009810:	2201      	movs	r2, #1
 8009812:	4628      	mov	r0, r5
 8009814:	9302      	str	r3, [sp, #8]
 8009816:	f000 faef 	bl	8009df8 <__lshift>
 800981a:	4621      	mov	r1, r4
 800981c:	4682      	mov	sl, r0
 800981e:	f000 fb57 	bl	8009ed0 <__mcmp>
 8009822:	2800      	cmp	r0, #0
 8009824:	dcb2      	bgt.n	800978c <_dtoa_r+0xac4>
 8009826:	d102      	bne.n	800982e <_dtoa_r+0xb66>
 8009828:	9b02      	ldr	r3, [sp, #8]
 800982a:	07db      	lsls	r3, r3, #31
 800982c:	d4ae      	bmi.n	800978c <_dtoa_r+0xac4>
 800982e:	463b      	mov	r3, r7
 8009830:	461f      	mov	r7, r3
 8009832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009836:	2a30      	cmp	r2, #48	; 0x30
 8009838:	d0fa      	beq.n	8009830 <_dtoa_r+0xb68>
 800983a:	e6fb      	b.n	8009634 <_dtoa_r+0x96c>
 800983c:	9a08      	ldr	r2, [sp, #32]
 800983e:	429a      	cmp	r2, r3
 8009840:	d1a5      	bne.n	800978e <_dtoa_r+0xac6>
 8009842:	2331      	movs	r3, #49	; 0x31
 8009844:	f109 0901 	add.w	r9, r9, #1
 8009848:	7013      	strb	r3, [r2, #0]
 800984a:	e6f3      	b.n	8009634 <_dtoa_r+0x96c>
 800984c:	4b13      	ldr	r3, [pc, #76]	; (800989c <_dtoa_r+0xbd4>)
 800984e:	f7ff baa7 	b.w	8008da0 <_dtoa_r+0xd8>
 8009852:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009854:	2b00      	cmp	r3, #0
 8009856:	f47f aa80 	bne.w	8008d5a <_dtoa_r+0x92>
 800985a:	4b11      	ldr	r3, [pc, #68]	; (80098a0 <_dtoa_r+0xbd8>)
 800985c:	f7ff baa0 	b.w	8008da0 <_dtoa_r+0xd8>
 8009860:	f1bb 0f00 	cmp.w	fp, #0
 8009864:	dc03      	bgt.n	800986e <_dtoa_r+0xba6>
 8009866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009868:	2b02      	cmp	r3, #2
 800986a:	f73f aecc 	bgt.w	8009606 <_dtoa_r+0x93e>
 800986e:	9f08      	ldr	r7, [sp, #32]
 8009870:	4621      	mov	r1, r4
 8009872:	4650      	mov	r0, sl
 8009874:	f7ff f998 	bl	8008ba8 <quorem>
 8009878:	9a08      	ldr	r2, [sp, #32]
 800987a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800987e:	f807 3b01 	strb.w	r3, [r7], #1
 8009882:	1aba      	subs	r2, r7, r2
 8009884:	4593      	cmp	fp, r2
 8009886:	ddb9      	ble.n	80097fc <_dtoa_r+0xb34>
 8009888:	4651      	mov	r1, sl
 800988a:	2300      	movs	r3, #0
 800988c:	220a      	movs	r2, #10
 800988e:	4628      	mov	r0, r5
 8009890:	f000 f906 	bl	8009aa0 <__multadd>
 8009894:	4682      	mov	sl, r0
 8009896:	e7eb      	b.n	8009870 <_dtoa_r+0xba8>
 8009898:	0800aed7 	.word	0x0800aed7
 800989c:	0800ae30 	.word	0x0800ae30
 80098a0:	0800ae54 	.word	0x0800ae54

080098a4 <_localeconv_r>:
 80098a4:	4800      	ldr	r0, [pc, #0]	; (80098a8 <_localeconv_r+0x4>)
 80098a6:	4770      	bx	lr
 80098a8:	20000174 	.word	0x20000174

080098ac <_lseek_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	4611      	mov	r1, r2
 80098b4:	2200      	movs	r2, #0
 80098b6:	4d05      	ldr	r5, [pc, #20]	; (80098cc <_lseek_r+0x20>)
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	f7f7 fe1b 	bl	80014f6 <_lseek>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_lseek_r+0x1e>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_lseek_r+0x1e>
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	20004680 	.word	0x20004680

080098d0 <__swhatbuf_r>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	460e      	mov	r6, r1
 80098d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d8:	4614      	mov	r4, r2
 80098da:	2900      	cmp	r1, #0
 80098dc:	461d      	mov	r5, r3
 80098de:	b096      	sub	sp, #88	; 0x58
 80098e0:	da07      	bge.n	80098f2 <__swhatbuf_r+0x22>
 80098e2:	2300      	movs	r3, #0
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	89b3      	ldrh	r3, [r6, #12]
 80098e8:	061a      	lsls	r2, r3, #24
 80098ea:	d410      	bmi.n	800990e <__swhatbuf_r+0x3e>
 80098ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f0:	e00e      	b.n	8009910 <__swhatbuf_r+0x40>
 80098f2:	466a      	mov	r2, sp
 80098f4:	f000 fd9c 	bl	800a430 <_fstat_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	dbf2      	blt.n	80098e2 <__swhatbuf_r+0x12>
 80098fc:	9a01      	ldr	r2, [sp, #4]
 80098fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009906:	425a      	negs	r2, r3
 8009908:	415a      	adcs	r2, r3
 800990a:	602a      	str	r2, [r5, #0]
 800990c:	e7ee      	b.n	80098ec <__swhatbuf_r+0x1c>
 800990e:	2340      	movs	r3, #64	; 0x40
 8009910:	2000      	movs	r0, #0
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	b016      	add	sp, #88	; 0x58
 8009916:	bd70      	pop	{r4, r5, r6, pc}

08009918 <__smakebuf_r>:
 8009918:	898b      	ldrh	r3, [r1, #12]
 800991a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800991c:	079d      	lsls	r5, r3, #30
 800991e:	4606      	mov	r6, r0
 8009920:	460c      	mov	r4, r1
 8009922:	d507      	bpl.n	8009934 <__smakebuf_r+0x1c>
 8009924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	2301      	movs	r3, #1
 800992e:	6163      	str	r3, [r4, #20]
 8009930:	b002      	add	sp, #8
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	466a      	mov	r2, sp
 8009936:	ab01      	add	r3, sp, #4
 8009938:	f7ff ffca 	bl	80098d0 <__swhatbuf_r>
 800993c:	9900      	ldr	r1, [sp, #0]
 800993e:	4605      	mov	r5, r0
 8009940:	4630      	mov	r0, r6
 8009942:	f7fe fab3 	bl	8007eac <_malloc_r>
 8009946:	b948      	cbnz	r0, 800995c <__smakebuf_r+0x44>
 8009948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994c:	059a      	lsls	r2, r3, #22
 800994e:	d4ef      	bmi.n	8009930 <__smakebuf_r+0x18>
 8009950:	f023 0303 	bic.w	r3, r3, #3
 8009954:	f043 0302 	orr.w	r3, r3, #2
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	e7e3      	b.n	8009924 <__smakebuf_r+0xc>
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <__smakebuf_r+0x7c>)
 800995e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	6020      	str	r0, [r4, #0]
 8009964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	6120      	str	r0, [r4, #16]
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	b15b      	cbz	r3, 800998c <__smakebuf_r+0x74>
 8009974:	4630      	mov	r0, r6
 8009976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800997a:	f000 fd6b 	bl	800a454 <_isatty_r>
 800997e:	b128      	cbz	r0, 800998c <__smakebuf_r+0x74>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	89a0      	ldrh	r0, [r4, #12]
 800998e:	4305      	orrs	r5, r0
 8009990:	81a5      	strh	r5, [r4, #12]
 8009992:	e7cd      	b.n	8009930 <__smakebuf_r+0x18>
 8009994:	08007bf5 	.word	0x08007bf5

08009998 <malloc>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <malloc+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f7fe ba85 	b.w	8007eac <_malloc_r>
 80099a2:	bf00      	nop
 80099a4:	20000020 	.word	0x20000020

080099a8 <memchr>:
 80099a8:	4603      	mov	r3, r0
 80099aa:	b510      	push	{r4, lr}
 80099ac:	b2c9      	uxtb	r1, r1
 80099ae:	4402      	add	r2, r0
 80099b0:	4293      	cmp	r3, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	d101      	bne.n	80099ba <memchr+0x12>
 80099b6:	2000      	movs	r0, #0
 80099b8:	e003      	b.n	80099c2 <memchr+0x1a>
 80099ba:	7804      	ldrb	r4, [r0, #0]
 80099bc:	3301      	adds	r3, #1
 80099be:	428c      	cmp	r4, r1
 80099c0:	d1f6      	bne.n	80099b0 <memchr+0x8>
 80099c2:	bd10      	pop	{r4, pc}

080099c4 <__malloc_lock>:
 80099c4:	4801      	ldr	r0, [pc, #4]	; (80099cc <__malloc_lock+0x8>)
 80099c6:	f7fe ba0c 	b.w	8007de2 <__retarget_lock_acquire_recursive>
 80099ca:	bf00      	nop
 80099cc:	20004678 	.word	0x20004678

080099d0 <__malloc_unlock>:
 80099d0:	4801      	ldr	r0, [pc, #4]	; (80099d8 <__malloc_unlock+0x8>)
 80099d2:	f7fe ba07 	b.w	8007de4 <__retarget_lock_release_recursive>
 80099d6:	bf00      	nop
 80099d8:	20004678 	.word	0x20004678

080099dc <_Balloc>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	b976      	cbnz	r6, 8009a04 <_Balloc+0x28>
 80099e6:	2010      	movs	r0, #16
 80099e8:	f7ff ffd6 	bl	8009998 <malloc>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6260      	str	r0, [r4, #36]	; 0x24
 80099f0:	b920      	cbnz	r0, 80099fc <_Balloc+0x20>
 80099f2:	2166      	movs	r1, #102	; 0x66
 80099f4:	4b17      	ldr	r3, [pc, #92]	; (8009a54 <_Balloc+0x78>)
 80099f6:	4818      	ldr	r0, [pc, #96]	; (8009a58 <_Balloc+0x7c>)
 80099f8:	f000 fcea 	bl	800a3d0 <__assert_func>
 80099fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a00:	6006      	str	r6, [r0, #0]
 8009a02:	60c6      	str	r6, [r0, #12]
 8009a04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a06:	68f3      	ldr	r3, [r6, #12]
 8009a08:	b183      	cbz	r3, 8009a2c <_Balloc+0x50>
 8009a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a12:	b9b8      	cbnz	r0, 8009a44 <_Balloc+0x68>
 8009a14:	2101      	movs	r1, #1
 8009a16:	fa01 f605 	lsl.w	r6, r1, r5
 8009a1a:	1d72      	adds	r2, r6, #5
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	0092      	lsls	r2, r2, #2
 8009a20:	f000 fb5e 	bl	800a0e0 <_calloc_r>
 8009a24:	b160      	cbz	r0, 8009a40 <_Balloc+0x64>
 8009a26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a2a:	e00e      	b.n	8009a4a <_Balloc+0x6e>
 8009a2c:	2221      	movs	r2, #33	; 0x21
 8009a2e:	2104      	movs	r1, #4
 8009a30:	4620      	mov	r0, r4
 8009a32:	f000 fb55 	bl	800a0e0 <_calloc_r>
 8009a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a38:	60f0      	str	r0, [r6, #12]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e4      	bne.n	8009a0a <_Balloc+0x2e>
 8009a40:	2000      	movs	r0, #0
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	6802      	ldr	r2, [r0, #0]
 8009a46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a50:	e7f7      	b.n	8009a42 <_Balloc+0x66>
 8009a52:	bf00      	nop
 8009a54:	0800ae61 	.word	0x0800ae61
 8009a58:	0800aee8 	.word	0x0800aee8

08009a5c <_Bfree>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a60:	4605      	mov	r5, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	b976      	cbnz	r6, 8009a84 <_Bfree+0x28>
 8009a66:	2010      	movs	r0, #16
 8009a68:	f7ff ff96 	bl	8009998 <malloc>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	6268      	str	r0, [r5, #36]	; 0x24
 8009a70:	b920      	cbnz	r0, 8009a7c <_Bfree+0x20>
 8009a72:	218a      	movs	r1, #138	; 0x8a
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <_Bfree+0x3c>)
 8009a76:	4809      	ldr	r0, [pc, #36]	; (8009a9c <_Bfree+0x40>)
 8009a78:	f000 fcaa 	bl	800a3d0 <__assert_func>
 8009a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a80:	6006      	str	r6, [r0, #0]
 8009a82:	60c6      	str	r6, [r0, #12]
 8009a84:	b13c      	cbz	r4, 8009a96 <_Bfree+0x3a>
 8009a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a88:	6862      	ldr	r2, [r4, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a90:	6021      	str	r1, [r4, #0]
 8009a92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	0800ae61 	.word	0x0800ae61
 8009a9c:	0800aee8 	.word	0x0800aee8

08009aa0 <__multadd>:
 8009aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa4:	4698      	mov	r8, r3
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	690e      	ldr	r6, [r1, #16]
 8009aac:	4607      	mov	r7, r0
 8009aae:	f101 0014 	add.w	r0, r1, #20
 8009ab2:	6805      	ldr	r5, [r0, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	b2a9      	uxth	r1, r5
 8009ab8:	fb02 8101 	mla	r1, r2, r1, r8
 8009abc:	0c2d      	lsrs	r5, r5, #16
 8009abe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009ac2:	fb02 c505 	mla	r5, r2, r5, ip
 8009ac6:	b289      	uxth	r1, r1
 8009ac8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009acc:	429e      	cmp	r6, r3
 8009ace:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009ad2:	f840 1b04 	str.w	r1, [r0], #4
 8009ad6:	dcec      	bgt.n	8009ab2 <__multadd+0x12>
 8009ad8:	f1b8 0f00 	cmp.w	r8, #0
 8009adc:	d022      	beq.n	8009b24 <__multadd+0x84>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	42b3      	cmp	r3, r6
 8009ae2:	dc19      	bgt.n	8009b18 <__multadd+0x78>
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	3101      	adds	r1, #1
 8009aea:	f7ff ff77 	bl	80099dc <_Balloc>
 8009aee:	4605      	mov	r5, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__multadd+0x5e>
 8009af2:	4602      	mov	r2, r0
 8009af4:	21b5      	movs	r1, #181	; 0xb5
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <__multadd+0x8c>)
 8009af8:	480d      	ldr	r0, [pc, #52]	; (8009b30 <__multadd+0x90>)
 8009afa:	f000 fc69 	bl	800a3d0 <__assert_func>
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	f104 010c 	add.w	r1, r4, #12
 8009b04:	3202      	adds	r2, #2
 8009b06:	0092      	lsls	r2, r2, #2
 8009b08:	300c      	adds	r0, #12
 8009b0a:	f7fe f96c 	bl	8007de6 <memcpy>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ffa3 	bl	8009a5c <_Bfree>
 8009b16:	462c      	mov	r4, r5
 8009b18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009b1c:	3601      	adds	r6, #1
 8009b1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009b22:	6126      	str	r6, [r4, #16]
 8009b24:	4620      	mov	r0, r4
 8009b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b2a:	bf00      	nop
 8009b2c:	0800aed7 	.word	0x0800aed7
 8009b30:	0800aee8 	.word	0x0800aee8

08009b34 <__hi0bits>:
 8009b34:	0c02      	lsrs	r2, r0, #16
 8009b36:	0412      	lsls	r2, r2, #16
 8009b38:	4603      	mov	r3, r0
 8009b3a:	b9ca      	cbnz	r2, 8009b70 <__hi0bits+0x3c>
 8009b3c:	0403      	lsls	r3, r0, #16
 8009b3e:	2010      	movs	r0, #16
 8009b40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b44:	bf04      	itt	eq
 8009b46:	021b      	lsleq	r3, r3, #8
 8009b48:	3008      	addeq	r0, #8
 8009b4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b4e:	bf04      	itt	eq
 8009b50:	011b      	lsleq	r3, r3, #4
 8009b52:	3004      	addeq	r0, #4
 8009b54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b58:	bf04      	itt	eq
 8009b5a:	009b      	lsleq	r3, r3, #2
 8009b5c:	3002      	addeq	r0, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	db05      	blt.n	8009b6e <__hi0bits+0x3a>
 8009b62:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009b66:	f100 0001 	add.w	r0, r0, #1
 8009b6a:	bf08      	it	eq
 8009b6c:	2020      	moveq	r0, #32
 8009b6e:	4770      	bx	lr
 8009b70:	2000      	movs	r0, #0
 8009b72:	e7e5      	b.n	8009b40 <__hi0bits+0xc>

08009b74 <__lo0bits>:
 8009b74:	6803      	ldr	r3, [r0, #0]
 8009b76:	4602      	mov	r2, r0
 8009b78:	f013 0007 	ands.w	r0, r3, #7
 8009b7c:	d00b      	beq.n	8009b96 <__lo0bits+0x22>
 8009b7e:	07d9      	lsls	r1, r3, #31
 8009b80:	d422      	bmi.n	8009bc8 <__lo0bits+0x54>
 8009b82:	0798      	lsls	r0, r3, #30
 8009b84:	bf49      	itett	mi
 8009b86:	085b      	lsrmi	r3, r3, #1
 8009b88:	089b      	lsrpl	r3, r3, #2
 8009b8a:	2001      	movmi	r0, #1
 8009b8c:	6013      	strmi	r3, [r2, #0]
 8009b8e:	bf5c      	itt	pl
 8009b90:	2002      	movpl	r0, #2
 8009b92:	6013      	strpl	r3, [r2, #0]
 8009b94:	4770      	bx	lr
 8009b96:	b299      	uxth	r1, r3
 8009b98:	b909      	cbnz	r1, 8009b9e <__lo0bits+0x2a>
 8009b9a:	2010      	movs	r0, #16
 8009b9c:	0c1b      	lsrs	r3, r3, #16
 8009b9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ba2:	bf04      	itt	eq
 8009ba4:	0a1b      	lsreq	r3, r3, #8
 8009ba6:	3008      	addeq	r0, #8
 8009ba8:	0719      	lsls	r1, r3, #28
 8009baa:	bf04      	itt	eq
 8009bac:	091b      	lsreq	r3, r3, #4
 8009bae:	3004      	addeq	r0, #4
 8009bb0:	0799      	lsls	r1, r3, #30
 8009bb2:	bf04      	itt	eq
 8009bb4:	089b      	lsreq	r3, r3, #2
 8009bb6:	3002      	addeq	r0, #2
 8009bb8:	07d9      	lsls	r1, r3, #31
 8009bba:	d403      	bmi.n	8009bc4 <__lo0bits+0x50>
 8009bbc:	085b      	lsrs	r3, r3, #1
 8009bbe:	f100 0001 	add.w	r0, r0, #1
 8009bc2:	d003      	beq.n	8009bcc <__lo0bits+0x58>
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	4770      	bx	lr
 8009bc8:	2000      	movs	r0, #0
 8009bca:	4770      	bx	lr
 8009bcc:	2020      	movs	r0, #32
 8009bce:	4770      	bx	lr

08009bd0 <__i2b>:
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	f7ff ff01 	bl	80099dc <_Balloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__i2b+0x1a>
 8009bde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009be2:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <__i2b+0x24>)
 8009be4:	4804      	ldr	r0, [pc, #16]	; (8009bf8 <__i2b+0x28>)
 8009be6:	f000 fbf3 	bl	800a3d0 <__assert_func>
 8009bea:	2301      	movs	r3, #1
 8009bec:	6144      	str	r4, [r0, #20]
 8009bee:	6103      	str	r3, [r0, #16]
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800aed7 	.word	0x0800aed7
 8009bf8:	0800aee8 	.word	0x0800aee8

08009bfc <__multiply>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	4614      	mov	r4, r2
 8009c02:	690a      	ldr	r2, [r1, #16]
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	460d      	mov	r5, r1
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	bfbe      	ittt	lt
 8009c0c:	460b      	movlt	r3, r1
 8009c0e:	4625      	movlt	r5, r4
 8009c10:	461c      	movlt	r4, r3
 8009c12:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009c16:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c1a:	68ab      	ldr	r3, [r5, #8]
 8009c1c:	6869      	ldr	r1, [r5, #4]
 8009c1e:	eb0a 0709 	add.w	r7, sl, r9
 8009c22:	42bb      	cmp	r3, r7
 8009c24:	b085      	sub	sp, #20
 8009c26:	bfb8      	it	lt
 8009c28:	3101      	addlt	r1, #1
 8009c2a:	f7ff fed7 	bl	80099dc <_Balloc>
 8009c2e:	b930      	cbnz	r0, 8009c3e <__multiply+0x42>
 8009c30:	4602      	mov	r2, r0
 8009c32:	f240 115d 	movw	r1, #349	; 0x15d
 8009c36:	4b41      	ldr	r3, [pc, #260]	; (8009d3c <__multiply+0x140>)
 8009c38:	4841      	ldr	r0, [pc, #260]	; (8009d40 <__multiply+0x144>)
 8009c3a:	f000 fbc9 	bl	800a3d0 <__assert_func>
 8009c3e:	f100 0614 	add.w	r6, r0, #20
 8009c42:	4633      	mov	r3, r6
 8009c44:	2200      	movs	r2, #0
 8009c46:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009c4a:	4543      	cmp	r3, r8
 8009c4c:	d31e      	bcc.n	8009c8c <__multiply+0x90>
 8009c4e:	f105 0c14 	add.w	ip, r5, #20
 8009c52:	f104 0314 	add.w	r3, r4, #20
 8009c56:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009c5a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009c5e:	9202      	str	r2, [sp, #8]
 8009c60:	ebac 0205 	sub.w	r2, ip, r5
 8009c64:	3a15      	subs	r2, #21
 8009c66:	f022 0203 	bic.w	r2, r2, #3
 8009c6a:	3204      	adds	r2, #4
 8009c6c:	f105 0115 	add.w	r1, r5, #21
 8009c70:	458c      	cmp	ip, r1
 8009c72:	bf38      	it	cc
 8009c74:	2204      	movcc	r2, #4
 8009c76:	9201      	str	r2, [sp, #4]
 8009c78:	9a02      	ldr	r2, [sp, #8]
 8009c7a:	9303      	str	r3, [sp, #12]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d808      	bhi.n	8009c92 <__multiply+0x96>
 8009c80:	2f00      	cmp	r7, #0
 8009c82:	dc55      	bgt.n	8009d30 <__multiply+0x134>
 8009c84:	6107      	str	r7, [r0, #16]
 8009c86:	b005      	add	sp, #20
 8009c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8c:	f843 2b04 	str.w	r2, [r3], #4
 8009c90:	e7db      	b.n	8009c4a <__multiply+0x4e>
 8009c92:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c96:	f1ba 0f00 	cmp.w	sl, #0
 8009c9a:	d020      	beq.n	8009cde <__multiply+0xe2>
 8009c9c:	46b1      	mov	r9, r6
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f105 0e14 	add.w	lr, r5, #20
 8009ca4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ca8:	f8d9 b000 	ldr.w	fp, [r9]
 8009cac:	b2a1      	uxth	r1, r4
 8009cae:	fa1f fb8b 	uxth.w	fp, fp
 8009cb2:	fb0a b101 	mla	r1, sl, r1, fp
 8009cb6:	4411      	add	r1, r2
 8009cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8009cbc:	0c24      	lsrs	r4, r4, #16
 8009cbe:	0c12      	lsrs	r2, r2, #16
 8009cc0:	fb0a 2404 	mla	r4, sl, r4, r2
 8009cc4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009cc8:	b289      	uxth	r1, r1
 8009cca:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009cce:	45f4      	cmp	ip, lr
 8009cd0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009cd4:	f849 1b04 	str.w	r1, [r9], #4
 8009cd8:	d8e4      	bhi.n	8009ca4 <__multiply+0xa8>
 8009cda:	9901      	ldr	r1, [sp, #4]
 8009cdc:	5072      	str	r2, [r6, r1]
 8009cde:	9a03      	ldr	r2, [sp, #12]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ce6:	f1b9 0f00 	cmp.w	r9, #0
 8009cea:	d01f      	beq.n	8009d2c <__multiply+0x130>
 8009cec:	46b6      	mov	lr, r6
 8009cee:	f04f 0a00 	mov.w	sl, #0
 8009cf2:	6834      	ldr	r4, [r6, #0]
 8009cf4:	f105 0114 	add.w	r1, r5, #20
 8009cf8:	880a      	ldrh	r2, [r1, #0]
 8009cfa:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009cfe:	b2a4      	uxth	r4, r4
 8009d00:	fb09 b202 	mla	r2, r9, r2, fp
 8009d04:	4492      	add	sl, r2
 8009d06:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009d0a:	f84e 4b04 	str.w	r4, [lr], #4
 8009d0e:	f851 4b04 	ldr.w	r4, [r1], #4
 8009d12:	f8be 2000 	ldrh.w	r2, [lr]
 8009d16:	0c24      	lsrs	r4, r4, #16
 8009d18:	fb09 2404 	mla	r4, r9, r4, r2
 8009d1c:	458c      	cmp	ip, r1
 8009d1e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009d22:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d26:	d8e7      	bhi.n	8009cf8 <__multiply+0xfc>
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	50b4      	str	r4, [r6, r2]
 8009d2c:	3604      	adds	r6, #4
 8009d2e:	e7a3      	b.n	8009c78 <__multiply+0x7c>
 8009d30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1a5      	bne.n	8009c84 <__multiply+0x88>
 8009d38:	3f01      	subs	r7, #1
 8009d3a:	e7a1      	b.n	8009c80 <__multiply+0x84>
 8009d3c:	0800aed7 	.word	0x0800aed7
 8009d40:	0800aee8 	.word	0x0800aee8

08009d44 <__pow5mult>:
 8009d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d48:	4615      	mov	r5, r2
 8009d4a:	f012 0203 	ands.w	r2, r2, #3
 8009d4e:	4606      	mov	r6, r0
 8009d50:	460f      	mov	r7, r1
 8009d52:	d007      	beq.n	8009d64 <__pow5mult+0x20>
 8009d54:	4c25      	ldr	r4, [pc, #148]	; (8009dec <__pow5mult+0xa8>)
 8009d56:	3a01      	subs	r2, #1
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d5e:	f7ff fe9f 	bl	8009aa0 <__multadd>
 8009d62:	4607      	mov	r7, r0
 8009d64:	10ad      	asrs	r5, r5, #2
 8009d66:	d03d      	beq.n	8009de4 <__pow5mult+0xa0>
 8009d68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d6a:	b97c      	cbnz	r4, 8009d8c <__pow5mult+0x48>
 8009d6c:	2010      	movs	r0, #16
 8009d6e:	f7ff fe13 	bl	8009998 <malloc>
 8009d72:	4602      	mov	r2, r0
 8009d74:	6270      	str	r0, [r6, #36]	; 0x24
 8009d76:	b928      	cbnz	r0, 8009d84 <__pow5mult+0x40>
 8009d78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d7c:	4b1c      	ldr	r3, [pc, #112]	; (8009df0 <__pow5mult+0xac>)
 8009d7e:	481d      	ldr	r0, [pc, #116]	; (8009df4 <__pow5mult+0xb0>)
 8009d80:	f000 fb26 	bl	800a3d0 <__assert_func>
 8009d84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d88:	6004      	str	r4, [r0, #0]
 8009d8a:	60c4      	str	r4, [r0, #12]
 8009d8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d94:	b94c      	cbnz	r4, 8009daa <__pow5mult+0x66>
 8009d96:	f240 2171 	movw	r1, #625	; 0x271
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff ff18 	bl	8009bd0 <__i2b>
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009da8:	6003      	str	r3, [r0, #0]
 8009daa:	f04f 0900 	mov.w	r9, #0
 8009dae:	07eb      	lsls	r3, r5, #31
 8009db0:	d50a      	bpl.n	8009dc8 <__pow5mult+0x84>
 8009db2:	4639      	mov	r1, r7
 8009db4:	4622      	mov	r2, r4
 8009db6:	4630      	mov	r0, r6
 8009db8:	f7ff ff20 	bl	8009bfc <__multiply>
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f7ff fe4b 	bl	8009a5c <_Bfree>
 8009dc6:	4647      	mov	r7, r8
 8009dc8:	106d      	asrs	r5, r5, #1
 8009dca:	d00b      	beq.n	8009de4 <__pow5mult+0xa0>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	b938      	cbnz	r0, 8009de0 <__pow5mult+0x9c>
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff ff11 	bl	8009bfc <__multiply>
 8009dda:	6020      	str	r0, [r4, #0]
 8009ddc:	f8c0 9000 	str.w	r9, [r0]
 8009de0:	4604      	mov	r4, r0
 8009de2:	e7e4      	b.n	8009dae <__pow5mult+0x6a>
 8009de4:	4638      	mov	r0, r7
 8009de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dea:	bf00      	nop
 8009dec:	0800b038 	.word	0x0800b038
 8009df0:	0800ae61 	.word	0x0800ae61
 8009df4:	0800aee8 	.word	0x0800aee8

08009df8 <__lshift>:
 8009df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4607      	mov	r7, r0
 8009e00:	4691      	mov	r9, r2
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	6849      	ldr	r1, [r1, #4]
 8009e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e0a:	68a3      	ldr	r3, [r4, #8]
 8009e0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e10:	f108 0601 	add.w	r6, r8, #1
 8009e14:	42b3      	cmp	r3, r6
 8009e16:	db0b      	blt.n	8009e30 <__lshift+0x38>
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f7ff fddf 	bl	80099dc <_Balloc>
 8009e1e:	4605      	mov	r5, r0
 8009e20:	b948      	cbnz	r0, 8009e36 <__lshift+0x3e>
 8009e22:	4602      	mov	r2, r0
 8009e24:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e28:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <__lshift+0xd0>)
 8009e2a:	4828      	ldr	r0, [pc, #160]	; (8009ecc <__lshift+0xd4>)
 8009e2c:	f000 fad0 	bl	800a3d0 <__assert_func>
 8009e30:	3101      	adds	r1, #1
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	e7ee      	b.n	8009e14 <__lshift+0x1c>
 8009e36:	2300      	movs	r3, #0
 8009e38:	f100 0114 	add.w	r1, r0, #20
 8009e3c:	f100 0210 	add.w	r2, r0, #16
 8009e40:	4618      	mov	r0, r3
 8009e42:	4553      	cmp	r3, sl
 8009e44:	db33      	blt.n	8009eae <__lshift+0xb6>
 8009e46:	6920      	ldr	r0, [r4, #16]
 8009e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e4c:	f104 0314 	add.w	r3, r4, #20
 8009e50:	f019 091f 	ands.w	r9, r9, #31
 8009e54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e5c:	d02b      	beq.n	8009eb6 <__lshift+0xbe>
 8009e5e:	468a      	mov	sl, r1
 8009e60:	2200      	movs	r2, #0
 8009e62:	f1c9 0e20 	rsb	lr, r9, #32
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	fa00 f009 	lsl.w	r0, r0, r9
 8009e6c:	4302      	orrs	r2, r0
 8009e6e:	f84a 2b04 	str.w	r2, [sl], #4
 8009e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e76:	459c      	cmp	ip, r3
 8009e78:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e7c:	d8f3      	bhi.n	8009e66 <__lshift+0x6e>
 8009e7e:	ebac 0304 	sub.w	r3, ip, r4
 8009e82:	3b15      	subs	r3, #21
 8009e84:	f023 0303 	bic.w	r3, r3, #3
 8009e88:	3304      	adds	r3, #4
 8009e8a:	f104 0015 	add.w	r0, r4, #21
 8009e8e:	4584      	cmp	ip, r0
 8009e90:	bf38      	it	cc
 8009e92:	2304      	movcc	r3, #4
 8009e94:	50ca      	str	r2, [r1, r3]
 8009e96:	b10a      	cbz	r2, 8009e9c <__lshift+0xa4>
 8009e98:	f108 0602 	add.w	r6, r8, #2
 8009e9c:	3e01      	subs	r6, #1
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	612e      	str	r6, [r5, #16]
 8009ea4:	f7ff fdda 	bl	8009a5c <_Bfree>
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eae:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	e7c5      	b.n	8009e42 <__lshift+0x4a>
 8009eb6:	3904      	subs	r1, #4
 8009eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ebc:	459c      	cmp	ip, r3
 8009ebe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ec2:	d8f9      	bhi.n	8009eb8 <__lshift+0xc0>
 8009ec4:	e7ea      	b.n	8009e9c <__lshift+0xa4>
 8009ec6:	bf00      	nop
 8009ec8:	0800aed7 	.word	0x0800aed7
 8009ecc:	0800aee8 	.word	0x0800aee8

08009ed0 <__mcmp>:
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	690a      	ldr	r2, [r1, #16]
 8009ed4:	6900      	ldr	r0, [r0, #16]
 8009ed6:	b530      	push	{r4, r5, lr}
 8009ed8:	1a80      	subs	r0, r0, r2
 8009eda:	d10d      	bne.n	8009ef8 <__mcmp+0x28>
 8009edc:	3314      	adds	r3, #20
 8009ede:	3114      	adds	r1, #20
 8009ee0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ee4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ee8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009eec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ef0:	4295      	cmp	r5, r2
 8009ef2:	d002      	beq.n	8009efa <__mcmp+0x2a>
 8009ef4:	d304      	bcc.n	8009f00 <__mcmp+0x30>
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	bd30      	pop	{r4, r5, pc}
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	d3f4      	bcc.n	8009ee8 <__mcmp+0x18>
 8009efe:	e7fb      	b.n	8009ef8 <__mcmp+0x28>
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	e7f8      	b.n	8009ef8 <__mcmp+0x28>
	...

08009f08 <__mdiff>:
 8009f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	4606      	mov	r6, r0
 8009f10:	4611      	mov	r1, r2
 8009f12:	4620      	mov	r0, r4
 8009f14:	4692      	mov	sl, r2
 8009f16:	f7ff ffdb 	bl	8009ed0 <__mcmp>
 8009f1a:	1e05      	subs	r5, r0, #0
 8009f1c:	d111      	bne.n	8009f42 <__mdiff+0x3a>
 8009f1e:	4629      	mov	r1, r5
 8009f20:	4630      	mov	r0, r6
 8009f22:	f7ff fd5b 	bl	80099dc <_Balloc>
 8009f26:	4602      	mov	r2, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <__mdiff+0x2e>
 8009f2a:	f240 2132 	movw	r1, #562	; 0x232
 8009f2e:	4b3c      	ldr	r3, [pc, #240]	; (800a020 <__mdiff+0x118>)
 8009f30:	483c      	ldr	r0, [pc, #240]	; (800a024 <__mdiff+0x11c>)
 8009f32:	f000 fa4d 	bl	800a3d0 <__assert_func>
 8009f36:	2301      	movs	r3, #1
 8009f38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f42:	bfa4      	itt	ge
 8009f44:	4653      	movge	r3, sl
 8009f46:	46a2      	movge	sl, r4
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009f4e:	bfa6      	itte	ge
 8009f50:	461c      	movge	r4, r3
 8009f52:	2500      	movge	r5, #0
 8009f54:	2501      	movlt	r5, #1
 8009f56:	f7ff fd41 	bl	80099dc <_Balloc>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	b918      	cbnz	r0, 8009f66 <__mdiff+0x5e>
 8009f5e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f62:	4b2f      	ldr	r3, [pc, #188]	; (800a020 <__mdiff+0x118>)
 8009f64:	e7e4      	b.n	8009f30 <__mdiff+0x28>
 8009f66:	f100 0814 	add.w	r8, r0, #20
 8009f6a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009f6e:	60c5      	str	r5, [r0, #12]
 8009f70:	f04f 0c00 	mov.w	ip, #0
 8009f74:	f10a 0514 	add.w	r5, sl, #20
 8009f78:	f10a 0010 	add.w	r0, sl, #16
 8009f7c:	46c2      	mov	sl, r8
 8009f7e:	6926      	ldr	r6, [r4, #16]
 8009f80:	f104 0914 	add.w	r9, r4, #20
 8009f84:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009f88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f8c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009f90:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f94:	fa1f f18b 	uxth.w	r1, fp
 8009f98:	4461      	add	r1, ip
 8009f9a:	fa1f fc83 	uxth.w	ip, r3
 8009f9e:	0c1b      	lsrs	r3, r3, #16
 8009fa0:	eba1 010c 	sub.w	r1, r1, ip
 8009fa4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fa8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009fac:	b289      	uxth	r1, r1
 8009fae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009fb2:	454e      	cmp	r6, r9
 8009fb4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009fb8:	f84a 3b04 	str.w	r3, [sl], #4
 8009fbc:	d8e6      	bhi.n	8009f8c <__mdiff+0x84>
 8009fbe:	1b33      	subs	r3, r6, r4
 8009fc0:	3b15      	subs	r3, #21
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	3415      	adds	r4, #21
 8009fc8:	3304      	adds	r3, #4
 8009fca:	42a6      	cmp	r6, r4
 8009fcc:	bf38      	it	cc
 8009fce:	2304      	movcc	r3, #4
 8009fd0:	441d      	add	r5, r3
 8009fd2:	4443      	add	r3, r8
 8009fd4:	461e      	mov	r6, r3
 8009fd6:	462c      	mov	r4, r5
 8009fd8:	4574      	cmp	r4, lr
 8009fda:	d30e      	bcc.n	8009ffa <__mdiff+0xf2>
 8009fdc:	f10e 0103 	add.w	r1, lr, #3
 8009fe0:	1b49      	subs	r1, r1, r5
 8009fe2:	f021 0103 	bic.w	r1, r1, #3
 8009fe6:	3d03      	subs	r5, #3
 8009fe8:	45ae      	cmp	lr, r5
 8009fea:	bf38      	it	cc
 8009fec:	2100      	movcc	r1, #0
 8009fee:	4419      	add	r1, r3
 8009ff0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ff4:	b18b      	cbz	r3, 800a01a <__mdiff+0x112>
 8009ff6:	6117      	str	r7, [r2, #16]
 8009ff8:	e7a0      	b.n	8009f3c <__mdiff+0x34>
 8009ffa:	f854 8b04 	ldr.w	r8, [r4], #4
 8009ffe:	fa1f f188 	uxth.w	r1, r8
 800a002:	4461      	add	r1, ip
 800a004:	1408      	asrs	r0, r1, #16
 800a006:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800a00a:	b289      	uxth	r1, r1
 800a00c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a010:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a014:	f846 1b04 	str.w	r1, [r6], #4
 800a018:	e7de      	b.n	8009fd8 <__mdiff+0xd0>
 800a01a:	3f01      	subs	r7, #1
 800a01c:	e7e8      	b.n	8009ff0 <__mdiff+0xe8>
 800a01e:	bf00      	nop
 800a020:	0800aed7 	.word	0x0800aed7
 800a024:	0800aee8 	.word	0x0800aee8

0800a028 <__d2b>:
 800a028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a02c:	2101      	movs	r1, #1
 800a02e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a032:	4690      	mov	r8, r2
 800a034:	461d      	mov	r5, r3
 800a036:	f7ff fcd1 	bl	80099dc <_Balloc>
 800a03a:	4604      	mov	r4, r0
 800a03c:	b930      	cbnz	r0, 800a04c <__d2b+0x24>
 800a03e:	4602      	mov	r2, r0
 800a040:	f240 310a 	movw	r1, #778	; 0x30a
 800a044:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <__d2b+0xb0>)
 800a046:	4825      	ldr	r0, [pc, #148]	; (800a0dc <__d2b+0xb4>)
 800a048:	f000 f9c2 	bl	800a3d0 <__assert_func>
 800a04c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a050:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a054:	bb2d      	cbnz	r5, 800a0a2 <__d2b+0x7a>
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	f1b8 0300 	subs.w	r3, r8, #0
 800a05c:	d026      	beq.n	800a0ac <__d2b+0x84>
 800a05e:	4668      	mov	r0, sp
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	f7ff fd87 	bl	8009b74 <__lo0bits>
 800a066:	9900      	ldr	r1, [sp, #0]
 800a068:	b1f0      	cbz	r0, 800a0a8 <__d2b+0x80>
 800a06a:	9a01      	ldr	r2, [sp, #4]
 800a06c:	f1c0 0320 	rsb	r3, r0, #32
 800a070:	fa02 f303 	lsl.w	r3, r2, r3
 800a074:	430b      	orrs	r3, r1
 800a076:	40c2      	lsrs	r2, r0
 800a078:	6163      	str	r3, [r4, #20]
 800a07a:	9201      	str	r2, [sp, #4]
 800a07c:	9b01      	ldr	r3, [sp, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	bf14      	ite	ne
 800a082:	2102      	movne	r1, #2
 800a084:	2101      	moveq	r1, #1
 800a086:	61a3      	str	r3, [r4, #24]
 800a088:	6121      	str	r1, [r4, #16]
 800a08a:	b1c5      	cbz	r5, 800a0be <__d2b+0x96>
 800a08c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a090:	4405      	add	r5, r0
 800a092:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a096:	603d      	str	r5, [r7, #0]
 800a098:	6030      	str	r0, [r6, #0]
 800a09a:	4620      	mov	r0, r4
 800a09c:	b002      	add	sp, #8
 800a09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a6:	e7d6      	b.n	800a056 <__d2b+0x2e>
 800a0a8:	6161      	str	r1, [r4, #20]
 800a0aa:	e7e7      	b.n	800a07c <__d2b+0x54>
 800a0ac:	a801      	add	r0, sp, #4
 800a0ae:	f7ff fd61 	bl	8009b74 <__lo0bits>
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	9b01      	ldr	r3, [sp, #4]
 800a0b6:	6121      	str	r1, [r4, #16]
 800a0b8:	6163      	str	r3, [r4, #20]
 800a0ba:	3020      	adds	r0, #32
 800a0bc:	e7e5      	b.n	800a08a <__d2b+0x62>
 800a0be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a0c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0c6:	6038      	str	r0, [r7, #0]
 800a0c8:	6918      	ldr	r0, [r3, #16]
 800a0ca:	f7ff fd33 	bl	8009b34 <__hi0bits>
 800a0ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a0d2:	6031      	str	r1, [r6, #0]
 800a0d4:	e7e1      	b.n	800a09a <__d2b+0x72>
 800a0d6:	bf00      	nop
 800a0d8:	0800aed7 	.word	0x0800aed7
 800a0dc:	0800aee8 	.word	0x0800aee8

0800a0e0 <_calloc_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	fb02 f501 	mul.w	r5, r2, r1
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7fd fee0 	bl	8007eac <_malloc_r>
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	b118      	cbz	r0, 800a0f8 <_calloc_r+0x18>
 800a0f0:	462a      	mov	r2, r5
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	f7fd fe85 	bl	8007e02 <memset>
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}

0800a0fc <__sfputc_r>:
 800a0fc:	6893      	ldr	r3, [r2, #8]
 800a0fe:	b410      	push	{r4}
 800a100:	3b01      	subs	r3, #1
 800a102:	2b00      	cmp	r3, #0
 800a104:	6093      	str	r3, [r2, #8]
 800a106:	da07      	bge.n	800a118 <__sfputc_r+0x1c>
 800a108:	6994      	ldr	r4, [r2, #24]
 800a10a:	42a3      	cmp	r3, r4
 800a10c:	db01      	blt.n	800a112 <__sfputc_r+0x16>
 800a10e:	290a      	cmp	r1, #10
 800a110:	d102      	bne.n	800a118 <__sfputc_r+0x1c>
 800a112:	bc10      	pop	{r4}
 800a114:	f7fe bc66 	b.w	80089e4 <__swbuf_r>
 800a118:	6813      	ldr	r3, [r2, #0]
 800a11a:	1c58      	adds	r0, r3, #1
 800a11c:	6010      	str	r0, [r2, #0]
 800a11e:	7019      	strb	r1, [r3, #0]
 800a120:	4608      	mov	r0, r1
 800a122:	bc10      	pop	{r4}
 800a124:	4770      	bx	lr

0800a126 <__sfputs_r>:
 800a126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a128:	4606      	mov	r6, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	4614      	mov	r4, r2
 800a12e:	18d5      	adds	r5, r2, r3
 800a130:	42ac      	cmp	r4, r5
 800a132:	d101      	bne.n	800a138 <__sfputs_r+0x12>
 800a134:	2000      	movs	r0, #0
 800a136:	e007      	b.n	800a148 <__sfputs_r+0x22>
 800a138:	463a      	mov	r2, r7
 800a13a:	4630      	mov	r0, r6
 800a13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a140:	f7ff ffdc 	bl	800a0fc <__sfputc_r>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d1f3      	bne.n	800a130 <__sfputs_r+0xa>
 800a148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a14c <_vfiprintf_r>:
 800a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	460d      	mov	r5, r1
 800a152:	4614      	mov	r4, r2
 800a154:	4698      	mov	r8, r3
 800a156:	4606      	mov	r6, r0
 800a158:	b09d      	sub	sp, #116	; 0x74
 800a15a:	b118      	cbz	r0, 800a164 <_vfiprintf_r+0x18>
 800a15c:	6983      	ldr	r3, [r0, #24]
 800a15e:	b90b      	cbnz	r3, 800a164 <_vfiprintf_r+0x18>
 800a160:	f7fd fd7c 	bl	8007c5c <__sinit>
 800a164:	4b89      	ldr	r3, [pc, #548]	; (800a38c <_vfiprintf_r+0x240>)
 800a166:	429d      	cmp	r5, r3
 800a168:	d11b      	bne.n	800a1a2 <_vfiprintf_r+0x56>
 800a16a:	6875      	ldr	r5, [r6, #4]
 800a16c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a16e:	07d9      	lsls	r1, r3, #31
 800a170:	d405      	bmi.n	800a17e <_vfiprintf_r+0x32>
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	059a      	lsls	r2, r3, #22
 800a176:	d402      	bmi.n	800a17e <_vfiprintf_r+0x32>
 800a178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a17a:	f7fd fe32 	bl	8007de2 <__retarget_lock_acquire_recursive>
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	071b      	lsls	r3, r3, #28
 800a182:	d501      	bpl.n	800a188 <_vfiprintf_r+0x3c>
 800a184:	692b      	ldr	r3, [r5, #16]
 800a186:	b9eb      	cbnz	r3, 800a1c4 <_vfiprintf_r+0x78>
 800a188:	4629      	mov	r1, r5
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7fe fc8e 	bl	8008aac <__swsetup_r>
 800a190:	b1c0      	cbz	r0, 800a1c4 <_vfiprintf_r+0x78>
 800a192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a194:	07dc      	lsls	r4, r3, #31
 800a196:	d50e      	bpl.n	800a1b6 <_vfiprintf_r+0x6a>
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	b01d      	add	sp, #116	; 0x74
 800a19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a2:	4b7b      	ldr	r3, [pc, #492]	; (800a390 <_vfiprintf_r+0x244>)
 800a1a4:	429d      	cmp	r5, r3
 800a1a6:	d101      	bne.n	800a1ac <_vfiprintf_r+0x60>
 800a1a8:	68b5      	ldr	r5, [r6, #8]
 800a1aa:	e7df      	b.n	800a16c <_vfiprintf_r+0x20>
 800a1ac:	4b79      	ldr	r3, [pc, #484]	; (800a394 <_vfiprintf_r+0x248>)
 800a1ae:	429d      	cmp	r5, r3
 800a1b0:	bf08      	it	eq
 800a1b2:	68f5      	ldreq	r5, [r6, #12]
 800a1b4:	e7da      	b.n	800a16c <_vfiprintf_r+0x20>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	0598      	lsls	r0, r3, #22
 800a1ba:	d4ed      	bmi.n	800a198 <_vfiprintf_r+0x4c>
 800a1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1be:	f7fd fe11 	bl	8007de4 <__retarget_lock_release_recursive>
 800a1c2:	e7e9      	b.n	800a198 <_vfiprintf_r+0x4c>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ce:	2330      	movs	r3, #48	; 0x30
 800a1d0:	f04f 0901 	mov.w	r9, #1
 800a1d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a398 <_vfiprintf_r+0x24c>
 800a1dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	469a      	mov	sl, r3
 800a1e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e8:	b10a      	cbz	r2, 800a1ee <_vfiprintf_r+0xa2>
 800a1ea:	2a25      	cmp	r2, #37	; 0x25
 800a1ec:	d1f9      	bne.n	800a1e2 <_vfiprintf_r+0x96>
 800a1ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a1f2:	d00b      	beq.n	800a20c <_vfiprintf_r+0xc0>
 800a1f4:	465b      	mov	r3, fp
 800a1f6:	4622      	mov	r2, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7ff ff93 	bl	800a126 <__sfputs_r>
 800a200:	3001      	adds	r0, #1
 800a202:	f000 80aa 	beq.w	800a35a <_vfiprintf_r+0x20e>
 800a206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a208:	445a      	add	r2, fp
 800a20a:	9209      	str	r2, [sp, #36]	; 0x24
 800a20c:	f89a 3000 	ldrb.w	r3, [sl]
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 80a2 	beq.w	800a35a <_vfiprintf_r+0x20e>
 800a216:	2300      	movs	r3, #0
 800a218:	f04f 32ff 	mov.w	r2, #4294967295
 800a21c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a220:	f10a 0a01 	add.w	sl, sl, #1
 800a224:	9304      	str	r3, [sp, #16]
 800a226:	9307      	str	r3, [sp, #28]
 800a228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a22c:	931a      	str	r3, [sp, #104]	; 0x68
 800a22e:	4654      	mov	r4, sl
 800a230:	2205      	movs	r2, #5
 800a232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a236:	4858      	ldr	r0, [pc, #352]	; (800a398 <_vfiprintf_r+0x24c>)
 800a238:	f7ff fbb6 	bl	80099a8 <memchr>
 800a23c:	9a04      	ldr	r2, [sp, #16]
 800a23e:	b9d8      	cbnz	r0, 800a278 <_vfiprintf_r+0x12c>
 800a240:	06d1      	lsls	r1, r2, #27
 800a242:	bf44      	itt	mi
 800a244:	2320      	movmi	r3, #32
 800a246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a24a:	0713      	lsls	r3, r2, #28
 800a24c:	bf44      	itt	mi
 800a24e:	232b      	movmi	r3, #43	; 0x2b
 800a250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a254:	f89a 3000 	ldrb.w	r3, [sl]
 800a258:	2b2a      	cmp	r3, #42	; 0x2a
 800a25a:	d015      	beq.n	800a288 <_vfiprintf_r+0x13c>
 800a25c:	4654      	mov	r4, sl
 800a25e:	2000      	movs	r0, #0
 800a260:	f04f 0c0a 	mov.w	ip, #10
 800a264:	9a07      	ldr	r2, [sp, #28]
 800a266:	4621      	mov	r1, r4
 800a268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a26c:	3b30      	subs	r3, #48	; 0x30
 800a26e:	2b09      	cmp	r3, #9
 800a270:	d94e      	bls.n	800a310 <_vfiprintf_r+0x1c4>
 800a272:	b1b0      	cbz	r0, 800a2a2 <_vfiprintf_r+0x156>
 800a274:	9207      	str	r2, [sp, #28]
 800a276:	e014      	b.n	800a2a2 <_vfiprintf_r+0x156>
 800a278:	eba0 0308 	sub.w	r3, r0, r8
 800a27c:	fa09 f303 	lsl.w	r3, r9, r3
 800a280:	4313      	orrs	r3, r2
 800a282:	46a2      	mov	sl, r4
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	e7d2      	b.n	800a22e <_vfiprintf_r+0xe2>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	1d19      	adds	r1, r3, #4
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	9103      	str	r1, [sp, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	bfbb      	ittet	lt
 800a294:	425b      	neglt	r3, r3
 800a296:	f042 0202 	orrlt.w	r2, r2, #2
 800a29a:	9307      	strge	r3, [sp, #28]
 800a29c:	9307      	strlt	r3, [sp, #28]
 800a29e:	bfb8      	it	lt
 800a2a0:	9204      	strlt	r2, [sp, #16]
 800a2a2:	7823      	ldrb	r3, [r4, #0]
 800a2a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2a6:	d10c      	bne.n	800a2c2 <_vfiprintf_r+0x176>
 800a2a8:	7863      	ldrb	r3, [r4, #1]
 800a2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a2ac:	d135      	bne.n	800a31a <_vfiprintf_r+0x1ce>
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	3402      	adds	r4, #2
 800a2b2:	1d1a      	adds	r2, r3, #4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	9203      	str	r2, [sp, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	bfb8      	it	lt
 800a2bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2c0:	9305      	str	r3, [sp, #20]
 800a2c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a3a8 <_vfiprintf_r+0x25c>
 800a2c6:	2203      	movs	r2, #3
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	7821      	ldrb	r1, [r4, #0]
 800a2cc:	f7ff fb6c 	bl	80099a8 <memchr>
 800a2d0:	b140      	cbz	r0, 800a2e4 <_vfiprintf_r+0x198>
 800a2d2:	2340      	movs	r3, #64	; 0x40
 800a2d4:	eba0 000a 	sub.w	r0, r0, sl
 800a2d8:	fa03 f000 	lsl.w	r0, r3, r0
 800a2dc:	9b04      	ldr	r3, [sp, #16]
 800a2de:	3401      	adds	r4, #1
 800a2e0:	4303      	orrs	r3, r0
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e8:	2206      	movs	r2, #6
 800a2ea:	482c      	ldr	r0, [pc, #176]	; (800a39c <_vfiprintf_r+0x250>)
 800a2ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2f0:	f7ff fb5a 	bl	80099a8 <memchr>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d03f      	beq.n	800a378 <_vfiprintf_r+0x22c>
 800a2f8:	4b29      	ldr	r3, [pc, #164]	; (800a3a0 <_vfiprintf_r+0x254>)
 800a2fa:	bb1b      	cbnz	r3, 800a344 <_vfiprintf_r+0x1f8>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	3307      	adds	r3, #7
 800a300:	f023 0307 	bic.w	r3, r3, #7
 800a304:	3308      	adds	r3, #8
 800a306:	9303      	str	r3, [sp, #12]
 800a308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30a:	443b      	add	r3, r7
 800a30c:	9309      	str	r3, [sp, #36]	; 0x24
 800a30e:	e767      	b.n	800a1e0 <_vfiprintf_r+0x94>
 800a310:	460c      	mov	r4, r1
 800a312:	2001      	movs	r0, #1
 800a314:	fb0c 3202 	mla	r2, ip, r2, r3
 800a318:	e7a5      	b.n	800a266 <_vfiprintf_r+0x11a>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f04f 0c0a 	mov.w	ip, #10
 800a320:	4619      	mov	r1, r3
 800a322:	3401      	adds	r4, #1
 800a324:	9305      	str	r3, [sp, #20]
 800a326:	4620      	mov	r0, r4
 800a328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a32c:	3a30      	subs	r2, #48	; 0x30
 800a32e:	2a09      	cmp	r2, #9
 800a330:	d903      	bls.n	800a33a <_vfiprintf_r+0x1ee>
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0c5      	beq.n	800a2c2 <_vfiprintf_r+0x176>
 800a336:	9105      	str	r1, [sp, #20]
 800a338:	e7c3      	b.n	800a2c2 <_vfiprintf_r+0x176>
 800a33a:	4604      	mov	r4, r0
 800a33c:	2301      	movs	r3, #1
 800a33e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a342:	e7f0      	b.n	800a326 <_vfiprintf_r+0x1da>
 800a344:	ab03      	add	r3, sp, #12
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	462a      	mov	r2, r5
 800a34a:	4630      	mov	r0, r6
 800a34c:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <_vfiprintf_r+0x258>)
 800a34e:	a904      	add	r1, sp, #16
 800a350:	f7fd fea4 	bl	800809c <_printf_float>
 800a354:	4607      	mov	r7, r0
 800a356:	1c78      	adds	r0, r7, #1
 800a358:	d1d6      	bne.n	800a308 <_vfiprintf_r+0x1bc>
 800a35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a35c:	07d9      	lsls	r1, r3, #31
 800a35e:	d405      	bmi.n	800a36c <_vfiprintf_r+0x220>
 800a360:	89ab      	ldrh	r3, [r5, #12]
 800a362:	059a      	lsls	r2, r3, #22
 800a364:	d402      	bmi.n	800a36c <_vfiprintf_r+0x220>
 800a366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a368:	f7fd fd3c 	bl	8007de4 <__retarget_lock_release_recursive>
 800a36c:	89ab      	ldrh	r3, [r5, #12]
 800a36e:	065b      	lsls	r3, r3, #25
 800a370:	f53f af12 	bmi.w	800a198 <_vfiprintf_r+0x4c>
 800a374:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a376:	e711      	b.n	800a19c <_vfiprintf_r+0x50>
 800a378:	ab03      	add	r3, sp, #12
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	462a      	mov	r2, r5
 800a37e:	4630      	mov	r0, r6
 800a380:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <_vfiprintf_r+0x258>)
 800a382:	a904      	add	r1, sp, #16
 800a384:	f7fe f926 	bl	80085d4 <_printf_i>
 800a388:	e7e4      	b.n	800a354 <_vfiprintf_r+0x208>
 800a38a:	bf00      	nop
 800a38c:	0800addc 	.word	0x0800addc
 800a390:	0800adfc 	.word	0x0800adfc
 800a394:	0800adbc 	.word	0x0800adbc
 800a398:	0800b044 	.word	0x0800b044
 800a39c:	0800b04e 	.word	0x0800b04e
 800a3a0:	0800809d 	.word	0x0800809d
 800a3a4:	0800a127 	.word	0x0800a127
 800a3a8:	0800b04a 	.word	0x0800b04a

0800a3ac <_read_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4d05      	ldr	r5, [pc, #20]	; (800a3cc <_read_r+0x20>)
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7f7 f83e 	bl	800143c <_read>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_read_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_read_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20004680 	.word	0x20004680

0800a3d0 <__assert_func>:
 800a3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <__assert_func+0x2c>)
 800a3d8:	4605      	mov	r5, r0
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68d8      	ldr	r0, [r3, #12]
 800a3de:	b14c      	cbz	r4, 800a3f4 <__assert_func+0x24>
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <__assert_func+0x30>)
 800a3e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3e6:	9100      	str	r1, [sp, #0]
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	4906      	ldr	r1, [pc, #24]	; (800a404 <__assert_func+0x34>)
 800a3ec:	f000 f80e 	bl	800a40c <fiprintf>
 800a3f0:	f000 f85f 	bl	800a4b2 <abort>
 800a3f4:	4b04      	ldr	r3, [pc, #16]	; (800a408 <__assert_func+0x38>)
 800a3f6:	461c      	mov	r4, r3
 800a3f8:	e7f3      	b.n	800a3e2 <__assert_func+0x12>
 800a3fa:	bf00      	nop
 800a3fc:	20000020 	.word	0x20000020
 800a400:	0800b055 	.word	0x0800b055
 800a404:	0800b062 	.word	0x0800b062
 800a408:	0800b090 	.word	0x0800b090

0800a40c <fiprintf>:
 800a40c:	b40e      	push	{r1, r2, r3}
 800a40e:	b503      	push	{r0, r1, lr}
 800a410:	4601      	mov	r1, r0
 800a412:	ab03      	add	r3, sp, #12
 800a414:	4805      	ldr	r0, [pc, #20]	; (800a42c <fiprintf+0x20>)
 800a416:	f853 2b04 	ldr.w	r2, [r3], #4
 800a41a:	6800      	ldr	r0, [r0, #0]
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	f7ff fe95 	bl	800a14c <_vfiprintf_r>
 800a422:	b002      	add	sp, #8
 800a424:	f85d eb04 	ldr.w	lr, [sp], #4
 800a428:	b003      	add	sp, #12
 800a42a:	4770      	bx	lr
 800a42c:	20000020 	.word	0x20000020

0800a430 <_fstat_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	2300      	movs	r3, #0
 800a434:	4d06      	ldr	r5, [pc, #24]	; (800a450 <_fstat_r+0x20>)
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	4611      	mov	r1, r2
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	f7f7 f841 	bl	80014c4 <_fstat>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d102      	bne.n	800a44c <_fstat_r+0x1c>
 800a446:	682b      	ldr	r3, [r5, #0]
 800a448:	b103      	cbz	r3, 800a44c <_fstat_r+0x1c>
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	bd38      	pop	{r3, r4, r5, pc}
 800a44e:	bf00      	nop
 800a450:	20004680 	.word	0x20004680

0800a454 <_isatty_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	2300      	movs	r3, #0
 800a458:	4d05      	ldr	r5, [pc, #20]	; (800a470 <_isatty_r+0x1c>)
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f7 f83f 	bl	80014e2 <_isatty>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_isatty_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_isatty_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20004680 	.word	0x20004680

0800a474 <__ascii_mbtowc>:
 800a474:	b082      	sub	sp, #8
 800a476:	b901      	cbnz	r1, 800a47a <__ascii_mbtowc+0x6>
 800a478:	a901      	add	r1, sp, #4
 800a47a:	b142      	cbz	r2, 800a48e <__ascii_mbtowc+0x1a>
 800a47c:	b14b      	cbz	r3, 800a492 <__ascii_mbtowc+0x1e>
 800a47e:	7813      	ldrb	r3, [r2, #0]
 800a480:	600b      	str	r3, [r1, #0]
 800a482:	7812      	ldrb	r2, [r2, #0]
 800a484:	1e10      	subs	r0, r2, #0
 800a486:	bf18      	it	ne
 800a488:	2001      	movne	r0, #1
 800a48a:	b002      	add	sp, #8
 800a48c:	4770      	bx	lr
 800a48e:	4610      	mov	r0, r2
 800a490:	e7fb      	b.n	800a48a <__ascii_mbtowc+0x16>
 800a492:	f06f 0001 	mvn.w	r0, #1
 800a496:	e7f8      	b.n	800a48a <__ascii_mbtowc+0x16>

0800a498 <__ascii_wctomb>:
 800a498:	4603      	mov	r3, r0
 800a49a:	4608      	mov	r0, r1
 800a49c:	b141      	cbz	r1, 800a4b0 <__ascii_wctomb+0x18>
 800a49e:	2aff      	cmp	r2, #255	; 0xff
 800a4a0:	d904      	bls.n	800a4ac <__ascii_wctomb+0x14>
 800a4a2:	228a      	movs	r2, #138	; 0x8a
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	4770      	bx	lr
 800a4ac:	2001      	movs	r0, #1
 800a4ae:	700a      	strb	r2, [r1, #0]
 800a4b0:	4770      	bx	lr

0800a4b2 <abort>:
 800a4b2:	2006      	movs	r0, #6
 800a4b4:	b508      	push	{r3, lr}
 800a4b6:	f000 f82b 	bl	800a510 <raise>
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	f7f6 ffb4 	bl	8001428 <_exit>

0800a4c0 <_raise_r>:
 800a4c0:	291f      	cmp	r1, #31
 800a4c2:	b538      	push	{r3, r4, r5, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	d904      	bls.n	800a4d4 <_raise_r+0x14>
 800a4ca:	2316      	movs	r3, #22
 800a4cc:	6003      	str	r3, [r0, #0]
 800a4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4d6:	b112      	cbz	r2, 800a4de <_raise_r+0x1e>
 800a4d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4dc:	b94b      	cbnz	r3, 800a4f2 <_raise_r+0x32>
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f000 f830 	bl	800a544 <_getpid_r>
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ee:	f000 b817 	b.w	800a520 <_kill_r>
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d00a      	beq.n	800a50c <_raise_r+0x4c>
 800a4f6:	1c59      	adds	r1, r3, #1
 800a4f8:	d103      	bne.n	800a502 <_raise_r+0x42>
 800a4fa:	2316      	movs	r3, #22
 800a4fc:	6003      	str	r3, [r0, #0]
 800a4fe:	2001      	movs	r0, #1
 800a500:	e7e7      	b.n	800a4d2 <_raise_r+0x12>
 800a502:	2400      	movs	r4, #0
 800a504:	4628      	mov	r0, r5
 800a506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a50a:	4798      	blx	r3
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7e0      	b.n	800a4d2 <_raise_r+0x12>

0800a510 <raise>:
 800a510:	4b02      	ldr	r3, [pc, #8]	; (800a51c <raise+0xc>)
 800a512:	4601      	mov	r1, r0
 800a514:	6818      	ldr	r0, [r3, #0]
 800a516:	f7ff bfd3 	b.w	800a4c0 <_raise_r>
 800a51a:	bf00      	nop
 800a51c:	20000020 	.word	0x20000020

0800a520 <_kill_r>:
 800a520:	b538      	push	{r3, r4, r5, lr}
 800a522:	2300      	movs	r3, #0
 800a524:	4d06      	ldr	r5, [pc, #24]	; (800a540 <_kill_r+0x20>)
 800a526:	4604      	mov	r4, r0
 800a528:	4608      	mov	r0, r1
 800a52a:	4611      	mov	r1, r2
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f7f6 ff6b 	bl	8001408 <_kill>
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d102      	bne.n	800a53c <_kill_r+0x1c>
 800a536:	682b      	ldr	r3, [r5, #0]
 800a538:	b103      	cbz	r3, 800a53c <_kill_r+0x1c>
 800a53a:	6023      	str	r3, [r4, #0]
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	bf00      	nop
 800a540:	20004680 	.word	0x20004680

0800a544 <_getpid_r>:
 800a544:	f7f6 bf59 	b.w	80013fa <_getpid>

0800a548 <_init>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	bf00      	nop
 800a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54e:	bc08      	pop	{r3}
 800a550:	469e      	mov	lr, r3
 800a552:	4770      	bx	lr

0800a554 <_fini>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	bf00      	nop
 800a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55a:	bc08      	pop	{r3}
 800a55c:	469e      	mov	lr, r3
 800a55e:	4770      	bx	lr
