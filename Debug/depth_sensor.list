
depth_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004674  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004788  08004788  00014788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080047f8  080047f8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f8  080047f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000074  08004874  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08004874  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f86  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000151f  00000000  00000000  00028023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00029548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  00029c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169fe  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e19  00000000  00000000  00040ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e68  00000000  00000000  00049abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe8  00000000  00000000  000cb97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800476c 	.word	0x0800476c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800476c 	.word	0x0800476c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <I2C_Write>:
//extern I2C_HandleTypeDef * hi2c3;
//#define i2cHandler hi2c3
I2C_HandleTypeDef * hi2c3;
/****************************READ & WRITE FUNCTIONS*****************************************/

static HAL_StatusTypeDef I2C_Write(uint8_t addr) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit(hi2c3, MS5837_ADDR<<1, &addr, 1, 100) != HAL_OK)
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <I2C_Write+0x30>)
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	1dfa      	adds	r2, r7, #7
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	21ec      	movs	r1, #236	; 0xec
 8000fdc:	f001 f974 	bl	80022c8 <HAL_I2C_Master_Transmit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <I2C_Write+0x26>
		return MS5837_ERROR;
 8000fe6:	23ff      	movs	r3, #255	; 0xff
 8000fe8:	e000      	b.n	8000fec <I2C_Write+0x28>

	return MS5837_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000090 	.word	0x20000090

08000ff8 <I2C_Read>:

static t_MS5837_Status I2C_Read(uint8_t addr,uint8_t *reg_data, uint8_t r_len){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]

	if(HAL_I2C_Master_Transmit(hi2c3, MS5837_ADDR<<1, &addr, 1, 100) != HAL_OK){
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <I2C_Read+0x60>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	1dfa      	adds	r2, r7, #7
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	21ec      	movs	r1, #236	; 0xec
 8001016:	f001 f957 	bl	80022c8 <HAL_I2C_Master_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <I2C_Read+0x2e>
		return MS5837_ERROR;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	e013      	b.n	800104e <I2C_Read+0x56>
	}

	HAL_Delay(20);
 8001026:	2014      	movs	r0, #20
 8001028:	f000 fd7e 	bl	8001b28 <HAL_Delay>

	if(HAL_I2C_Master_Receive(hi2c3, MS5837_ADDR<<1, reg_data, r_len, 100) == HAL_OK){
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <I2C_Read+0x60>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	b29b      	uxth	r3, r3
 8001034:	2264      	movs	r2, #100	; 0x64
 8001036:	9200      	str	r2, [sp, #0]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	21ec      	movs	r1, #236	; 0xec
 800103c:	f001 fa42 	bl	80024c4 <HAL_I2C_Master_Receive>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <I2C_Read+0x52>
		return MS5837_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e001      	b.n	800104e <I2C_Read+0x56>
	}

	return MS5837_ERROR;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000090 	.word	0x20000090

0800105c <crc4>:
/*******************************************************************************************/
static uint8_t crc4(uint16_t n_prom[]) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	uint16_t n_rem = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	81fb      	strh	r3, [r7, #14]

	n_prom[0] = ((n_prom[0]) & 0x0FFF);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	b29a      	uxth	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	801a      	strh	r2, [r3, #0]
	n_prom[7] = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	330e      	adds	r3, #14
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]

	for ( uint8_t i = 0 ; i < 16; i++ ) {
 800107e:	2300      	movs	r3, #0
 8001080:	737b      	strb	r3, [r7, #13]
 8001082:	e03c      	b.n	80010fe <crc4+0xa2>
		if ( i%2 == 1 ) {
 8001084:	7b7b      	ldrb	r3, [r7, #13]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00f      	beq.n	80010b0 <crc4+0x54>
			n_rem ^= (uint16_t)((n_prom[i>>1]) & 0x00FF);
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a8:	4053      	eors	r3, r2
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	81fb      	strh	r3, [r7, #14]
 80010ae:	e00b      	b.n	80010c8 <crc4+0x6c>
		} else {
			n_rem ^= (uint16_t)(n_prom[i>>1] >> 8);
 80010b0:	7b7b      	ldrb	r3, [r7, #13]
 80010b2:	085b      	lsrs	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	4053      	eors	r3, r2
 80010c6:	81fb      	strh	r3, [r7, #14]
		}
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 80010c8:	2308      	movs	r3, #8
 80010ca:	733b      	strb	r3, [r7, #12]
 80010cc:	e011      	b.n	80010f2 <crc4+0x96>
			if ( n_rem & 0x8000 ) {
 80010ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	da07      	bge.n	80010e6 <crc4+0x8a>
				n_rem = (n_rem << 1) ^ 0x3000;
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	b21b      	sxth	r3, r3
 80010dc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	81fb      	strh	r3, [r7, #14]
 80010e4:	e002      	b.n	80010ec <crc4+0x90>
			} else {
				n_rem = (n_rem << 1);
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	81fb      	strh	r3, [r7, #14]
		for ( uint8_t n_bit = 8 ; n_bit > 0 ; n_bit-- ) {
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	733b      	strb	r3, [r7, #12]
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ea      	bne.n	80010ce <crc4+0x72>
	for ( uint8_t i = 0 ; i < 16; i++ ) {
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	3301      	adds	r3, #1
 80010fc:	737b      	strb	r3, [r7, #13]
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d9bf      	bls.n	8001084 <crc4+0x28>
			}
		}
	}

	n_rem = ((n_rem >> 12) & 0x000F);
 8001104:	89fb      	ldrh	r3, [r7, #14]
 8001106:	0b1b      	lsrs	r3, r3, #12
 8001108:	81fb      	strh	r3, [r7, #14]

	return n_rem ^ 0x00;
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	b2db      	uxtb	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <MS5837_Init>:
 * Check if the values are transmitted correctly by using CRC calculation
 *
 *** After using this function, calibration data can be reached through MS5837->val.C ***
 *** This function returns communication result ***
 */
t_MS5837_Status MS5837_Init(MS5837_t *MS5837){
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	MS5837->fluidDensity = 1029;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <MS5837_Init+0x98>)
 8001124:	605a      	str	r2, [r3, #4]
	MS5837->model = MS5837_30BA;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]

	/* Write one byte reset command */
	while( MS5837_Reset() != MS5837_OK ){
 800112c:	e001      	b.n	8001132 <MS5837_Init+0x1a>
		MS5837_Reset();
 800112e:	f000 f841 	bl	80011b4 <MS5837_Reset>
	while( MS5837_Reset() != MS5837_OK ){
 8001132:	f000 f83f 	bl	80011b4 <MS5837_Reset>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f8      	bne.n	800112e <MS5837_Init+0x16>
	}

	HAL_Delay(20);
 800113c:	2014      	movs	r0, #20
 800113e:	f000 fcf3 	bl	8001b28 <HAL_Delay>
	while(1){
		/* Read calibration data from PROM */
		for(uint8_t i=0; i<7 ; i++){
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e01a      	b.n	800117e <MS5837_Init+0x66>
			uint8_t buffer[2];
			I2C_Read(MS5837_PROM_READ + (i*2), buffer, 2);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	3350      	adds	r3, #80	; 0x50
 800114c:	b2db      	uxtb	r3, r3
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f107 0108 	add.w	r1, r7, #8
 8001156:	2202      	movs	r2, #2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff4d 	bl	8000ff8 <I2C_Read>
			MS5837->val.C[i] = buffer[1] | (buffer[0] << 8);
 800115e:	7a7b      	ldrb	r3, [r7, #9]
 8001160:	b21a      	sxth	r2, r3
 8001162:	7a3b      	ldrb	r3, [r7, #8]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	b299      	uxth	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	320c      	adds	r2, #12
 8001174:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(uint8_t i=0; i<7 ; i++){
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	3301      	adds	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b06      	cmp	r3, #6
 8001182:	d9e1      	bls.n	8001148 <MS5837_Init+0x30>
		}
		uint8_t crcRead = MS5837->val.C[0] >> 12;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	8b1b      	ldrh	r3, [r3, #24]
 8001188:	0b1b      	lsrs	r3, r3, #12
 800118a:	b29b      	uxth	r3, r3
 800118c:	73bb      	strb	r3, [r7, #14]
		uint8_t crcCalculated = crc4(MS5837->val.C);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3318      	adds	r3, #24
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff62 	bl	800105c <crc4>
 8001198:	4603      	mov	r3, r0
 800119a:	737b      	strb	r3, [r7, #13]

		if ( crcCalculated == crcRead ) {
 800119c:	7b7a      	ldrb	r2, [r7, #13]
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d1ce      	bne.n	8001142 <MS5837_Init+0x2a>
			return MS5837_OK;
 80011a4:	2300      	movs	r3, #0
		}
	}



}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	4480a000 	.word	0x4480a000

080011b4 <MS5837_Reset>:

/* Power-on reset function */
t_MS5837_Status MS5837_Reset(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if(I2C_Write(MS5837_RESET) == HAL_OK){
 80011b8:	201e      	movs	r0, #30
 80011ba:	f7ff ff03 	bl	8000fc4 <I2C_Write>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <MS5837_Reset+0x1a>
		HAL_Delay(20);
 80011c4:	2014      	movs	r0, #20
 80011c6:	f000 fcaf 	bl	8001b28 <HAL_Delay>
		return MS5837_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e001      	b.n	80011d2 <MS5837_Reset+0x1e>
	}
	return MS5837_ERROR;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <MS5837_ADC>:

/* This function reads ADC results (D1 & D2 values) */
static t_MS5837_Status MS5837_ADC(MS5837_t *MS5837){
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
	/* Send command to start calculation of D1 and D2 */
	if(I2C_Write(MS5837_CONVERT_D1_8192) != HAL_OK){
 80011de:	204a      	movs	r0, #74	; 0x4a
 80011e0:	f7ff fef0 	bl	8000fc4 <I2C_Write>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <MS5837_ADC+0x1a>
		return MS5837_ERROR;
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	e03f      	b.n	8001270 <MS5837_ADC+0x9a>
	}

	HAL_Delay(20);
 80011f0:	2014      	movs	r0, #20
 80011f2:	f000 fc99 	bl	8001b28 <HAL_Delay>

	uint8_t buffer[3];
	if(I2C_Read(MS5837_ADC_READ, buffer, 3) != MS5837_OK ){
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2203      	movs	r2, #3
 80011fc:	4619      	mov	r1, r3
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff fefa 	bl	8000ff8 <I2C_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <MS5837_ADC+0x3a>
		return MS5837_ERROR;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	e02f      	b.n	8001270 <MS5837_ADC+0x9a>
	}
	MS5837->val.D1 = buffer[2] | (buffer[1] << 8) | (buffer[0] << 16);
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	461a      	mov	r2, r3
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	431a      	orrs	r2, r3
 800121a:	7b3b      	ldrb	r3, [r7, #12]
 800121c:	041b      	lsls	r3, r3, #16
 800121e:	4313      	orrs	r3, r2
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	; 0x28

	if(I2C_Write(MS5837_CONVERT_D2_8192) != HAL_OK){
 8001226:	205a      	movs	r0, #90	; 0x5a
 8001228:	f7ff fecc 	bl	8000fc4 <I2C_Write>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <MS5837_ADC+0x62>
		return MS5837_ERROR;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e01b      	b.n	8001270 <MS5837_ADC+0x9a>
	}

	HAL_Delay(20);
 8001238:	2014      	movs	r0, #20
 800123a:	f000 fc75 	bl	8001b28 <HAL_Delay>

	if(I2C_Read( MS5837_ADC_READ, buffer, 3) != MS5837_OK ){
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2203      	movs	r2, #3
 8001244:	4619      	mov	r1, r3
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fed6 	bl	8000ff8 <I2C_Read>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <MS5837_ADC+0x82>
		return MS5837_ERROR;
 8001252:	f04f 33ff 	mov.w	r3, #4294967295
 8001256:	e00b      	b.n	8001270 <MS5837_ADC+0x9a>
	}
	MS5837->val.D2 = buffer[2] | (buffer[1] << 8) | (buffer[0] << 16);
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	461a      	mov	r2, r3
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	431a      	orrs	r2, r3
 8001262:	7b3b      	ldrb	r3, [r7, #12]
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	4313      	orrs	r3, r2
 8001268:	461a      	mov	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
	return MS5837_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <MS5837_02BA_Calc>:
	MS5837->temperature = (float) MS5837->val.TEMP / 100.0f;             // result of temperature in deg C
	MS5837->pressure = (float) MS5837->val.P / 10.0f;                 // BAR30 result of pressure in mBar

}

void MS5837_02BA_Calc(MS5837_t *MS5837){
 8001278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800127c:	b09f      	sub	sp, #124	; 0x7c
 800127e:	af00      	add	r7, sp, #0
 8001280:	63f8      	str	r0, [r7, #60]	; 0x3c
	int32_t dT, OFFi, Ti,SENSi = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	66fb      	str	r3, [r7, #108]	; 0x6c
	int64_t SENS, OFF, OFF2, SENS2 = 0;
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	MS5837_ADC(MS5837);
 8001292:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001294:	f7ff ff9f 	bl	80011d6 <MS5837_ADC>

	dT = MS5837->val.D2 - ((uint32_t)MS5837->val.C[5] * 256l);
 8001298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800129e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	65fb      	str	r3, [r7, #92]	; 0x5c
	OFF = (int64_t)MS5837->val.C[2] * 131072l + ((int64_t)dT * (int64_t)MS5837->val.C[4]) / 64l;
 80012a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a8:	8b9b      	ldrh	r3, [r3, #28]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	f04f 0800 	mov.w	r8, #0
 80012b4:	f04f 0900 	mov.w	r9, #0
 80012b8:	ea4f 4943 	mov.w	r9, r3, lsl #17
 80012bc:	ea49 39d2 	orr.w	r9, r9, r2, lsr #15
 80012c0:	ea4f 4842 	mov.w	r8, r2, lsl #17
 80012c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c6:	4618      	mov	r0, r3
 80012c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80012cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ce:	8c1b      	ldrh	r3, [r3, #32]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	fb02 f501 	mul.w	r5, r2, r1
 80012da:	fb00 f403 	mul.w	r4, r0, r3
 80012de:	442c      	add	r4, r5
 80012e0:	fba0 2302 	umull	r2, r3, r0, r2
 80012e4:	18e1      	adds	r1, r4, r3
 80012e6:	460b      	mov	r3, r1
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	f173 0100 	sbcs.w	r1, r3, #0
 80012ee:	da02      	bge.n	80012f6 <MS5837_02BA_Calc+0x7e>
 80012f0:	323f      	adds	r2, #63	; 0x3f
 80012f2:	f143 0300 	adc.w	r3, r3, #0
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	f04f 0100 	mov.w	r1, #0
 80012fe:	0990      	lsrs	r0, r2, #6
 8001300:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8001304:	1199      	asrs	r1, r3, #6
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	eb18 0a02 	adds.w	sl, r8, r2
 800130e:	eb49 0b03 	adc.w	fp, r9, r3
 8001312:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
	SENS = (int64_t)MS5837->val.C[1] * 65536l + ((int64_t)dT * (int64_t)MS5837->val.C[3]) / 128l;
 8001316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001318:	8b5b      	ldrh	r3, [r3, #26]
 800131a:	b29a      	uxth	r2, r3
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	f04f 0800 	mov.w	r8, #0
 8001324:	f04f 0900 	mov.w	r9, #0
 8001328:	ea4f 4903 	mov.w	r9, r3, lsl #16
 800132c:	ea49 4912 	orr.w	r9, r9, r2, lsr #16
 8001330:	ea4f 4802 	mov.w	r8, r2, lsl #16
 8001334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001336:	4618      	mov	r0, r3
 8001338:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800133c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800133e:	8bdb      	ldrh	r3, [r3, #30]
 8001340:	b29a      	uxth	r2, r3
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	fb02 f501 	mul.w	r5, r2, r1
 800134a:	fb00 f403 	mul.w	r4, r0, r3
 800134e:	442c      	add	r4, r5
 8001350:	fba0 2302 	umull	r2, r3, r0, r2
 8001354:	18e1      	adds	r1, r4, r3
 8001356:	460b      	mov	r3, r1
 8001358:	2a00      	cmp	r2, #0
 800135a:	f173 0100 	sbcs.w	r1, r3, #0
 800135e:	da02      	bge.n	8001366 <MS5837_02BA_Calc+0xee>
 8001360:	327f      	adds	r2, #127	; 0x7f
 8001362:	f143 0300 	adc.w	r3, r3, #0
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	f04f 0100 	mov.w	r1, #0
 800136e:	09d0      	lsrs	r0, r2, #7
 8001370:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001374:	11d9      	asrs	r1, r3, #7
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	eb18 0102 	adds.w	r1, r8, r2
 800137e:	61b9      	str	r1, [r7, #24]
 8001380:	eb49 0303 	adc.w	r3, r9, r3
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800138a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48

	MS5837->val.TEMP = 2000l + ((int64_t)dT * MS5837->val.C[6]) / 8388608l;
 800138e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001390:	4618      	mov	r0, r3
 8001392:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001398:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800139a:	b29a      	uxth	r2, r3
 800139c:	f04f 0300 	mov.w	r3, #0
 80013a0:	fb02 f501 	mul.w	r5, r2, r1
 80013a4:	fb00 f403 	mul.w	r4, r0, r3
 80013a8:	442c      	add	r4, r5
 80013aa:	fba0 2302 	umull	r2, r3, r0, r2
 80013ae:	18e1      	adds	r1, r4, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	2800      	cmp	r0, #0
 80013b8:	f171 0300 	sbcs.w	r3, r1, #0
 80013bc:	da05      	bge.n	80013ca <MS5837_02BA_Calc+0x152>
 80013be:	4aa5      	ldr	r2, [pc, #660]	; (8001654 <MS5837_02BA_Calc+0x3dc>)
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	1880      	adds	r0, r0, r2
 80013c6:	eb43 0101 	adc.w	r1, r3, r1
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	0dc2      	lsrs	r2, r0, #23
 80013d4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80013d8:	15cb      	asrs	r3, r1, #23
 80013da:	4613      	mov	r3, r2
 80013dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013e0:	461a      	mov	r2, r3
 80013e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e4:	611a      	str	r2, [r3, #16]
	MS5837->val.P = (((int64_t)MS5837->val.D1 * SENS) / 2097152l - OFF) / 32768l;
 80013e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	461a      	mov	r2, r3
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013f2:	fb03 f001 	mul.w	r0, r3, r1
 80013f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80013f8:	fb02 f101 	mul.w	r1, r2, r1
 80013fc:	4408      	add	r0, r1
 80013fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001400:	fba1 2302 	umull	r2, r3, r1, r2
 8001404:	18c1      	adds	r1, r0, r3
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	2800      	cmp	r0, #0
 800140e:	f171 0300 	sbcs.w	r3, r1, #0
 8001412:	da05      	bge.n	8001420 <MS5837_02BA_Calc+0x1a8>
 8001414:	4a90      	ldr	r2, [pc, #576]	; (8001658 <MS5837_02BA_Calc+0x3e0>)
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	1880      	adds	r0, r0, r2
 800141c:	eb43 0101 	adc.w	r1, r3, r1
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	0d42      	lsrs	r2, r0, #21
 800142a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 800142e:	154b      	asrs	r3, r1, #21
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001438:	1a84      	subs	r4, r0, r2
 800143a:	633c      	str	r4, [r7, #48]	; 0x30
 800143c:	eb61 0303 	sbc.w	r3, r1, r3
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
 8001442:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001446:	2a00      	cmp	r2, #0
 8001448:	f173 0100 	sbcs.w	r1, r3, #0
 800144c:	da06      	bge.n	800145c <MS5837_02BA_Calc+0x1e4>
 800144e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	1812      	adds	r2, r2, r0
 8001458:	eb41 0303 	adc.w	r3, r1, r3
 800145c:	f04f 0000 	mov.w	r0, #0
 8001460:	f04f 0100 	mov.w	r1, #0
 8001464:	0bd0      	lsrs	r0, r2, #15
 8001466:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800146a:	13d9      	asrs	r1, r3, #15
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001472:	615a      	str	r2, [r3, #20]

	if((MS5837->val.TEMP/100)<20){
 8001474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800147c:	da62      	bge.n	8001544 <MS5837_02BA_Calc+0x2cc>
		Ti = (11*(int64_t)dT*(int64_t)dT)/(34359738368LL);
 800147e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001480:	461a      	mov	r2, r3
 8001482:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001486:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001488:	4608      	mov	r0, r1
 800148a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800148e:	fb00 f503 	mul.w	r5, r0, r3
 8001492:	fb02 f401 	mul.w	r4, r2, r1
 8001496:	192e      	adds	r6, r5, r4
 8001498:	fba2 4500 	umull	r4, r5, r2, r0
 800149c:	1973      	adds	r3, r6, r5
 800149e:	461d      	mov	r5, r3
 80014a0:	4622      	mov	r2, r4
 80014a2:	462b      	mov	r3, r5
 80014a4:	1891      	adds	r1, r2, r2
 80014a6:	6139      	str	r1, [r7, #16]
 80014a8:	415b      	adcs	r3, r3
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014b0:	1912      	adds	r2, r2, r4
 80014b2:	eb45 0303 	adc.w	r3, r5, r3
 80014b6:	f04f 0000 	mov.w	r0, #0
 80014ba:	f04f 0100 	mov.w	r1, #0
 80014be:	0099      	lsls	r1, r3, #2
 80014c0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80014c4:	0090      	lsls	r0, r2, #2
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	1b11      	subs	r1, r2, r4
 80014cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80014ce:	eb63 0305 	sbc.w	r3, r3, r5
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014d8:	2a00      	cmp	r2, #0
 80014da:	f173 0100 	sbcs.w	r1, r3, #0
 80014de:	da03      	bge.n	80014e8 <MS5837_02BA_Calc+0x270>
 80014e0:	f112 32ff 	adds.w	r2, r2, #4294967295
 80014e4:	f143 0307 	adc.w	r3, r3, #7
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	10d8      	asrs	r0, r3, #3
 80014f2:	17d9      	asrs	r1, r3, #31
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4613      	mov	r3, r2
 80014fa:	673b      	str	r3, [r7, #112]	; 0x70
		OFFi = (31*(MS5837->val.TEMP-2000l)*(MS5837->val.TEMP-2000l))/8;
 80014fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001504:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001506:	6912      	ldr	r2, [r2, #16]
 8001508:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 800150c:	fb02 f203 	mul.w	r2, r2, r3
 8001510:	4613      	mov	r3, r2
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	da00      	bge.n	800151c <MS5837_02BA_Calc+0x2a4>
 800151a:	3307      	adds	r3, #7
 800151c:	10db      	asrs	r3, r3, #3
 800151e:	677b      	str	r3, [r7, #116]	; 0x74
		SENSi = (63*(MS5837->val.TEMP-2000l)*(MS5837->val.TEMP-2000l))/32;
 8001520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8001528:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800152a:	6912      	ldr	r2, [r2, #16]
 800152c:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8001530:	fb02 f203 	mul.w	r2, r2, r3
 8001534:	4613      	mov	r3, r2
 8001536:	019b      	lsls	r3, r3, #6
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	da00      	bge.n	8001540 <MS5837_02BA_Calc+0x2c8>
 800153e:	331f      	adds	r3, #31
 8001540:	115b      	asrs	r3, r3, #5
 8001542:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	OFF2 = OFF-OFFi;
 8001544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001546:	461a      	mov	r2, r3
 8001548:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800154c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001550:	1a84      	subs	r4, r0, r2
 8001552:	60bc      	str	r4, [r7, #8]
 8001554:	eb61 0303 	sbc.w	r3, r1, r3
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800155e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	SENS2 = SENS-SENSi;
 8001562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001564:	461a      	mov	r2, r3
 8001566:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800156a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800156e:	1a84      	subs	r4, r0, r2
 8001570:	603c      	str	r4, [r7, #0]
 8001572:	eb61 0303 	sbc.w	r3, r1, r3
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	e9d7 3400 	ldrd	r3, r4, [r7]
 800157c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	MS5837->val.TEMP = (MS5837->val.TEMP - Ti);
 8001580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001586:	1ad2      	subs	r2, r2, r3
 8001588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158a:	611a      	str	r2, [r3, #16]
	MS5837->val.P =(((MS5837->val.D1*SENS2)/2097152l-OFF2)/32768l);
 800158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	461a      	mov	r2, r3
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001598:	fb03 f001 	mul.w	r0, r3, r1
 800159c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800159e:	fb02 f101 	mul.w	r1, r2, r1
 80015a2:	4401      	add	r1, r0
 80015a4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015a6:	fba0 2302 	umull	r2, r3, r0, r2
 80015aa:	4419      	add	r1, r3
 80015ac:	460b      	mov	r3, r1
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	f173 0100 	sbcs.w	r1, r3, #0
 80015b4:	da05      	bge.n	80015c2 <MS5837_02BA_Calc+0x34a>
 80015b6:	4828      	ldr	r0, [pc, #160]	; (8001658 <MS5837_02BA_Calc+0x3e0>)
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	1812      	adds	r2, r2, r0
 80015be:	eb41 0303 	adc.w	r3, r1, r3
 80015c2:	f04f 0000 	mov.w	r0, #0
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	0d50      	lsrs	r0, r2, #21
 80015cc:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80015d0:	1559      	asrs	r1, r3, #21
 80015d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015d6:	1a84      	subs	r4, r0, r2
 80015d8:	623c      	str	r4, [r7, #32]
 80015da:	eb61 0303 	sbc.w	r3, r1, r3
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	f173 0100 	sbcs.w	r1, r3, #0
 80015ea:	da06      	bge.n	80015fa <MS5837_02BA_Calc+0x382>
 80015ec:	f647 70ff 	movw	r0, #32767	; 0x7fff
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	1812      	adds	r2, r2, r0
 80015f6:	eb41 0303 	adc.w	r3, r1, r3
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	0bd0      	lsrs	r0, r2, #15
 8001604:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8001608:	13d9      	asrs	r1, r3, #15
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001610:	615a      	str	r2, [r3, #20]

	MS5837->temperature = (float) MS5837->val.TEMP / 100.0f;           // result of temperature in deg C
 8001612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb10 	bl	8000c3c <__aeabi_i2f>
 800161c:	4603      	mov	r3, r0
 800161e:	490f      	ldr	r1, [pc, #60]	; (800165c <MS5837_02BA_Calc+0x3e4>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fc13 	bl	8000e4c <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800162c:	609a      	str	r2, [r3, #8]
	MS5837->pressure = (float) MS5837->val.P / 100.0f;                 // BAR02 result of pressure in mBar
 800162e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb02 	bl	8000c3c <__aeabi_i2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4908      	ldr	r1, [pc, #32]	; (800165c <MS5837_02BA_Calc+0x3e4>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fc05 	bl	8000e4c <__aeabi_fdiv>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001648:	60da      	str	r2, [r3, #12]

}
 800164a:	bf00      	nop
 800164c:	377c      	adds	r7, #124	; 0x7c
 800164e:	46bd      	mov	sp, r7
 8001650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001654:	007fffff 	.word	0x007fffff
 8001658:	001fffff 	.word	0x001fffff
 800165c:	42c80000 	.word	0x42c80000

08001660 <MS5837_Depth>:

float MS5837_Depth(MS5837_t *MS5837) {
 8001660:	b5b0      	push	{r4, r5, r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	//return (P_MS5837/100)*1.019716;
	return ((MS5837->pressure*100)-101300)/(MS5837->fluidDensity*9.80665);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4916      	ldr	r1, [pc, #88]	; (80016c8 <MS5837_Depth+0x68>)
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fb38 	bl	8000ce4 <__aeabi_fmul>
 8001674:	4603      	mov	r3, r0
 8001676:	4915      	ldr	r1, [pc, #84]	; (80016cc <MS5837_Depth+0x6c>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa29 	bl	8000ad0 <__aeabi_fsub>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fec9 	bl	8000418 <__aeabi_f2d>
 8001686:	4604      	mov	r4, r0
 8001688:	460d      	mov	r5, r1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fec2 	bl	8000418 <__aeabi_f2d>
 8001694:	a30a      	add	r3, pc, #40	; (adr r3, 80016c0 <MS5837_Depth+0x60>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ff15 	bl	80004c8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7ff f839 	bl	800071c <__aeabi_ddiv>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f9b9 	bl	8000a28 <__aeabi_d2f>
 80016b6:	4603      	mov	r3, r0

}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}
 80016c0:	3a92a305 	.word	0x3a92a305
 80016c4:	40239d01 	.word	0x40239d01
 80016c8:	42c80000 	.word	0x42c80000
 80016cc:	47c5da00 	.word	0x47c5da00

080016d0 <MS5837_Altitude>:

float MS5837_Altitude(MS5837_t *MS5837) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	//return (P_MS5837/100)*1.019716;
	return (1-pow((MS5837->pressure/1013.25),0.190284))*145366.45*0.3048;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fe9b 	bl	8000418 <__aeabi_f2d>
 80016e2:	a319      	add	r3, pc, #100	; (adr r3, 8001748 <MS5837_Altitude+0x78>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7ff f818 	bl	800071c <__aeabi_ddiv>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	a316      	add	r3, pc, #88	; (adr r3, 8001750 <MS5837_Altitude+0x80>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f002 f8a7 	bl	800384c <pow>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	f04f 0000 	mov.w	r0, #0
 8001706:	4918      	ldr	r1, [pc, #96]	; (8001768 <MS5837_Altitude+0x98>)
 8001708:	f7fe fd26 	bl	8000158 <__aeabi_dsub>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a310      	add	r3, pc, #64	; (adr r3, 8001758 <MS5837_Altitude+0x88>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe fed5 	bl	80004c8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	a30e      	add	r3, pc, #56	; (adr r3, 8001760 <MS5837_Altitude+0x90>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fecc 	bl	80004c8 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff f976 	bl	8000a28 <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0

}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	00000000 	.word	0x00000000
 800174c:	408faa00 	.word	0x408faa00
 8001750:	e279dd3c 	.word	0xe279dd3c
 8001754:	3fc85b39 	.word	0x3fc85b39
 8001758:	9999999a 	.word	0x9999999a
 800175c:	4101beb3 	.word	0x4101beb3
 8001760:	dbf487fd 	.word	0xdbf487fd
 8001764:	3fd381d7 	.word	0x3fd381d7
 8001768:	3ff00000 	.word	0x3ff00000

0800176c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800176c:	b598      	push	{r3, r4, r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001770:	f000 f978 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001774:	f000 f82c 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001778:	f000 f894 	bl	80018a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800177c:	f000 f864 	bl	8001848 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MS5837_Init(MS5837);
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <main+0x60>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcc7 	bl	8001118 <MS5837_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MS5837_02BA_Calc(MS5837);	//calculate temperature and pressure
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <main+0x60>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd72 	bl	8001278 <MS5837_02BA_Calc>
	  MS5837->val.D1 = MS5837_Depth(MS5837);
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <main+0x60>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff61 	bl	8001660 <MS5837_Depth>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <main+0x60>)
 80017a2:	6814      	ldr	r4, [r2, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fbed 	bl	8000f84 <__aeabi_f2uiz>
 80017aa:	4603      	mov	r3, r0
 80017ac:	62a3      	str	r3, [r4, #40]	; 0x28
	  MS5837->val.D2 = MS5837_Altitude(MS5837);
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <main+0x60>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff8c 	bl	80016d0 <MS5837_Altitude>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <main+0x60>)
 80017bc:	6814      	ldr	r4, [r2, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fbe0 	bl	8000f84 <__aeabi_f2uiz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	  MS5837_02BA_Calc(MS5837);	//calculate temperature and pressure
 80017c8:	e7df      	b.n	800178a <main+0x1e>
 80017ca:	bf00      	nop
 80017cc:	200000e8 	.word	0x200000e8

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b090      	sub	sp, #64	; 0x40
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	2228      	movs	r2, #40	; 0x28
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f002 f82c 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f6:	2301      	movs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fa:	2310      	movs	r3, #16
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fbe8 	bl	8002fdc <HAL_RCC_OscConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001812:	f000 f85d 	bl	80018d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
 8001818:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fe54 	bl	80034dc <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800183a:	f000 f849 	bl	80018d0 <Error_Handler>
  }
}
 800183e:	bf00      	nop
 8001840:	3740      	adds	r7, #64	; 0x40
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_I2C1_Init+0x50>)
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <MX_I2C1_Init+0x54>)
 8001850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_I2C1_Init+0x50>)
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_I2C1_Init+0x58>)
 8001856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_I2C1_Init+0x50>)
 8001866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <MX_I2C1_Init+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_I2C1_Init+0x50>)
 8001880:	2200      	movs	r2, #0
 8001882:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_I2C1_Init+0x50>)
 8001886:	f000 fbdb 	bl	8002040 <HAL_I2C_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001890:	f000 f81e 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000094 	.word	0x20000094
 800189c:	40005400 	.word	0x40005400
 80018a0:	000186a0 	.word	0x000186a0

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_GPIO_Init+0x28>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <MX_GPIO_Init+0x28>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <MX_GPIO_Init+0x28>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <Error_Handler+0x8>
	...

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_MspInit+0x5c>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a14      	ldr	r2, [pc, #80]	; (8001938 <HAL_MspInit+0x5c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_MspInit+0x5c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x5c>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_MspInit+0x5c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x5c>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_MspInit+0x60>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_MspInit+0x60>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000

08001940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_I2C_MspInit+0x70>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d123      	bne.n	80019a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_I2C_MspInit+0x74>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_I2C_MspInit+0x74>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_I2C_MspInit+0x74>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001978:	23c0      	movs	r3, #192	; 0xc0
 800197a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2312      	movs	r3, #18
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	480b      	ldr	r0, [pc, #44]	; (80019b8 <HAL_I2C_MspInit+0x78>)
 800198c:	f000 f9d4 	bl	8001d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_I2C_MspInit+0x74>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_I2C_MspInit+0x74>)
 8001996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199a:	61d3      	str	r3, [r2, #28]
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_I2C_MspInit+0x74>)
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010c00 	.word	0x40010c00

080019bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <NMI_Handler+0x4>

080019c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <MemManage_Handler+0x4>

080019ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <UsageFault_Handler+0x4>

080019da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f875 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
	...

08001a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	; (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	; (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	; (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a3e:	f7ff ffe4 	bl	8001a0a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a42:	f001 fed7 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a46:	f7ff fe91 	bl	800176c <main>
  bx lr
 8001a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a54:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 8001a58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a5c:	200000f0 	.word	0x200000f0

08001a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC1_2_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_Init+0x28>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_Init+0x28>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 f92b 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7a:	200f      	movs	r0, #15
 8001a7c:	f000 f808 	bl	8001a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a80:	f7ff ff2c 	bl	80018dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x54>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x58>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f935 	bl	8001d1e <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f000 f90b 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x5c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x1c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x20>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <HAL_IncTick+0x20>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	200000ec 	.word	0x200000ec

08001b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_GetTick+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	200000ec 	.word	0x200000ec

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffe0 	bl	8001b14 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f7ff ff90 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff49 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff5e 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff90 	bl	8001c28 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5f 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ffb0 	bl	8001c8c <SysTick_Config>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b08b      	sub	sp, #44	; 0x2c
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	e169      	b.n	8002020 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8158 	bne.w	800201a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4a9a      	ldr	r2, [pc, #616]	; (8001fd8 <HAL_GPIO_Init+0x2a0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d05e      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d74:	4a98      	ldr	r2, [pc, #608]	; (8001fd8 <HAL_GPIO_Init+0x2a0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d875      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a98      	ldr	r2, [pc, #608]	; (8001fdc <HAL_GPIO_Init+0x2a4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d058      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d80:	4a96      	ldr	r2, [pc, #600]	; (8001fdc <HAL_GPIO_Init+0x2a4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d86f      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d86:	4a96      	ldr	r2, [pc, #600]	; (8001fe0 <HAL_GPIO_Init+0x2a8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d052      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d8c:	4a94      	ldr	r2, [pc, #592]	; (8001fe0 <HAL_GPIO_Init+0x2a8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d869      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d92:	4a94      	ldr	r2, [pc, #592]	; (8001fe4 <HAL_GPIO_Init+0x2ac>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d04c      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001d98:	4a92      	ldr	r2, [pc, #584]	; (8001fe4 <HAL_GPIO_Init+0x2ac>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d863      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a92      	ldr	r2, [pc, #584]	; (8001fe8 <HAL_GPIO_Init+0x2b0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d046      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
 8001da4:	4a90      	ldr	r2, [pc, #576]	; (8001fe8 <HAL_GPIO_Init+0x2b0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d85d      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d82a      	bhi.n	8001e04 <HAL_GPIO_Init+0xcc>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d859      	bhi.n	8001e66 <HAL_GPIO_Init+0x12e>
 8001db2:	a201      	add	r2, pc, #4	; (adr r2, 8001db8 <HAL_GPIO_Init+0x80>)
 8001db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db8:	08001e33 	.word	0x08001e33
 8001dbc:	08001e0d 	.word	0x08001e0d
 8001dc0:	08001e1f 	.word	0x08001e1f
 8001dc4:	08001e61 	.word	0x08001e61
 8001dc8:	08001e67 	.word	0x08001e67
 8001dcc:	08001e67 	.word	0x08001e67
 8001dd0:	08001e67 	.word	0x08001e67
 8001dd4:	08001e67 	.word	0x08001e67
 8001dd8:	08001e67 	.word	0x08001e67
 8001ddc:	08001e67 	.word	0x08001e67
 8001de0:	08001e67 	.word	0x08001e67
 8001de4:	08001e67 	.word	0x08001e67
 8001de8:	08001e67 	.word	0x08001e67
 8001dec:	08001e67 	.word	0x08001e67
 8001df0:	08001e67 	.word	0x08001e67
 8001df4:	08001e67 	.word	0x08001e67
 8001df8:	08001e67 	.word	0x08001e67
 8001dfc:	08001e15 	.word	0x08001e15
 8001e00:	08001e29 	.word	0x08001e29
 8001e04:	4a79      	ldr	r2, [pc, #484]	; (8001fec <HAL_GPIO_Init+0x2b4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e0a:	e02c      	b.n	8001e66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e029      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e024      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	3308      	adds	r3, #8
 8001e24:	623b      	str	r3, [r7, #32]
          break;
 8001e26:	e01f      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	330c      	adds	r3, #12
 8001e2e:	623b      	str	r3, [r7, #32]
          break;
 8001e30:	e01a      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	623b      	str	r3, [r7, #32]
          break;
 8001e3e:	e013      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	611a      	str	r2, [r3, #16]
          break;
 8001e52:	e009      	b.n	8001e68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	615a      	str	r2, [r3, #20]
          break;
 8001e5e:	e003      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e000      	b.n	8001e68 <HAL_GPIO_Init+0x130>
          break;
 8001e66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2bff      	cmp	r3, #255	; 0xff
 8001e6c:	d801      	bhi.n	8001e72 <HAL_GPIO_Init+0x13a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	e001      	b.n	8001e76 <HAL_GPIO_Init+0x13e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2bff      	cmp	r3, #255	; 0xff
 8001e7c:	d802      	bhi.n	8001e84 <HAL_GPIO_Init+0x14c>
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x152>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	3b08      	subs	r3, #8
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	210f      	movs	r1, #15
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80b1 	beq.w	800201a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed0:	4a48      	ldr	r2, [pc, #288]	; (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <HAL_GPIO_Init+0x2c0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d013      	beq.n	8001f24 <HAL_GPIO_Init+0x1ec>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3f      	ldr	r2, [pc, #252]	; (8001ffc <HAL_GPIO_Init+0x2c4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1e8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3e      	ldr	r2, [pc, #248]	; (8002000 <HAL_GPIO_Init+0x2c8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1e4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3d      	ldr	r2, [pc, #244]	; (8002004 <HAL_GPIO_Init+0x2cc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1e0>
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e004      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_GPIO_Init+0x1ee>
 8001f24:	2300      	movs	r3, #0
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	f002 0203 	and.w	r2, r2, #3
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	4093      	lsls	r3, r2
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f36:	492f      	ldr	r1, [pc, #188]	; (8001ff4 <HAL_GPIO_Init+0x2bc>)
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	3302      	adds	r3, #2
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	492c      	ldr	r1, [pc, #176]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4928      	ldr	r1, [pc, #160]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f78:	4b23      	ldr	r3, [pc, #140]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4922      	ldr	r1, [pc, #136]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	491e      	ldr	r1, [pc, #120]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4918      	ldr	r1, [pc, #96]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4914      	ldr	r1, [pc, #80]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d021      	beq.n	800200c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60cb      	str	r3, [r1, #12]
 8001fd4:	e021      	b.n	800201a <HAL_GPIO_Init+0x2e2>
 8001fd6:	bf00      	nop
 8001fd8:	10320000 	.word	0x10320000
 8001fdc:	10310000 	.word	0x10310000
 8001fe0:	10220000 	.word	0x10220000
 8001fe4:	10210000 	.word	0x10210000
 8001fe8:	10120000 	.word	0x10120000
 8001fec:	10110000 	.word	0x10110000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_GPIO_Init+0x304>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	43db      	mvns	r3, r3
 8002014:	4909      	ldr	r1, [pc, #36]	; (800203c <HAL_GPIO_Init+0x304>)
 8002016:	4013      	ands	r3, r2
 8002018:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	3301      	adds	r3, #1
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f47f ae8e 	bne.w	8001d4c <HAL_GPIO_Init+0x14>
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	372c      	adds	r7, #44	; 0x2c
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e12b      	b.n	80022aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fc6a 	bl	8001940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020a4:	f001 fb6e 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 80020a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a81      	ldr	r2, [pc, #516]	; (80022b4 <HAL_I2C_Init+0x274>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d807      	bhi.n	80020c4 <HAL_I2C_Init+0x84>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a80      	ldr	r2, [pc, #512]	; (80022b8 <HAL_I2C_Init+0x278>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	bf94      	ite	ls
 80020bc:	2301      	movls	r3, #1
 80020be:	2300      	movhi	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e006      	b.n	80020d2 <HAL_I2C_Init+0x92>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4a7d      	ldr	r2, [pc, #500]	; (80022bc <HAL_I2C_Init+0x27c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	bf94      	ite	ls
 80020cc:	2301      	movls	r3, #1
 80020ce:	2300      	movhi	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0e7      	b.n	80022aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4a78      	ldr	r2, [pc, #480]	; (80022c0 <HAL_I2C_Init+0x280>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9b      	lsrs	r3, r3, #18
 80020e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68ba      	ldr	r2, [r7, #8]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a6a      	ldr	r2, [pc, #424]	; (80022b4 <HAL_I2C_Init+0x274>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d802      	bhi.n	8002114 <HAL_I2C_Init+0xd4>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3301      	adds	r3, #1
 8002112:	e009      	b.n	8002128 <HAL_I2C_Init+0xe8>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	4a69      	ldr	r2, [pc, #420]	; (80022c4 <HAL_I2C_Init+0x284>)
 8002120:	fba2 2303 	umull	r2, r3, r2, r3
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	3301      	adds	r3, #1
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	430b      	orrs	r3, r1
 800212e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800213a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	495c      	ldr	r1, [pc, #368]	; (80022b4 <HAL_I2C_Init+0x274>)
 8002144:	428b      	cmp	r3, r1
 8002146:	d819      	bhi.n	800217c <HAL_I2C_Init+0x13c>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e59      	subs	r1, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fbb1 f3f3 	udiv	r3, r1, r3
 8002156:	1c59      	adds	r1, r3, #1
 8002158:	f640 73fc 	movw	r3, #4092	; 0xffc
 800215c:	400b      	ands	r3, r1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_I2C_Init+0x138>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e59      	subs	r1, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002176:	e051      	b.n	800221c <HAL_I2C_Init+0x1dc>
 8002178:	2304      	movs	r3, #4
 800217a:	e04f      	b.n	800221c <HAL_I2C_Init+0x1dc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d111      	bne.n	80021a8 <HAL_I2C_Init+0x168>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e58      	subs	r0, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	fbb0 f3f3 	udiv	r3, r0, r3
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf0c      	ite	eq
 80021a0:	2301      	moveq	r3, #1
 80021a2:	2300      	movne	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	e012      	b.n	80021ce <HAL_I2C_Init+0x18e>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e58      	subs	r0, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	0099      	lsls	r1, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Init+0x196>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e022      	b.n	800221c <HAL_I2C_Init+0x1dc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10e      	bne.n	80021fc <HAL_I2C_Init+0x1bc>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e58      	subs	r0, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6859      	ldr	r1, [r3, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	440b      	add	r3, r1
 80021ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fa:	e00f      	b.n	800221c <HAL_I2C_Init+0x1dc>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1e58      	subs	r0, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	0099      	lsls	r1, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	6809      	ldr	r1, [r1, #0]
 8002220:	4313      	orrs	r3, r2
 8002222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800224a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6911      	ldr	r1, [r2, #16]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68d2      	ldr	r2, [r2, #12]
 8002256:	4311      	orrs	r1, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	430b      	orrs	r3, r1
 800225e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	000186a0 	.word	0x000186a0
 80022b8:	001e847f 	.word	0x001e847f
 80022bc:	003d08ff 	.word	0x003d08ff
 80022c0:	431bde83 	.word	0x431bde83
 80022c4:	10624dd3 	.word	0x10624dd3

080022c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
 80022d8:	4613      	mov	r3, r2
 80022da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff fc1a 	bl	8001b14 <HAL_GetTick>
 80022e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	f040 80e0 	bne.w	80024b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2319      	movs	r3, #25
 80022f6:	2201      	movs	r2, #1
 80022f8:	4970      	ldr	r1, [pc, #448]	; (80024bc <HAL_I2C_Master_Transmit+0x1f4>)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fc92 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
 8002308:	e0d3      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x50>
 8002314:	2302      	movs	r3, #2
 8002316:	e0cc      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d007      	beq.n	800233e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2221      	movs	r2, #33	; 0x21
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2210      	movs	r2, #16
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	893a      	ldrh	r2, [r7, #8]
 800236e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a50      	ldr	r2, [pc, #320]	; (80024c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800237e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	6a3a      	ldr	r2, [r7, #32]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fafc 	bl	8002984 <I2C_MasterRequestWrite>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e08d      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023ac:	e066      	b.n	800247c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fd0c 	bl	8002dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d107      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11b      	bne.n	8002450 <HAL_I2C_Master_Transmit+0x188>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d017      	beq.n	8002450 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	6a39      	ldr	r1, [r7, #32]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fcfc 	bl	8002e52 <I2C_WaitOnBTFFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b04      	cmp	r3, #4
 8002466:	d107      	bne.n	8002478 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e01a      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d194      	bne.n	80023ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e000      	b.n	80024b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024b0:	2302      	movs	r3, #2
  }
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	00100002 	.word	0x00100002
 80024c0:	ffff0000 	.word	0xffff0000

080024c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	; 0x30
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
 80024d4:	4613      	mov	r3, r2
 80024d6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff fb1a 	bl	8001b14 <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	f040 823f 	bne.w	800296e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2319      	movs	r3, #25
 80024f6:	2201      	movs	r2, #1
 80024f8:	497f      	ldr	r1, [pc, #508]	; (80026f8 <HAL_I2C_Master_Receive+0x234>)
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fb92 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	e232      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_I2C_Master_Receive+0x54>
 8002514:	2302      	movs	r3, #2
 8002516:	e22b      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d007      	beq.n	800253e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2222      	movs	r2, #34	; 0x22
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2210      	movs	r2, #16
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a5f      	ldr	r2, [pc, #380]	; (80026fc <HAL_I2C_Master_Receive+0x238>)
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fa7e 	bl	8002a88 <I2C_MasterRequestRead>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1ec      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	d113      	bne.n	80025c6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	61fb      	str	r3, [r7, #28]
 80025b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e1c0      	b.n	8002948 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d11e      	bne.n	800260c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025de:	b672      	cpsid	i
}
 80025e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002608:	b662      	cpsie	i
}
 800260a:	e035      	b.n	8002678 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	2b02      	cmp	r3, #2
 8002612:	d11e      	bne.n	8002652 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002624:	b672      	cpsid	i
}
 8002626:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800264e:	b662      	cpsie	i
}
 8002650:	e012      	b.n	8002678 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002678:	e166      	b.n	8002948 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	2b03      	cmp	r3, #3
 8002680:	f200 811f 	bhi.w	80028c2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002688:	2b01      	cmp	r3, #1
 800268a:	d123      	bne.n	80026d4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fc1f 	bl	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e167      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d2:	e139      	b.n	8002948 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d152      	bne.n	8002782 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	2200      	movs	r2, #0
 80026e4:	4906      	ldr	r1, [pc, #24]	; (8002700 <HAL_I2C_Master_Receive+0x23c>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fa9c 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e13c      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
 80026f6:	bf00      	nop
 80026f8:	00100002 	.word	0x00100002
 80026fc:	ffff0000 	.word	0xffff0000
 8002700:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800274a:	b662      	cpsie	i
}
 800274c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002780:	e0e2      	b.n	8002948 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	2200      	movs	r2, #0
 800278a:	497b      	ldr	r1, [pc, #492]	; (8002978 <HAL_I2C_Master_Receive+0x4b4>)
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 fa49 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0e9      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027e2:	4b66      	ldr	r3, [pc, #408]	; (800297c <HAL_I2C_Master_Receive+0x4b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	4a65      	ldr	r2, [pc, #404]	; (8002980 <HAL_I2C_Master_Receive+0x4bc>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a1a      	lsrs	r2, r3, #8
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00da      	lsls	r2, r3, #3
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	3b01      	subs	r3, #1
 8002800:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d118      	bne.n	800283a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2220      	movs	r2, #32
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f043 0220 	orr.w	r2, r3, #32
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800282a:	b662      	cpsie	i
}
 800282c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e09a      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b04      	cmp	r3, #4
 8002846:	d1d9      	bne.n	80027fc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800288a:	b662      	cpsie	i
}
 800288c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028c0:	e042      	b.n	8002948 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fb04 	bl	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e04c      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d118      	bne.n	8002948 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691a      	ldr	r2, [r3, #16]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f ae94 	bne.w	800267a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	00010004 	.word	0x00010004
 800297c:	20000000 	.word	0x20000000
 8002980:	14f8b589 	.word	0x14f8b589

08002984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af02      	add	r7, sp, #8
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	460b      	mov	r3, r1
 8002992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d006      	beq.n	80029ae <I2C_MasterRequestWrite+0x2a>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d003      	beq.n	80029ae <I2C_MasterRequestWrite+0x2a>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029ac:	d108      	bne.n	80029c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e00b      	b.n	80029d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	d107      	bne.n	80029d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f91d 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fe:	d103      	bne.n	8002a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e035      	b.n	8002a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a14:	d108      	bne.n	8002a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	e01b      	b.n	8002a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a28:	897b      	ldrh	r3, [r7, #10]
 8002a2a:	11db      	asrs	r3, r3, #7
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f003 0306 	and.w	r3, r3, #6
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f063 030f 	orn	r3, r3, #15
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <I2C_MasterRequestWrite+0xfc>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f943 	bl	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e010      	b.n	8002a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <I2C_MasterRequestWrite+0x100>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f933 	bl	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	00010008 	.word	0x00010008
 8002a84:	00010002 	.word	0x00010002

08002a88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d006      	beq.n	8002ac2 <I2C_MasterRequestRead+0x3a>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d003      	beq.n	8002ac2 <I2C_MasterRequestRead+0x3a>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac0:	d108      	bne.n	8002ad4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e00b      	b.n	8002aec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	2b11      	cmp	r3, #17
 8002ada:	d107      	bne.n	8002aec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f893 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b12:	d103      	bne.n	8002b1c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e079      	b.n	8002c14 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b28:	d108      	bne.n	8002b3c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b2a:	897b      	ldrh	r3, [r7, #10]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	611a      	str	r2, [r3, #16]
 8002b3a:	e05f      	b.n	8002bfc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	11db      	asrs	r3, r3, #7
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f003 0306 	and.w	r3, r3, #6
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f063 030f 	orn	r3, r3, #15
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4930      	ldr	r1, [pc, #192]	; (8002c1c <I2C_MasterRequestRead+0x194>)
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f8b9 	bl	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e054      	b.n	8002c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4929      	ldr	r1, [pc, #164]	; (8002c20 <I2C_MasterRequestRead+0x198>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f8a9 	bl	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e044      	b.n	8002c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f831 	bl	8002c24 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00d      	beq.n	8002be4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd6:	d103      	bne.n	8002be0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e017      	b.n	8002c14 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002be4:	897b      	ldrh	r3, [r7, #10]
 8002be6:	11db      	asrs	r3, r3, #7
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0306 	and.w	r3, r3, #6
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f063 030e 	orn	r3, r3, #14
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <I2C_MasterRequestRead+0x198>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f865 	bl	8002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	00010008 	.word	0x00010008
 8002c20:	00010002 	.word	0x00010002

08002c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c34:	e025      	b.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d021      	beq.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe ff69 	bl	8001b14 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e023      	b.n	8002cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10d      	bne.n	8002ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	e00c      	b.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d0b6      	beq.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce0:	e051      	b.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf0:	d123      	bne.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f043 0204 	orr.w	r2, r3, #4
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e046      	b.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d021      	beq.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d42:	f7fe fee7 	bl	8001b14 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e020      	b.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10c      	bne.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	e00b      	b.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d18d      	bne.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ddc:	e02d      	b.n	8002e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f8ce 	bl	8002f80 <I2C_IsAcknowledgeFailed>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e02d      	b.n	8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d021      	beq.n	8002e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fe8d 	bl	8001b14 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d116      	bne.n	8002e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f043 0220 	orr.w	r2, r3, #32
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e007      	b.n	8002e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	2b80      	cmp	r3, #128	; 0x80
 8002e46:	d1ca      	bne.n	8002dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e5e:	e02d      	b.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f88d 	bl	8002f80 <I2C_IsAcknowledgeFailed>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e02d      	b.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d021      	beq.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e78:	f7fe fe4c 	bl	8001b14 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d302      	bcc.n	8002e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e007      	b.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d1ca      	bne.n	8002e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee0:	e042      	b.n	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d119      	bne.n	8002f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0210 	mvn.w	r2, #16
 8002ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e029      	b.n	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f24:	f7fe fdf6 	bl	8001b14 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d302      	bcc.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d116      	bne.n	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e007      	b.n	8002f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b40      	cmp	r3, #64	; 0x40
 8002f74:	d1b5      	bne.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d11b      	bne.n	8002fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e26c      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 8087 	beq.w	800310a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffc:	4b92      	ldr	r3, [pc, #584]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b04      	cmp	r3, #4
 8003006:	d00c      	beq.n	8003022 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003008:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d112      	bne.n	800303a <HAL_RCC_OscConfig+0x5e>
 8003014:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d10b      	bne.n	800303a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003022:	4b89      	ldr	r3, [pc, #548]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d06c      	beq.n	8003108 <HAL_RCC_OscConfig+0x12c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d168      	bne.n	8003108 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e246      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x76>
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7f      	ldr	r2, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e02e      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x98>
 800305a:	4b7b      	ldr	r3, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a7a      	ldr	r2, [pc, #488]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b78      	ldr	r3, [pc, #480]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a77      	ldr	r2, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0xbc>
 800307e:	4b72      	ldr	r3, [pc, #456]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a71      	ldr	r2, [pc, #452]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xd4>
 8003098:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe fd2c 	bl	8001b14 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe fd28 	bl	8001b14 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e1fa      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe4>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fd18 	bl	8001b14 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe fd14 	bl	8001b14 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1e6      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x10c>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003116:	4b4c      	ldr	r3, [pc, #304]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003122:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x18c>
 800312e:	4b46      	ldr	r3, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1ba      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4939      	ldr	r1, [pc, #228]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x270>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fe fccd 	bl	8001b14 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe fcc9 	bl	8001b14 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e19b      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4927      	ldr	r1, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCC_OscConfig+0x270>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fcac 	bl	8001b14 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe fca8 	bl	8001b14 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e17a      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03a      	beq.n	8003260 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d019      	beq.n	8003226 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_RCC_OscConfig+0x274>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fe fc8c 	bl	8001b14 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003200:	f7fe fc88 	bl	8001b14 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e15a      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCC_OscConfig+0x26c>)
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f000 fac4 	bl	80037ac <RCC_Delay>
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_OscConfig+0x274>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322c:	f7fe fc72 	bl	8001b14 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003232:	e00f      	b.n	8003254 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7fe fc6e 	bl	8001b14 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d908      	bls.n	8003254 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e140      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	42420000 	.word	0x42420000
 8003250:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b9e      	ldr	r3, [pc, #632]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e9      	bne.n	8003234 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a6 	beq.w	80033ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b97      	ldr	r3, [pc, #604]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10d      	bne.n	800329a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b94      	ldr	r3, [pc, #592]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4a93      	ldr	r2, [pc, #588]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	61d3      	str	r3, [r2, #28]
 800328a:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329a:	4b8e      	ldr	r3, [pc, #568]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d118      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a6:	4b8b      	ldr	r3, [pc, #556]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a8a      	ldr	r2, [pc, #552]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fc2f 	bl	8001b14 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fe fc2b 	bl	8001b14 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0fd      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032cc:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <HAL_RCC_OscConfig+0x4f8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x312>
 80032e0:	4b7b      	ldr	r3, [pc, #492]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4a7a      	ldr	r2, [pc, #488]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6213      	str	r3, [r2, #32]
 80032ec:	e02d      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x334>
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6213      	str	r3, [r2, #32]
 8003302:	4b73      	ldr	r3, [pc, #460]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a72      	ldr	r2, [pc, #456]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	f023 0304 	bic.w	r3, r3, #4
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	e01c      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b05      	cmp	r3, #5
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x356>
 8003318:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a6c      	ldr	r2, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	f043 0304 	orr.w	r3, r3, #4
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6213      	str	r3, [r2, #32]
 8003330:	e00b      	b.n	800334a <HAL_RCC_OscConfig+0x36e>
 8003332:	4b67      	ldr	r3, [pc, #412]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6213      	str	r3, [r2, #32]
 800333e:	4b64      	ldr	r3, [pc, #400]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d015      	beq.n	800337e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe fbdf 	bl	8001b14 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335a:	f7fe fbdb 	bl	8001b14 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f241 3288 	movw	r2, #5000	; 0x1388
 8003368:	4293      	cmp	r3, r2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e0ab      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	4b57      	ldr	r3, [pc, #348]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ee      	beq.n	800335a <HAL_RCC_OscConfig+0x37e>
 800337c:	e014      	b.n	80033a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fe fbc9 	bl	8001b14 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	e00a      	b.n	800339c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fe fbc5 	bl	8001b14 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	; 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e095      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ee      	bne.n	8003386 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d105      	bne.n	80033ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ae:	4b48      	ldr	r3, [pc, #288]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8081 	beq.w	80034c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c4:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d061      	beq.n	8003494 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d146      	bne.n	8003466 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d8:	4b3f      	ldr	r3, [pc, #252]	; (80034d8 <HAL_RCC_OscConfig+0x4fc>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe fb99 	bl	8001b14 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fe fb95 	bl	8001b14 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e067      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d108      	bne.n	8003420 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800340e:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	492d      	ldr	r1, [pc, #180]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a19      	ldr	r1, [r3, #32]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	430b      	orrs	r3, r1
 8003432:	4927      	ldr	r1, [pc, #156]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003438:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <HAL_RCC_OscConfig+0x4fc>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fb69 	bl	8001b14 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fb65 	bl	8001b14 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e037      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x46a>
 8003464:	e02f      	b.n	80034c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_RCC_OscConfig+0x4fc>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fb52 	bl	8001b14 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe fb4e 	bl	8001b14 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e020      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0x498>
 8003492:	e018      	b.n	80034c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e013      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_OscConfig+0x4f4>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
 80034d8:	42420060 	.word	0x42420060

080034dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d0      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b6a      	ldr	r3, [pc, #424]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d910      	bls.n	8003520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 0207 	bic.w	r2, r3, #7
 8003506:	4965      	ldr	r1, [pc, #404]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b8      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003538:	4b59      	ldr	r3, [pc, #356]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003542:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003550:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a52      	ldr	r2, [pc, #328]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800355a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355c:	4b50      	ldr	r3, [pc, #320]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	494d      	ldr	r1, [pc, #308]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d040      	beq.n	80035fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d115      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e07f      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	4b41      	ldr	r3, [pc, #260]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e073      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	4b3d      	ldr	r3, [pc, #244]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e06b      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b39      	ldr	r3, [pc, #228]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4936      	ldr	r1, [pc, #216]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035cc:	f7fe faa2 	bl	8001b14 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fa9e 	bl	8001b14 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e053      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d210      	bcs.n	800362c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 0207 	bic.w	r2, r3, #7
 8003612:	4922      	ldr	r1, [pc, #136]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e032      	b.n	8003692 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003638:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4916      	ldr	r1, [pc, #88]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800366a:	f000 f821 	bl	80036b0 <HAL_RCC_GetSysClockFreq>
 800366e:	4602      	mov	r2, r0
 8003670:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	490a      	ldr	r1, [pc, #40]	; (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	5ccb      	ldrb	r3, [r1, r3]
 800367e:	fa22 f303 	lsr.w	r3, r2, r3
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fa00 	bl	8001a90 <HAL_InitTick>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40022000 	.word	0x40022000
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08004798 	.word	0x08004798
 80036a8:	20000000 	.word	0x20000000
 80036ac:	20000004 	.word	0x20000004

080036b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b0:	b490      	push	{r4, r7}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036b8:	1d3c      	adds	r4, r7, #4
 80036ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036c0:	f240 2301 	movw	r3, #513	; 0x201
 80036c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x40>
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x46>
 80036ee:	e02d      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f2:	623b      	str	r3, [r7, #32]
      break;
 80036f4:	e02d      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	0c9b      	lsrs	r3, r3, #18
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003702:	4413      	add	r3, r2
 8003704:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003708:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0c5b      	lsrs	r3, r3, #17
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003722:	4413      	add	r3, r2
 8003724:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003728:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800372e:	fb02 f203 	mul.w	r2, r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e004      	b.n	8003746 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	623b      	str	r3, [r7, #32]
      break;
 800374a:	e002      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800374e:	623b      	str	r3, [r7, #32]
      break;
 8003750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003752:	6a3b      	ldr	r3, [r7, #32]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bc90      	pop	{r4, r7}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	08004788 	.word	0x08004788
 8003764:	40021000 	.word	0x40021000
 8003768:	007a1200 	.word	0x007a1200
 800376c:	003d0900 	.word	0x003d0900

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b02      	ldr	r3, [pc, #8]	; (8003780 <HAL_RCC_GetHCLKFreq+0x10>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	20000000 	.word	0x20000000

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003788:	f7ff fff2 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	080047a8 	.word	0x080047a8

080037ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037b4:	4b0a      	ldr	r3, [pc, #40]	; (80037e0 <RCC_Delay+0x34>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <RCC_Delay+0x38>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	0a5b      	lsrs	r3, r3, #9
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c8:	bf00      	nop
  }
  while (Delay --);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	60fa      	str	r2, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f9      	bne.n	80037c8 <RCC_Delay+0x1c>
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	20000000 	.word	0x20000000
 80037e4:	10624dd3 	.word	0x10624dd3

080037e8 <__errno>:
 80037e8:	4b01      	ldr	r3, [pc, #4]	; (80037f0 <__errno+0x8>)
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2000000c 	.word	0x2000000c

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	2600      	movs	r6, #0
 80037f8:	4d0c      	ldr	r5, [pc, #48]	; (800382c <__libc_init_array+0x38>)
 80037fa:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <__libc_init_array+0x3c>)
 80037fc:	1b64      	subs	r4, r4, r5
 80037fe:	10a4      	asrs	r4, r4, #2
 8003800:	42a6      	cmp	r6, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	f000 ffb2 	bl	800476c <_init>
 8003808:	2600      	movs	r6, #0
 800380a:	4d0a      	ldr	r5, [pc, #40]	; (8003834 <__libc_init_array+0x40>)
 800380c:	4c0a      	ldr	r4, [pc, #40]	; (8003838 <__libc_init_array+0x44>)
 800380e:	1b64      	subs	r4, r4, r5
 8003810:	10a4      	asrs	r4, r4, #2
 8003812:	42a6      	cmp	r6, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f855 3b04 	ldr.w	r3, [r5], #4
 800381c:	4798      	blx	r3
 800381e:	3601      	adds	r6, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f855 3b04 	ldr.w	r3, [r5], #4
 8003826:	4798      	blx	r3
 8003828:	3601      	adds	r6, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	080047f8 	.word	0x080047f8
 8003830:	080047f8 	.word	0x080047f8
 8003834:	080047f8 	.word	0x080047f8
 8003838:	080047fc 	.word	0x080047fc

0800383c <memset>:
 800383c:	4603      	mov	r3, r0
 800383e:	4402      	add	r2, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <pow>:
 800384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003850:	461f      	mov	r7, r3
 8003852:	4680      	mov	r8, r0
 8003854:	4689      	mov	r9, r1
 8003856:	4616      	mov	r6, r2
 8003858:	f000 f8a6 	bl	80039a8 <__ieee754_pow>
 800385c:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <pow+0x148>)
 800385e:	4604      	mov	r4, r0
 8003860:	f993 3000 	ldrsb.w	r3, [r3]
 8003864:	460d      	mov	r5, r1
 8003866:	3301      	adds	r3, #1
 8003868:	d015      	beq.n	8003896 <pow+0x4a>
 800386a:	4632      	mov	r2, r6
 800386c:	463b      	mov	r3, r7
 800386e:	4630      	mov	r0, r6
 8003870:	4639      	mov	r1, r7
 8003872:	f7fd f8c3 	bl	80009fc <__aeabi_dcmpun>
 8003876:	b970      	cbnz	r0, 8003896 <pow+0x4a>
 8003878:	4642      	mov	r2, r8
 800387a:	464b      	mov	r3, r9
 800387c:	4640      	mov	r0, r8
 800387e:	4649      	mov	r1, r9
 8003880:	f7fd f8bc 	bl	80009fc <__aeabi_dcmpun>
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	b148      	cbz	r0, 800389e <pow+0x52>
 800388a:	4630      	mov	r0, r6
 800388c:	4639      	mov	r1, r7
 800388e:	f7fd f883 	bl	8000998 <__aeabi_dcmpeq>
 8003892:	2800      	cmp	r0, #0
 8003894:	d17b      	bne.n	800398e <pow+0x142>
 8003896:	4620      	mov	r0, r4
 8003898:	4629      	mov	r1, r5
 800389a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	f7fd f879 	bl	8000998 <__aeabi_dcmpeq>
 80038a6:	b1e0      	cbz	r0, 80038e2 <pow+0x96>
 80038a8:	2200      	movs	r2, #0
 80038aa:	2300      	movs	r3, #0
 80038ac:	4630      	mov	r0, r6
 80038ae:	4639      	mov	r1, r7
 80038b0:	f7fd f872 	bl	8000998 <__aeabi_dcmpeq>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d16a      	bne.n	800398e <pow+0x142>
 80038b8:	4630      	mov	r0, r6
 80038ba:	4639      	mov	r1, r7
 80038bc:	f000 fe39 	bl	8004532 <finite>
 80038c0:	2800      	cmp	r0, #0
 80038c2:	d0e8      	beq.n	8003896 <pow+0x4a>
 80038c4:	2200      	movs	r2, #0
 80038c6:	2300      	movs	r3, #0
 80038c8:	4630      	mov	r0, r6
 80038ca:	4639      	mov	r1, r7
 80038cc:	f7fd f86e 	bl	80009ac <__aeabi_dcmplt>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d0e0      	beq.n	8003896 <pow+0x4a>
 80038d4:	f7ff ff88 	bl	80037e8 <__errno>
 80038d8:	2321      	movs	r3, #33	; 0x21
 80038da:	2400      	movs	r4, #0
 80038dc:	6003      	str	r3, [r0, #0]
 80038de:	4d2e      	ldr	r5, [pc, #184]	; (8003998 <pow+0x14c>)
 80038e0:	e7d9      	b.n	8003896 <pow+0x4a>
 80038e2:	4620      	mov	r0, r4
 80038e4:	4629      	mov	r1, r5
 80038e6:	f000 fe24 	bl	8004532 <finite>
 80038ea:	bba8      	cbnz	r0, 8003958 <pow+0x10c>
 80038ec:	4640      	mov	r0, r8
 80038ee:	4649      	mov	r1, r9
 80038f0:	f000 fe1f 	bl	8004532 <finite>
 80038f4:	b380      	cbz	r0, 8003958 <pow+0x10c>
 80038f6:	4630      	mov	r0, r6
 80038f8:	4639      	mov	r1, r7
 80038fa:	f000 fe1a 	bl	8004532 <finite>
 80038fe:	b358      	cbz	r0, 8003958 <pow+0x10c>
 8003900:	4622      	mov	r2, r4
 8003902:	462b      	mov	r3, r5
 8003904:	4620      	mov	r0, r4
 8003906:	4629      	mov	r1, r5
 8003908:	f7fd f878 	bl	80009fc <__aeabi_dcmpun>
 800390c:	b160      	cbz	r0, 8003928 <pow+0xdc>
 800390e:	f7ff ff6b 	bl	80037e8 <__errno>
 8003912:	2321      	movs	r3, #33	; 0x21
 8003914:	2200      	movs	r2, #0
 8003916:	6003      	str	r3, [r0, #0]
 8003918:	2300      	movs	r3, #0
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	f7fc fefd 	bl	800071c <__aeabi_ddiv>
 8003922:	4604      	mov	r4, r0
 8003924:	460d      	mov	r5, r1
 8003926:	e7b6      	b.n	8003896 <pow+0x4a>
 8003928:	f7ff ff5e 	bl	80037e8 <__errno>
 800392c:	2322      	movs	r3, #34	; 0x22
 800392e:	2200      	movs	r2, #0
 8003930:	6003      	str	r3, [r0, #0]
 8003932:	4649      	mov	r1, r9
 8003934:	2300      	movs	r3, #0
 8003936:	4640      	mov	r0, r8
 8003938:	f7fd f838 	bl	80009ac <__aeabi_dcmplt>
 800393c:	2400      	movs	r4, #0
 800393e:	b148      	cbz	r0, 8003954 <pow+0x108>
 8003940:	4630      	mov	r0, r6
 8003942:	4639      	mov	r1, r7
 8003944:	f000 fe02 	bl	800454c <rint>
 8003948:	4632      	mov	r2, r6
 800394a:	463b      	mov	r3, r7
 800394c:	f7fd f824 	bl	8000998 <__aeabi_dcmpeq>
 8003950:	2800      	cmp	r0, #0
 8003952:	d0c4      	beq.n	80038de <pow+0x92>
 8003954:	4d11      	ldr	r5, [pc, #68]	; (800399c <pow+0x150>)
 8003956:	e79e      	b.n	8003896 <pow+0x4a>
 8003958:	2200      	movs	r2, #0
 800395a:	2300      	movs	r3, #0
 800395c:	4620      	mov	r0, r4
 800395e:	4629      	mov	r1, r5
 8003960:	f7fd f81a 	bl	8000998 <__aeabi_dcmpeq>
 8003964:	2800      	cmp	r0, #0
 8003966:	d096      	beq.n	8003896 <pow+0x4a>
 8003968:	4640      	mov	r0, r8
 800396a:	4649      	mov	r1, r9
 800396c:	f000 fde1 	bl	8004532 <finite>
 8003970:	2800      	cmp	r0, #0
 8003972:	d090      	beq.n	8003896 <pow+0x4a>
 8003974:	4630      	mov	r0, r6
 8003976:	4639      	mov	r1, r7
 8003978:	f000 fddb 	bl	8004532 <finite>
 800397c:	2800      	cmp	r0, #0
 800397e:	d08a      	beq.n	8003896 <pow+0x4a>
 8003980:	f7ff ff32 	bl	80037e8 <__errno>
 8003984:	2322      	movs	r3, #34	; 0x22
 8003986:	2400      	movs	r4, #0
 8003988:	2500      	movs	r5, #0
 800398a:	6003      	str	r3, [r0, #0]
 800398c:	e783      	b.n	8003896 <pow+0x4a>
 800398e:	2400      	movs	r4, #0
 8003990:	4d03      	ldr	r5, [pc, #12]	; (80039a0 <pow+0x154>)
 8003992:	e780      	b.n	8003896 <pow+0x4a>
 8003994:	20000070 	.word	0x20000070
 8003998:	fff00000 	.word	0xfff00000
 800399c:	7ff00000 	.word	0x7ff00000
 80039a0:	3ff00000 	.word	0x3ff00000
 80039a4:	00000000 	.word	0x00000000

080039a8 <__ieee754_pow>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	b093      	sub	sp, #76	; 0x4c
 80039ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039b2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80039b6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80039ba:	ea55 0302 	orrs.w	r3, r5, r2
 80039be:	4607      	mov	r7, r0
 80039c0:	4688      	mov	r8, r1
 80039c2:	f000 84bf 	beq.w	8004344 <__ieee754_pow+0x99c>
 80039c6:	4b7e      	ldr	r3, [pc, #504]	; (8003bc0 <__ieee754_pow+0x218>)
 80039c8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80039cc:	429c      	cmp	r4, r3
 80039ce:	4689      	mov	r9, r1
 80039d0:	4682      	mov	sl, r0
 80039d2:	dc09      	bgt.n	80039e8 <__ieee754_pow+0x40>
 80039d4:	d103      	bne.n	80039de <__ieee754_pow+0x36>
 80039d6:	b978      	cbnz	r0, 80039f8 <__ieee754_pow+0x50>
 80039d8:	42a5      	cmp	r5, r4
 80039da:	dd02      	ble.n	80039e2 <__ieee754_pow+0x3a>
 80039dc:	e00c      	b.n	80039f8 <__ieee754_pow+0x50>
 80039de:	429d      	cmp	r5, r3
 80039e0:	dc02      	bgt.n	80039e8 <__ieee754_pow+0x40>
 80039e2:	429d      	cmp	r5, r3
 80039e4:	d10e      	bne.n	8003a04 <__ieee754_pow+0x5c>
 80039e6:	b16a      	cbz	r2, 8003a04 <__ieee754_pow+0x5c>
 80039e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80039ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80039f0:	ea54 030a 	orrs.w	r3, r4, sl
 80039f4:	f000 84a6 	beq.w	8004344 <__ieee754_pow+0x99c>
 80039f8:	4872      	ldr	r0, [pc, #456]	; (8003bc4 <__ieee754_pow+0x21c>)
 80039fa:	b013      	add	sp, #76	; 0x4c
 80039fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a00:	f000 bd9e 	b.w	8004540 <nan>
 8003a04:	f1b9 0f00 	cmp.w	r9, #0
 8003a08:	da39      	bge.n	8003a7e <__ieee754_pow+0xd6>
 8003a0a:	4b6f      	ldr	r3, [pc, #444]	; (8003bc8 <__ieee754_pow+0x220>)
 8003a0c:	429d      	cmp	r5, r3
 8003a0e:	dc54      	bgt.n	8003aba <__ieee754_pow+0x112>
 8003a10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003a14:	429d      	cmp	r5, r3
 8003a16:	f340 84a6 	ble.w	8004366 <__ieee754_pow+0x9be>
 8003a1a:	152b      	asrs	r3, r5, #20
 8003a1c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003a20:	2b14      	cmp	r3, #20
 8003a22:	dd0f      	ble.n	8003a44 <__ieee754_pow+0x9c>
 8003a24:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003a28:	fa22 f103 	lsr.w	r1, r2, r3
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	4293      	cmp	r3, r2
 8003a32:	f040 8498 	bne.w	8004366 <__ieee754_pow+0x9be>
 8003a36:	f001 0101 	and.w	r1, r1, #1
 8003a3a:	f1c1 0302 	rsb	r3, r1, #2
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	b182      	cbz	r2, 8003a64 <__ieee754_pow+0xbc>
 8003a42:	e05e      	b.n	8003b02 <__ieee754_pow+0x15a>
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	d15a      	bne.n	8003afe <__ieee754_pow+0x156>
 8003a48:	f1c3 0314 	rsb	r3, r3, #20
 8003a4c:	fa45 f103 	asr.w	r1, r5, r3
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	42ab      	cmp	r3, r5
 8003a56:	f040 8483 	bne.w	8004360 <__ieee754_pow+0x9b8>
 8003a5a:	f001 0101 	and.w	r1, r1, #1
 8003a5e:	f1c1 0302 	rsb	r3, r1, #2
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <__ieee754_pow+0x224>)
 8003a66:	429d      	cmp	r5, r3
 8003a68:	d130      	bne.n	8003acc <__ieee754_pow+0x124>
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	f280 8474 	bge.w	8004358 <__ieee754_pow+0x9b0>
 8003a70:	463a      	mov	r2, r7
 8003a72:	4643      	mov	r3, r8
 8003a74:	2000      	movs	r0, #0
 8003a76:	4955      	ldr	r1, [pc, #340]	; (8003bcc <__ieee754_pow+0x224>)
 8003a78:	f7fc fe50 	bl	800071c <__aeabi_ddiv>
 8003a7c:	e02f      	b.n	8003ade <__ieee754_pow+0x136>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d13d      	bne.n	8003b02 <__ieee754_pow+0x15a>
 8003a86:	4b4e      	ldr	r3, [pc, #312]	; (8003bc0 <__ieee754_pow+0x218>)
 8003a88:	429d      	cmp	r5, r3
 8003a8a:	d1eb      	bne.n	8003a64 <__ieee754_pow+0xbc>
 8003a8c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003a90:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003a94:	ea53 030a 	orrs.w	r3, r3, sl
 8003a98:	f000 8454 	beq.w	8004344 <__ieee754_pow+0x99c>
 8003a9c:	4b4c      	ldr	r3, [pc, #304]	; (8003bd0 <__ieee754_pow+0x228>)
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	dd0d      	ble.n	8003abe <__ieee754_pow+0x116>
 8003aa2:	2e00      	cmp	r6, #0
 8003aa4:	f280 8454 	bge.w	8004350 <__ieee754_pow+0x9a8>
 8003aa8:	f04f 0b00 	mov.w	fp, #0
 8003aac:	f04f 0c00 	mov.w	ip, #0
 8003ab0:	4658      	mov	r0, fp
 8003ab2:	4661      	mov	r1, ip
 8003ab4:	b013      	add	sp, #76	; 0x4c
 8003ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aba:	2302      	movs	r3, #2
 8003abc:	e7e0      	b.n	8003a80 <__ieee754_pow+0xd8>
 8003abe:	2e00      	cmp	r6, #0
 8003ac0:	daf2      	bge.n	8003aa8 <__ieee754_pow+0x100>
 8003ac2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003ac6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003aca:	e7f1      	b.n	8003ab0 <__ieee754_pow+0x108>
 8003acc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003ad0:	d108      	bne.n	8003ae4 <__ieee754_pow+0x13c>
 8003ad2:	463a      	mov	r2, r7
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	4641      	mov	r1, r8
 8003ada:	f7fc fcf5 	bl	80004c8 <__aeabi_dmul>
 8003ade:	4683      	mov	fp, r0
 8003ae0:	468c      	mov	ip, r1
 8003ae2:	e7e5      	b.n	8003ab0 <__ieee754_pow+0x108>
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	; (8003bd4 <__ieee754_pow+0x22c>)
 8003ae6:	429e      	cmp	r6, r3
 8003ae8:	d10b      	bne.n	8003b02 <__ieee754_pow+0x15a>
 8003aea:	f1b9 0f00 	cmp.w	r9, #0
 8003aee:	db08      	blt.n	8003b02 <__ieee754_pow+0x15a>
 8003af0:	4638      	mov	r0, r7
 8003af2:	4641      	mov	r1, r8
 8003af4:	b013      	add	sp, #76	; 0x4c
 8003af6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	f000 bc6b 	b.w	80043d4 <__ieee754_sqrt>
 8003afe:	2300      	movs	r3, #0
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4638      	mov	r0, r7
 8003b04:	4641      	mov	r1, r8
 8003b06:	f000 fd11 	bl	800452c <fabs>
 8003b0a:	4683      	mov	fp, r0
 8003b0c:	468c      	mov	ip, r1
 8003b0e:	f1ba 0f00 	cmp.w	sl, #0
 8003b12:	d129      	bne.n	8003b68 <__ieee754_pow+0x1c0>
 8003b14:	b124      	cbz	r4, 8003b20 <__ieee754_pow+0x178>
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <__ieee754_pow+0x224>)
 8003b18:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d123      	bne.n	8003b68 <__ieee754_pow+0x1c0>
 8003b20:	2e00      	cmp	r6, #0
 8003b22:	da07      	bge.n	8003b34 <__ieee754_pow+0x18c>
 8003b24:	465a      	mov	r2, fp
 8003b26:	4663      	mov	r3, ip
 8003b28:	2000      	movs	r0, #0
 8003b2a:	4928      	ldr	r1, [pc, #160]	; (8003bcc <__ieee754_pow+0x224>)
 8003b2c:	f7fc fdf6 	bl	800071c <__aeabi_ddiv>
 8003b30:	4683      	mov	fp, r0
 8003b32:	468c      	mov	ip, r1
 8003b34:	f1b9 0f00 	cmp.w	r9, #0
 8003b38:	daba      	bge.n	8003ab0 <__ieee754_pow+0x108>
 8003b3a:	9b00      	ldr	r3, [sp, #0]
 8003b3c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003b40:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003b44:	4323      	orrs	r3, r4
 8003b46:	d108      	bne.n	8003b5a <__ieee754_pow+0x1b2>
 8003b48:	465a      	mov	r2, fp
 8003b4a:	4663      	mov	r3, ip
 8003b4c:	4658      	mov	r0, fp
 8003b4e:	4661      	mov	r1, ip
 8003b50:	f7fc fb02 	bl	8000158 <__aeabi_dsub>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	e78e      	b.n	8003a78 <__ieee754_pow+0xd0>
 8003b5a:	9b00      	ldr	r3, [sp, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d1a7      	bne.n	8003ab0 <__ieee754_pow+0x108>
 8003b60:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003b64:	469c      	mov	ip, r3
 8003b66:	e7a3      	b.n	8003ab0 <__ieee754_pow+0x108>
 8003b68:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8003b70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b72:	9b00      	ldr	r3, [sp, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d104      	bne.n	8003b82 <__ieee754_pow+0x1da>
 8003b78:	463a      	mov	r2, r7
 8003b7a:	4643      	mov	r3, r8
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	4641      	mov	r1, r8
 8003b80:	e7e6      	b.n	8003b50 <__ieee754_pow+0x1a8>
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <__ieee754_pow+0x230>)
 8003b84:	429d      	cmp	r5, r3
 8003b86:	f340 80f9 	ble.w	8003d7c <__ieee754_pow+0x3d4>
 8003b8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003b8e:	429d      	cmp	r5, r3
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <__ieee754_pow+0x228>)
 8003b92:	dd09      	ble.n	8003ba8 <__ieee754_pow+0x200>
 8003b94:	429c      	cmp	r4, r3
 8003b96:	dc0c      	bgt.n	8003bb2 <__ieee754_pow+0x20a>
 8003b98:	2e00      	cmp	r6, #0
 8003b9a:	da85      	bge.n	8003aa8 <__ieee754_pow+0x100>
 8003b9c:	a306      	add	r3, pc, #24	; (adr r3, 8003bb8 <__ieee754_pow+0x210>)
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	e798      	b.n	8003ada <__ieee754_pow+0x132>
 8003ba8:	429c      	cmp	r4, r3
 8003baa:	dbf5      	blt.n	8003b98 <__ieee754_pow+0x1f0>
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <__ieee754_pow+0x224>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	dd14      	ble.n	8003bdc <__ieee754_pow+0x234>
 8003bb2:	2e00      	cmp	r6, #0
 8003bb4:	dcf2      	bgt.n	8003b9c <__ieee754_pow+0x1f4>
 8003bb6:	e777      	b.n	8003aa8 <__ieee754_pow+0x100>
 8003bb8:	8800759c 	.word	0x8800759c
 8003bbc:	7e37e43c 	.word	0x7e37e43c
 8003bc0:	7ff00000 	.word	0x7ff00000
 8003bc4:	080047b0 	.word	0x080047b0
 8003bc8:	433fffff 	.word	0x433fffff
 8003bcc:	3ff00000 	.word	0x3ff00000
 8003bd0:	3fefffff 	.word	0x3fefffff
 8003bd4:	3fe00000 	.word	0x3fe00000
 8003bd8:	41e00000 	.word	0x41e00000
 8003bdc:	4661      	mov	r1, ip
 8003bde:	2200      	movs	r2, #0
 8003be0:	4658      	mov	r0, fp
 8003be2:	4b61      	ldr	r3, [pc, #388]	; (8003d68 <__ieee754_pow+0x3c0>)
 8003be4:	f7fc fab8 	bl	8000158 <__aeabi_dsub>
 8003be8:	a355      	add	r3, pc, #340	; (adr r3, 8003d40 <__ieee754_pow+0x398>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	4604      	mov	r4, r0
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	f7fc fc69 	bl	80004c8 <__aeabi_dmul>
 8003bf6:	a354      	add	r3, pc, #336	; (adr r3, 8003d48 <__ieee754_pow+0x3a0>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	460f      	mov	r7, r1
 8003c00:	4620      	mov	r0, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7fc fc60 	bl	80004c8 <__aeabi_dmul>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	4682      	mov	sl, r0
 8003c0c:	468b      	mov	fp, r1
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	4b56      	ldr	r3, [pc, #344]	; (8003d6c <__ieee754_pow+0x3c4>)
 8003c14:	f7fc fc58 	bl	80004c8 <__aeabi_dmul>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	a14c      	add	r1, pc, #304	; (adr r1, 8003d50 <__ieee754_pow+0x3a8>)
 8003c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c22:	f7fc fa99 	bl	8000158 <__aeabi_dsub>
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f7fc fc4d 	bl	80004c8 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	2000      	movs	r0, #0
 8003c34:	494e      	ldr	r1, [pc, #312]	; (8003d70 <__ieee754_pow+0x3c8>)
 8003c36:	f7fc fa8f 	bl	8000158 <__aeabi_dsub>
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	4680      	mov	r8, r0
 8003c40:	4689      	mov	r9, r1
 8003c42:	4620      	mov	r0, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	f7fc fc3f 	bl	80004c8 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4640      	mov	r0, r8
 8003c50:	4649      	mov	r1, r9
 8003c52:	f7fc fc39 	bl	80004c8 <__aeabi_dmul>
 8003c56:	a340      	add	r3, pc, #256	; (adr r3, 8003d58 <__ieee754_pow+0x3b0>)
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f7fc fc34 	bl	80004c8 <__aeabi_dmul>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4650      	mov	r0, sl
 8003c66:	4659      	mov	r1, fp
 8003c68:	f7fc fa76 	bl	8000158 <__aeabi_dsub>
 8003c6c:	f04f 0a00 	mov.w	sl, #0
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4604      	mov	r4, r0
 8003c76:	460d      	mov	r5, r1
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc fa6e 	bl	800015c <__adddf3>
 8003c80:	4632      	mov	r2, r6
 8003c82:	463b      	mov	r3, r7
 8003c84:	4650      	mov	r0, sl
 8003c86:	468b      	mov	fp, r1
 8003c88:	f7fc fa66 	bl	8000158 <__aeabi_dsub>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc fa60 	bl	8000158 <__aeabi_dsub>
 8003c98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c9c:	9b00      	ldr	r3, [sp, #0]
 8003c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f04f 0600 	mov.w	r6, #0
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	bf0c      	ite	eq
 8003cae:	4b31      	ldreq	r3, [pc, #196]	; (8003d74 <__ieee754_pow+0x3cc>)
 8003cb0:	4b2d      	ldrne	r3, [pc, #180]	; (8003d68 <__ieee754_pow+0x3c0>)
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cba:	e9cd 2300 	strd	r2, r3, [sp]
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	f7fc fa49 	bl	8000158 <__aeabi_dsub>
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	465b      	mov	r3, fp
 8003cca:	f7fc fbfd 	bl	80004c8 <__aeabi_dmul>
 8003cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	4689      	mov	r9, r1
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	4629      	mov	r1, r5
 8003cda:	f7fc fbf5 	bl	80004c8 <__aeabi_dmul>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	f7fc fa39 	bl	800015c <__adddf3>
 8003cea:	4632      	mov	r2, r6
 8003cec:	463b      	mov	r3, r7
 8003cee:	4680      	mov	r8, r0
 8003cf0:	4689      	mov	r9, r1
 8003cf2:	4650      	mov	r0, sl
 8003cf4:	4659      	mov	r1, fp
 8003cf6:	f7fc fbe7 	bl	80004c8 <__aeabi_dmul>
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	460d      	mov	r5, r1
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4602      	mov	r2, r0
 8003d02:	4649      	mov	r1, r9
 8003d04:	4640      	mov	r0, r8
 8003d06:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003d0a:	f7fc fa27 	bl	800015c <__adddf3>
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <__ieee754_pow+0x3d0>)
 8003d10:	4682      	mov	sl, r0
 8003d12:	4299      	cmp	r1, r3
 8003d14:	460f      	mov	r7, r1
 8003d16:	460e      	mov	r6, r1
 8003d18:	f340 82ed 	ble.w	80042f6 <__ieee754_pow+0x94e>
 8003d1c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003d20:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003d24:	4303      	orrs	r3, r0
 8003d26:	f000 81e7 	beq.w	80040f8 <__ieee754_pow+0x750>
 8003d2a:	a30d      	add	r3, pc, #52	; (adr r3, 8003d60 <__ieee754_pow+0x3b8>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d34:	f7fc fbc8 	bl	80004c8 <__aeabi_dmul>
 8003d38:	a309      	add	r3, pc, #36	; (adr r3, 8003d60 <__ieee754_pow+0x3b8>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	e6cc      	b.n	8003ada <__ieee754_pow+0x132>
 8003d40:	60000000 	.word	0x60000000
 8003d44:	3ff71547 	.word	0x3ff71547
 8003d48:	f85ddf44 	.word	0xf85ddf44
 8003d4c:	3e54ae0b 	.word	0x3e54ae0b
 8003d50:	55555555 	.word	0x55555555
 8003d54:	3fd55555 	.word	0x3fd55555
 8003d58:	652b82fe 	.word	0x652b82fe
 8003d5c:	3ff71547 	.word	0x3ff71547
 8003d60:	8800759c 	.word	0x8800759c
 8003d64:	7e37e43c 	.word	0x7e37e43c
 8003d68:	3ff00000 	.word	0x3ff00000
 8003d6c:	3fd00000 	.word	0x3fd00000
 8003d70:	3fe00000 	.word	0x3fe00000
 8003d74:	bff00000 	.word	0xbff00000
 8003d78:	408fffff 	.word	0x408fffff
 8003d7c:	4bd4      	ldr	r3, [pc, #848]	; (80040d0 <__ieee754_pow+0x728>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	ea09 0303 	and.w	r3, r9, r3
 8003d84:	b943      	cbnz	r3, 8003d98 <__ieee754_pow+0x3f0>
 8003d86:	4658      	mov	r0, fp
 8003d88:	4661      	mov	r1, ip
 8003d8a:	4bd2      	ldr	r3, [pc, #840]	; (80040d4 <__ieee754_pow+0x72c>)
 8003d8c:	f7fc fb9c 	bl	80004c8 <__aeabi_dmul>
 8003d90:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003d94:	4683      	mov	fp, r0
 8003d96:	460c      	mov	r4, r1
 8003d98:	1523      	asrs	r3, r4, #20
 8003d9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003d9e:	4413      	add	r3, r2
 8003da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003da2:	4bcd      	ldr	r3, [pc, #820]	; (80040d8 <__ieee754_pow+0x730>)
 8003da4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003da8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003dac:	429c      	cmp	r4, r3
 8003dae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003db2:	dd08      	ble.n	8003dc6 <__ieee754_pow+0x41e>
 8003db4:	4bc9      	ldr	r3, [pc, #804]	; (80040dc <__ieee754_pow+0x734>)
 8003db6:	429c      	cmp	r4, r3
 8003db8:	f340 819c 	ble.w	80040f4 <__ieee754_pow+0x74c>
 8003dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dc6:	2600      	movs	r6, #0
 8003dc8:	00f3      	lsls	r3, r6, #3
 8003dca:	930d      	str	r3, [sp, #52]	; 0x34
 8003dcc:	4bc4      	ldr	r3, [pc, #784]	; (80040e0 <__ieee754_pow+0x738>)
 8003dce:	4658      	mov	r0, fp
 8003dd0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003dd4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dd8:	4629      	mov	r1, r5
 8003dda:	461a      	mov	r2, r3
 8003ddc:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003de0:	4623      	mov	r3, r4
 8003de2:	f7fc f9b9 	bl	8000158 <__aeabi_dsub>
 8003de6:	46da      	mov	sl, fp
 8003de8:	462b      	mov	r3, r5
 8003dea:	4652      	mov	r2, sl
 8003dec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003df0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003df4:	f7fc f9b2 	bl	800015c <__adddf3>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	49b9      	ldr	r1, [pc, #740]	; (80040e4 <__ieee754_pow+0x73c>)
 8003e00:	f7fc fc8c 	bl	800071c <__aeabi_ddiv>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e10:	f7fc fb5a 	bl	80004c8 <__aeabi_dmul>
 8003e14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003e18:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003e1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003e20:	2300      	movs	r3, #0
 8003e22:	2200      	movs	r2, #0
 8003e24:	46ab      	mov	fp, r5
 8003e26:	106d      	asrs	r5, r5, #1
 8003e28:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003e2c:	9304      	str	r3, [sp, #16]
 8003e2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003e32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003e36:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	4614      	mov	r4, r2
 8003e40:	461d      	mov	r5, r3
 8003e42:	f7fc fb41 	bl	80004c8 <__aeabi_dmul>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e4e:	f7fc f983 	bl	8000158 <__aeabi_dsub>
 8003e52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e56:	4606      	mov	r6, r0
 8003e58:	460f      	mov	r7, r1
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7fc f97b 	bl	8000158 <__aeabi_dsub>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4650      	mov	r0, sl
 8003e68:	4659      	mov	r1, fp
 8003e6a:	f7fc f975 	bl	8000158 <__aeabi_dsub>
 8003e6e:	4642      	mov	r2, r8
 8003e70:	464b      	mov	r3, r9
 8003e72:	f7fc fb29 	bl	80004c8 <__aeabi_dmul>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	4639      	mov	r1, r7
 8003e7e:	f7fc f96b 	bl	8000158 <__aeabi_dsub>
 8003e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e86:	f7fc fb1f 	bl	80004c8 <__aeabi_dmul>
 8003e8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7fc fb17 	bl	80004c8 <__aeabi_dmul>
 8003e9a:	a37b      	add	r3, pc, #492	; (adr r3, 8004088 <__ieee754_pow+0x6e0>)
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	460d      	mov	r5, r1
 8003ea4:	f7fc fb10 	bl	80004c8 <__aeabi_dmul>
 8003ea8:	a379      	add	r3, pc, #484	; (adr r3, 8004090 <__ieee754_pow+0x6e8>)
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f7fc f955 	bl	800015c <__adddf3>
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	f7fc fb07 	bl	80004c8 <__aeabi_dmul>
 8003eba:	a377      	add	r3, pc, #476	; (adr r3, 8004098 <__ieee754_pow+0x6f0>)
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f7fc f94c 	bl	800015c <__adddf3>
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	f7fc fafe 	bl	80004c8 <__aeabi_dmul>
 8003ecc:	a374      	add	r3, pc, #464	; (adr r3, 80040a0 <__ieee754_pow+0x6f8>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc f943 	bl	800015c <__adddf3>
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f7fc faf5 	bl	80004c8 <__aeabi_dmul>
 8003ede:	a372      	add	r3, pc, #456	; (adr r3, 80040a8 <__ieee754_pow+0x700>)
 8003ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee4:	f7fc f93a 	bl	800015c <__adddf3>
 8003ee8:	4622      	mov	r2, r4
 8003eea:	462b      	mov	r3, r5
 8003eec:	f7fc faec 	bl	80004c8 <__aeabi_dmul>
 8003ef0:	a36f      	add	r3, pc, #444	; (adr r3, 80040b0 <__ieee754_pow+0x708>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f7fc f931 	bl	800015c <__adddf3>
 8003efa:	4622      	mov	r2, r4
 8003efc:	4606      	mov	r6, r0
 8003efe:	460f      	mov	r7, r1
 8003f00:	462b      	mov	r3, r5
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc fadf 	bl	80004c8 <__aeabi_dmul>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4630      	mov	r0, r6
 8003f10:	4639      	mov	r1, r7
 8003f12:	f7fc fad9 	bl	80004c8 <__aeabi_dmul>
 8003f16:	4604      	mov	r4, r0
 8003f18:	460d      	mov	r5, r1
 8003f1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	f7fc f91b 	bl	800015c <__adddf3>
 8003f26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f2a:	f7fc facd 	bl	80004c8 <__aeabi_dmul>
 8003f2e:	4622      	mov	r2, r4
 8003f30:	462b      	mov	r3, r5
 8003f32:	f7fc f913 	bl	800015c <__adddf3>
 8003f36:	4642      	mov	r2, r8
 8003f38:	4606      	mov	r6, r0
 8003f3a:	460f      	mov	r7, r1
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4649      	mov	r1, r9
 8003f42:	f7fc fac1 	bl	80004c8 <__aeabi_dmul>
 8003f46:	2200      	movs	r2, #0
 8003f48:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <__ieee754_pow+0x740>)
 8003f4a:	4682      	mov	sl, r0
 8003f4c:	468b      	mov	fp, r1
 8003f4e:	f7fc f905 	bl	800015c <__adddf3>
 8003f52:	4632      	mov	r2, r6
 8003f54:	463b      	mov	r3, r7
 8003f56:	f7fc f901 	bl	800015c <__adddf3>
 8003f5a:	9c04      	ldr	r4, [sp, #16]
 8003f5c:	460d      	mov	r5, r1
 8003f5e:	4622      	mov	r2, r4
 8003f60:	460b      	mov	r3, r1
 8003f62:	4640      	mov	r0, r8
 8003f64:	4649      	mov	r1, r9
 8003f66:	f7fc faaf 	bl	80004c8 <__aeabi_dmul>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	4680      	mov	r8, r0
 8003f6e:	4689      	mov	r9, r1
 8003f70:	4620      	mov	r0, r4
 8003f72:	4629      	mov	r1, r5
 8003f74:	4b5c      	ldr	r3, [pc, #368]	; (80040e8 <__ieee754_pow+0x740>)
 8003f76:	f7fc f8ef 	bl	8000158 <__aeabi_dsub>
 8003f7a:	4652      	mov	r2, sl
 8003f7c:	465b      	mov	r3, fp
 8003f7e:	f7fc f8eb 	bl	8000158 <__aeabi_dsub>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4630      	mov	r0, r6
 8003f88:	4639      	mov	r1, r7
 8003f8a:	f7fc f8e5 	bl	8000158 <__aeabi_dsub>
 8003f8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f92:	f7fc fa99 	bl	80004c8 <__aeabi_dmul>
 8003f96:	4622      	mov	r2, r4
 8003f98:	4606      	mov	r6, r0
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003fa0:	462b      	mov	r3, r5
 8003fa2:	f7fc fa91 	bl	80004c8 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4630      	mov	r0, r6
 8003fac:	4639      	mov	r1, r7
 8003fae:	f7fc f8d5 	bl	800015c <__adddf3>
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	460f      	mov	r7, r1
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4640      	mov	r0, r8
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	f7fc f8cd 	bl	800015c <__adddf3>
 8003fc2:	a33d      	add	r3, pc, #244	; (adr r3, 80040b8 <__ieee754_pow+0x710>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	9c04      	ldr	r4, [sp, #16]
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7fc fa7b 	bl	80004c8 <__aeabi_dmul>
 8003fd2:	4642      	mov	r2, r8
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f8bb 	bl	8000158 <__aeabi_dsub>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	4639      	mov	r1, r7
 8003fea:	f7fc f8b5 	bl	8000158 <__aeabi_dsub>
 8003fee:	a334      	add	r3, pc, #208	; (adr r3, 80040c0 <__ieee754_pow+0x718>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc fa68 	bl	80004c8 <__aeabi_dmul>
 8003ff8:	a333      	add	r3, pc, #204	; (adr r3, 80040c8 <__ieee754_pow+0x720>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	4606      	mov	r6, r0
 8004000:	460f      	mov	r7, r1
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc fa5f 	bl	80004c8 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4630      	mov	r0, r6
 8004010:	4639      	mov	r1, r7
 8004012:	f7fc f8a3 	bl	800015c <__adddf3>
 8004016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004018:	4b34      	ldr	r3, [pc, #208]	; (80040ec <__ieee754_pow+0x744>)
 800401a:	4413      	add	r3, r2
 800401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004020:	f7fc f89c 	bl	800015c <__adddf3>
 8004024:	4680      	mov	r8, r0
 8004026:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004028:	4689      	mov	r9, r1
 800402a:	f7fc f9e3 	bl	80003f4 <__aeabi_i2d>
 800402e:	4604      	mov	r4, r0
 8004030:	460d      	mov	r5, r1
 8004032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004034:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <__ieee754_pow+0x748>)
 8004036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800403a:	4413      	add	r3, r2
 800403c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	f7fc f88a 	bl	800015c <__adddf3>
 8004048:	4632      	mov	r2, r6
 800404a:	463b      	mov	r3, r7
 800404c:	f7fc f886 	bl	800015c <__adddf3>
 8004050:	4622      	mov	r2, r4
 8004052:	462b      	mov	r3, r5
 8004054:	f7fc f882 	bl	800015c <__adddf3>
 8004058:	f8dd a010 	ldr.w	sl, [sp, #16]
 800405c:	4622      	mov	r2, r4
 800405e:	462b      	mov	r3, r5
 8004060:	4650      	mov	r0, sl
 8004062:	468b      	mov	fp, r1
 8004064:	f7fc f878 	bl	8000158 <__aeabi_dsub>
 8004068:	4632      	mov	r2, r6
 800406a:	463b      	mov	r3, r7
 800406c:	f7fc f874 	bl	8000158 <__aeabi_dsub>
 8004070:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004074:	f7fc f870 	bl	8000158 <__aeabi_dsub>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4640      	mov	r0, r8
 800407e:	4649      	mov	r1, r9
 8004080:	e608      	b.n	8003c94 <__ieee754_pow+0x2ec>
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
 8004088:	4a454eef 	.word	0x4a454eef
 800408c:	3fca7e28 	.word	0x3fca7e28
 8004090:	93c9db65 	.word	0x93c9db65
 8004094:	3fcd864a 	.word	0x3fcd864a
 8004098:	a91d4101 	.word	0xa91d4101
 800409c:	3fd17460 	.word	0x3fd17460
 80040a0:	518f264d 	.word	0x518f264d
 80040a4:	3fd55555 	.word	0x3fd55555
 80040a8:	db6fabff 	.word	0xdb6fabff
 80040ac:	3fdb6db6 	.word	0x3fdb6db6
 80040b0:	33333303 	.word	0x33333303
 80040b4:	3fe33333 	.word	0x3fe33333
 80040b8:	e0000000 	.word	0xe0000000
 80040bc:	3feec709 	.word	0x3feec709
 80040c0:	dc3a03fd 	.word	0xdc3a03fd
 80040c4:	3feec709 	.word	0x3feec709
 80040c8:	145b01f5 	.word	0x145b01f5
 80040cc:	be3e2fe0 	.word	0xbe3e2fe0
 80040d0:	7ff00000 	.word	0x7ff00000
 80040d4:	43400000 	.word	0x43400000
 80040d8:	0003988e 	.word	0x0003988e
 80040dc:	000bb679 	.word	0x000bb679
 80040e0:	080047b8 	.word	0x080047b8
 80040e4:	3ff00000 	.word	0x3ff00000
 80040e8:	40080000 	.word	0x40080000
 80040ec:	080047d8 	.word	0x080047d8
 80040f0:	080047c8 	.word	0x080047c8
 80040f4:	2601      	movs	r6, #1
 80040f6:	e667      	b.n	8003dc8 <__ieee754_pow+0x420>
 80040f8:	a39d      	add	r3, pc, #628	; (adr r3, 8004370 <__ieee754_pow+0x9c8>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	4640      	mov	r0, r8
 8004100:	4649      	mov	r1, r9
 8004102:	f7fc f82b 	bl	800015c <__adddf3>
 8004106:	4622      	mov	r2, r4
 8004108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800410c:	462b      	mov	r3, r5
 800410e:	4650      	mov	r0, sl
 8004110:	4639      	mov	r1, r7
 8004112:	f7fc f821 	bl	8000158 <__aeabi_dsub>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800411e:	f7fc fc63 	bl	80009e8 <__aeabi_dcmpgt>
 8004122:	2800      	cmp	r0, #0
 8004124:	f47f ae01 	bne.w	8003d2a <__ieee754_pow+0x382>
 8004128:	4aa5      	ldr	r2, [pc, #660]	; (80043c0 <__ieee754_pow+0xa18>)
 800412a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800412e:	4293      	cmp	r3, r2
 8004130:	f340 8103 	ble.w	800433a <__ieee754_pow+0x992>
 8004134:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004138:	2000      	movs	r0, #0
 800413a:	151b      	asrs	r3, r3, #20
 800413c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004140:	fa4a f303 	asr.w	r3, sl, r3
 8004144:	4433      	add	r3, r6
 8004146:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800414a:	4f9e      	ldr	r7, [pc, #632]	; (80043c4 <__ieee754_pow+0xa1c>)
 800414c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004150:	4117      	asrs	r7, r2
 8004152:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004156:	ea23 0107 	bic.w	r1, r3, r7
 800415a:	f1c2 0214 	rsb	r2, r2, #20
 800415e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004162:	460b      	mov	r3, r1
 8004164:	fa4a fa02 	asr.w	sl, sl, r2
 8004168:	2e00      	cmp	r6, #0
 800416a:	4602      	mov	r2, r0
 800416c:	4629      	mov	r1, r5
 800416e:	4620      	mov	r0, r4
 8004170:	bfb8      	it	lt
 8004172:	f1ca 0a00 	rsblt	sl, sl, #0
 8004176:	f7fb ffef 	bl	8000158 <__aeabi_dsub>
 800417a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800417e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004182:	2400      	movs	r4, #0
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	f7fb ffe8 	bl	800015c <__adddf3>
 800418c:	a37a      	add	r3, pc, #488	; (adr r3, 8004378 <__ieee754_pow+0x9d0>)
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	4620      	mov	r0, r4
 8004194:	460d      	mov	r5, r1
 8004196:	f7fc f997 	bl	80004c8 <__aeabi_dmul>
 800419a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	4620      	mov	r0, r4
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7fb ffd7 	bl	8000158 <__aeabi_dsub>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f7fb ffd1 	bl	8000158 <__aeabi_dsub>
 80041b6:	a372      	add	r3, pc, #456	; (adr r3, 8004380 <__ieee754_pow+0x9d8>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc f984 	bl	80004c8 <__aeabi_dmul>
 80041c0:	a371      	add	r3, pc, #452	; (adr r3, 8004388 <__ieee754_pow+0x9e0>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	4680      	mov	r8, r0
 80041c8:	4689      	mov	r9, r1
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	f7fc f97b 	bl	80004c8 <__aeabi_dmul>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	f7fb ffbf 	bl	800015c <__adddf3>
 80041de:	4604      	mov	r4, r0
 80041e0:	460d      	mov	r5, r1
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4630      	mov	r0, r6
 80041e8:	4639      	mov	r1, r7
 80041ea:	f7fb ffb7 	bl	800015c <__adddf3>
 80041ee:	4632      	mov	r2, r6
 80041f0:	463b      	mov	r3, r7
 80041f2:	4680      	mov	r8, r0
 80041f4:	4689      	mov	r9, r1
 80041f6:	f7fb ffaf 	bl	8000158 <__aeabi_dsub>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fb ffa9 	bl	8000158 <__aeabi_dsub>
 8004206:	4642      	mov	r2, r8
 8004208:	4606      	mov	r6, r0
 800420a:	460f      	mov	r7, r1
 800420c:	464b      	mov	r3, r9
 800420e:	4640      	mov	r0, r8
 8004210:	4649      	mov	r1, r9
 8004212:	f7fc f959 	bl	80004c8 <__aeabi_dmul>
 8004216:	a35e      	add	r3, pc, #376	; (adr r3, 8004390 <__ieee754_pow+0x9e8>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	4604      	mov	r4, r0
 800421e:	460d      	mov	r5, r1
 8004220:	f7fc f952 	bl	80004c8 <__aeabi_dmul>
 8004224:	a35c      	add	r3, pc, #368	; (adr r3, 8004398 <__ieee754_pow+0x9f0>)
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f7fb ff95 	bl	8000158 <__aeabi_dsub>
 800422e:	4622      	mov	r2, r4
 8004230:	462b      	mov	r3, r5
 8004232:	f7fc f949 	bl	80004c8 <__aeabi_dmul>
 8004236:	a35a      	add	r3, pc, #360	; (adr r3, 80043a0 <__ieee754_pow+0x9f8>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	f7fb ff8e 	bl	800015c <__adddf3>
 8004240:	4622      	mov	r2, r4
 8004242:	462b      	mov	r3, r5
 8004244:	f7fc f940 	bl	80004c8 <__aeabi_dmul>
 8004248:	a357      	add	r3, pc, #348	; (adr r3, 80043a8 <__ieee754_pow+0xa00>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fb ff83 	bl	8000158 <__aeabi_dsub>
 8004252:	4622      	mov	r2, r4
 8004254:	462b      	mov	r3, r5
 8004256:	f7fc f937 	bl	80004c8 <__aeabi_dmul>
 800425a:	a355      	add	r3, pc, #340	; (adr r3, 80043b0 <__ieee754_pow+0xa08>)
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f7fb ff7c 	bl	800015c <__adddf3>
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	f7fc f92e 	bl	80004c8 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4640      	mov	r0, r8
 8004272:	4649      	mov	r1, r9
 8004274:	f7fb ff70 	bl	8000158 <__aeabi_dsub>
 8004278:	4604      	mov	r4, r0
 800427a:	460d      	mov	r5, r1
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4640      	mov	r0, r8
 8004282:	4649      	mov	r1, r9
 8004284:	f7fc f920 	bl	80004c8 <__aeabi_dmul>
 8004288:	2200      	movs	r2, #0
 800428a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800428e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fb ff5f 	bl	8000158 <__aeabi_dsub>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042a2:	f7fc fa3b 	bl	800071c <__aeabi_ddiv>
 80042a6:	4632      	mov	r2, r6
 80042a8:	4604      	mov	r4, r0
 80042aa:	460d      	mov	r5, r1
 80042ac:	463b      	mov	r3, r7
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fc f909 	bl	80004c8 <__aeabi_dmul>
 80042b6:	4632      	mov	r2, r6
 80042b8:	463b      	mov	r3, r7
 80042ba:	f7fb ff4f 	bl	800015c <__adddf3>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4620      	mov	r0, r4
 80042c4:	4629      	mov	r1, r5
 80042c6:	f7fb ff47 	bl	8000158 <__aeabi_dsub>
 80042ca:	4642      	mov	r2, r8
 80042cc:	464b      	mov	r3, r9
 80042ce:	f7fb ff43 	bl	8000158 <__aeabi_dsub>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	2000      	movs	r0, #0
 80042d8:	493b      	ldr	r1, [pc, #236]	; (80043c8 <__ieee754_pow+0xa20>)
 80042da:	f7fb ff3d 	bl	8000158 <__aeabi_dsub>
 80042de:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80042e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80042e6:	da2b      	bge.n	8004340 <__ieee754_pow+0x998>
 80042e8:	4652      	mov	r2, sl
 80042ea:	f000 f9b9 	bl	8004660 <scalbn>
 80042ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042f2:	f7ff bbf2 	b.w	8003ada <__ieee754_pow+0x132>
 80042f6:	4b35      	ldr	r3, [pc, #212]	; (80043cc <__ieee754_pow+0xa24>)
 80042f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80042fc:	429f      	cmp	r7, r3
 80042fe:	f77f af13 	ble.w	8004128 <__ieee754_pow+0x780>
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <__ieee754_pow+0xa28>)
 8004304:	440b      	add	r3, r1
 8004306:	4303      	orrs	r3, r0
 8004308:	d00b      	beq.n	8004322 <__ieee754_pow+0x97a>
 800430a:	a32b      	add	r3, pc, #172	; (adr r3, 80043b8 <__ieee754_pow+0xa10>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004314:	f7fc f8d8 	bl	80004c8 <__aeabi_dmul>
 8004318:	a327      	add	r3, pc, #156	; (adr r3, 80043b8 <__ieee754_pow+0xa10>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f7ff bbdc 	b.w	8003ada <__ieee754_pow+0x132>
 8004322:	4622      	mov	r2, r4
 8004324:	462b      	mov	r3, r5
 8004326:	f7fb ff17 	bl	8000158 <__aeabi_dsub>
 800432a:	4642      	mov	r2, r8
 800432c:	464b      	mov	r3, r9
 800432e:	f7fc fb51 	bl	80009d4 <__aeabi_dcmpge>
 8004332:	2800      	cmp	r0, #0
 8004334:	f43f aef8 	beq.w	8004128 <__ieee754_pow+0x780>
 8004338:	e7e7      	b.n	800430a <__ieee754_pow+0x962>
 800433a:	f04f 0a00 	mov.w	sl, #0
 800433e:	e71e      	b.n	800417e <__ieee754_pow+0x7d6>
 8004340:	4621      	mov	r1, r4
 8004342:	e7d4      	b.n	80042ee <__ieee754_pow+0x946>
 8004344:	f04f 0b00 	mov.w	fp, #0
 8004348:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80043c8 <__ieee754_pow+0xa20>
 800434c:	f7ff bbb0 	b.w	8003ab0 <__ieee754_pow+0x108>
 8004350:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004354:	f7ff bbac 	b.w	8003ab0 <__ieee754_pow+0x108>
 8004358:	4638      	mov	r0, r7
 800435a:	4641      	mov	r1, r8
 800435c:	f7ff bbbf 	b.w	8003ade <__ieee754_pow+0x136>
 8004360:	9200      	str	r2, [sp, #0]
 8004362:	f7ff bb7f 	b.w	8003a64 <__ieee754_pow+0xbc>
 8004366:	2300      	movs	r3, #0
 8004368:	f7ff bb69 	b.w	8003a3e <__ieee754_pow+0x96>
 800436c:	f3af 8000 	nop.w
 8004370:	652b82fe 	.word	0x652b82fe
 8004374:	3c971547 	.word	0x3c971547
 8004378:	00000000 	.word	0x00000000
 800437c:	3fe62e43 	.word	0x3fe62e43
 8004380:	fefa39ef 	.word	0xfefa39ef
 8004384:	3fe62e42 	.word	0x3fe62e42
 8004388:	0ca86c39 	.word	0x0ca86c39
 800438c:	be205c61 	.word	0xbe205c61
 8004390:	72bea4d0 	.word	0x72bea4d0
 8004394:	3e663769 	.word	0x3e663769
 8004398:	c5d26bf1 	.word	0xc5d26bf1
 800439c:	3ebbbd41 	.word	0x3ebbbd41
 80043a0:	af25de2c 	.word	0xaf25de2c
 80043a4:	3f11566a 	.word	0x3f11566a
 80043a8:	16bebd93 	.word	0x16bebd93
 80043ac:	3f66c16c 	.word	0x3f66c16c
 80043b0:	5555553e 	.word	0x5555553e
 80043b4:	3fc55555 	.word	0x3fc55555
 80043b8:	c2f8f359 	.word	0xc2f8f359
 80043bc:	01a56e1f 	.word	0x01a56e1f
 80043c0:	3fe00000 	.word	0x3fe00000
 80043c4:	000fffff 	.word	0x000fffff
 80043c8:	3ff00000 	.word	0x3ff00000
 80043cc:	4090cbff 	.word	0x4090cbff
 80043d0:	3f6f3400 	.word	0x3f6f3400

080043d4 <__ieee754_sqrt>:
 80043d4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8004528 <__ieee754_sqrt+0x154>
 80043d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043dc:	ea3c 0c01 	bics.w	ip, ip, r1
 80043e0:	460b      	mov	r3, r1
 80043e2:	4606      	mov	r6, r0
 80043e4:	460d      	mov	r5, r1
 80043e6:	460a      	mov	r2, r1
 80043e8:	4607      	mov	r7, r0
 80043ea:	4604      	mov	r4, r0
 80043ec:	d10e      	bne.n	800440c <__ieee754_sqrt+0x38>
 80043ee:	4602      	mov	r2, r0
 80043f0:	f7fc f86a 	bl	80004c8 <__aeabi_dmul>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4630      	mov	r0, r6
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fb feae 	bl	800015c <__adddf3>
 8004400:	4606      	mov	r6, r0
 8004402:	460d      	mov	r5, r1
 8004404:	4630      	mov	r0, r6
 8004406:	4629      	mov	r1, r5
 8004408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800440c:	2900      	cmp	r1, #0
 800440e:	dc0d      	bgt.n	800442c <__ieee754_sqrt+0x58>
 8004410:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004414:	ea5c 0707 	orrs.w	r7, ip, r7
 8004418:	d0f4      	beq.n	8004404 <__ieee754_sqrt+0x30>
 800441a:	b139      	cbz	r1, 800442c <__ieee754_sqrt+0x58>
 800441c:	4602      	mov	r2, r0
 800441e:	f7fb fe9b 	bl	8000158 <__aeabi_dsub>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	f7fc f979 	bl	800071c <__aeabi_ddiv>
 800442a:	e7e9      	b.n	8004400 <__ieee754_sqrt+0x2c>
 800442c:	1512      	asrs	r2, r2, #20
 800442e:	d074      	beq.n	800451a <__ieee754_sqrt+0x146>
 8004430:	2000      	movs	r0, #0
 8004432:	07d5      	lsls	r5, r2, #31
 8004434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004438:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800443c:	bf5e      	ittt	pl
 800443e:	0fe3      	lsrpl	r3, r4, #31
 8004440:	0064      	lslpl	r4, r4, #1
 8004442:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8004446:	0fe3      	lsrs	r3, r4, #31
 8004448:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800444c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8004450:	2516      	movs	r5, #22
 8004452:	4601      	mov	r1, r0
 8004454:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004458:	1076      	asrs	r6, r6, #1
 800445a:	0064      	lsls	r4, r4, #1
 800445c:	188f      	adds	r7, r1, r2
 800445e:	429f      	cmp	r7, r3
 8004460:	bfde      	ittt	le
 8004462:	1bdb      	suble	r3, r3, r7
 8004464:	18b9      	addle	r1, r7, r2
 8004466:	1880      	addle	r0, r0, r2
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	3d01      	subs	r5, #1
 800446c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004470:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004474:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004478:	d1f0      	bne.n	800445c <__ieee754_sqrt+0x88>
 800447a:	462a      	mov	r2, r5
 800447c:	f04f 0e20 	mov.w	lr, #32
 8004480:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004484:	428b      	cmp	r3, r1
 8004486:	eb07 0c05 	add.w	ip, r7, r5
 800448a:	dc02      	bgt.n	8004492 <__ieee754_sqrt+0xbe>
 800448c:	d113      	bne.n	80044b6 <__ieee754_sqrt+0xe2>
 800448e:	45a4      	cmp	ip, r4
 8004490:	d811      	bhi.n	80044b6 <__ieee754_sqrt+0xe2>
 8004492:	f1bc 0f00 	cmp.w	ip, #0
 8004496:	eb0c 0507 	add.w	r5, ip, r7
 800449a:	da43      	bge.n	8004524 <__ieee754_sqrt+0x150>
 800449c:	2d00      	cmp	r5, #0
 800449e:	db41      	blt.n	8004524 <__ieee754_sqrt+0x150>
 80044a0:	f101 0801 	add.w	r8, r1, #1
 80044a4:	1a5b      	subs	r3, r3, r1
 80044a6:	4641      	mov	r1, r8
 80044a8:	45a4      	cmp	ip, r4
 80044aa:	bf88      	it	hi
 80044ac:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80044b0:	eba4 040c 	sub.w	r4, r4, ip
 80044b4:	443a      	add	r2, r7
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f1be 0e01 	subs.w	lr, lr, #1
 80044bc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80044c0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 80044c4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80044c8:	d1dc      	bne.n	8004484 <__ieee754_sqrt+0xb0>
 80044ca:	4323      	orrs	r3, r4
 80044cc:	d006      	beq.n	80044dc <__ieee754_sqrt+0x108>
 80044ce:	1c54      	adds	r4, r2, #1
 80044d0:	bf0b      	itete	eq
 80044d2:	4672      	moveq	r2, lr
 80044d4:	3201      	addne	r2, #1
 80044d6:	3001      	addeq	r0, #1
 80044d8:	f022 0201 	bicne.w	r2, r2, #1
 80044dc:	1043      	asrs	r3, r0, #1
 80044de:	07c1      	lsls	r1, r0, #31
 80044e0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80044e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80044e8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80044ec:	bf48      	it	mi
 80044ee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80044f2:	4610      	mov	r0, r2
 80044f4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80044f8:	e782      	b.n	8004400 <__ieee754_sqrt+0x2c>
 80044fa:	0ae3      	lsrs	r3, r4, #11
 80044fc:	3915      	subs	r1, #21
 80044fe:	0564      	lsls	r4, r4, #21
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0fa      	beq.n	80044fa <__ieee754_sqrt+0x126>
 8004504:	02de      	lsls	r6, r3, #11
 8004506:	d50a      	bpl.n	800451e <__ieee754_sqrt+0x14a>
 8004508:	f1c2 0020 	rsb	r0, r2, #32
 800450c:	fa24 f000 	lsr.w	r0, r4, r0
 8004510:	1e55      	subs	r5, r2, #1
 8004512:	4094      	lsls	r4, r2
 8004514:	4303      	orrs	r3, r0
 8004516:	1b4a      	subs	r2, r1, r5
 8004518:	e78a      	b.n	8004430 <__ieee754_sqrt+0x5c>
 800451a:	4611      	mov	r1, r2
 800451c:	e7f0      	b.n	8004500 <__ieee754_sqrt+0x12c>
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	3201      	adds	r2, #1
 8004522:	e7ef      	b.n	8004504 <__ieee754_sqrt+0x130>
 8004524:	4688      	mov	r8, r1
 8004526:	e7bd      	b.n	80044a4 <__ieee754_sqrt+0xd0>
 8004528:	7ff00000 	.word	0x7ff00000

0800452c <fabs>:
 800452c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004530:	4770      	bx	lr

08004532 <finite>:
 8004532:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004536:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800453a:	0fc0      	lsrs	r0, r0, #31
 800453c:	4770      	bx	lr
	...

08004540 <nan>:
 8004540:	2000      	movs	r0, #0
 8004542:	4901      	ldr	r1, [pc, #4]	; (8004548 <nan+0x8>)
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	7ff80000 	.word	0x7ff80000

0800454c <rint>:
 800454c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8004550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004552:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8004556:	2f13      	cmp	r7, #19
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	460c      	mov	r4, r1
 800455e:	4605      	mov	r5, r0
 8004560:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8004564:	dc59      	bgt.n	800461a <rint+0xce>
 8004566:	2f00      	cmp	r7, #0
 8004568:	da2a      	bge.n	80045c0 <rint+0x74>
 800456a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800456e:	4301      	orrs	r1, r0
 8004570:	d022      	beq.n	80045b8 <rint+0x6c>
 8004572:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8004576:	4301      	orrs	r1, r0
 8004578:	424d      	negs	r5, r1
 800457a:	430d      	orrs	r5, r1
 800457c:	4936      	ldr	r1, [pc, #216]	; (8004658 <rint+0x10c>)
 800457e:	0c5c      	lsrs	r4, r3, #17
 8004580:	0b2d      	lsrs	r5, r5, #12
 8004582:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8004586:	0464      	lsls	r4, r4, #17
 8004588:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800458c:	ea45 0304 	orr.w	r3, r5, r4
 8004590:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004594:	4620      	mov	r0, r4
 8004596:	4629      	mov	r1, r5
 8004598:	f7fb fde0 	bl	800015c <__adddf3>
 800459c:	e9cd 0100 	strd	r0, r1, [sp]
 80045a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045a4:	462b      	mov	r3, r5
 80045a6:	4622      	mov	r2, r4
 80045a8:	f7fb fdd6 	bl	8000158 <__aeabi_dsub>
 80045ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80045b0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	b003      	add	sp, #12
 80045be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c0:	4926      	ldr	r1, [pc, #152]	; (800465c <rint+0x110>)
 80045c2:	4139      	asrs	r1, r7
 80045c4:	ea03 0001 	and.w	r0, r3, r1
 80045c8:	4310      	orrs	r0, r2
 80045ca:	d0f5      	beq.n	80045b8 <rint+0x6c>
 80045cc:	084b      	lsrs	r3, r1, #1
 80045ce:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 80045d2:	ea52 0501 	orrs.w	r5, r2, r1
 80045d6:	d00c      	beq.n	80045f2 <rint+0xa6>
 80045d8:	ea24 0303 	bic.w	r3, r4, r3
 80045dc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80045e0:	2f13      	cmp	r7, #19
 80045e2:	bf0c      	ite	eq
 80045e4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80045e8:	2500      	movne	r5, #0
 80045ea:	fa44 f707 	asr.w	r7, r4, r7
 80045ee:	ea43 0407 	orr.w	r4, r3, r7
 80045f2:	4919      	ldr	r1, [pc, #100]	; (8004658 <rint+0x10c>)
 80045f4:	4623      	mov	r3, r4
 80045f6:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80045fa:	462a      	mov	r2, r5
 80045fc:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004600:	4620      	mov	r0, r4
 8004602:	4629      	mov	r1, r5
 8004604:	f7fb fdaa 	bl	800015c <__adddf3>
 8004608:	e9cd 0100 	strd	r0, r1, [sp]
 800460c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004610:	4622      	mov	r2, r4
 8004612:	462b      	mov	r3, r5
 8004614:	f7fb fda0 	bl	8000158 <__aeabi_dsub>
 8004618:	e7cc      	b.n	80045b4 <rint+0x68>
 800461a:	2f33      	cmp	r7, #51	; 0x33
 800461c:	dd05      	ble.n	800462a <rint+0xde>
 800461e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8004622:	d1c9      	bne.n	80045b8 <rint+0x6c>
 8004624:	f7fb fd9a 	bl	800015c <__adddf3>
 8004628:	e7c4      	b.n	80045b4 <rint+0x68>
 800462a:	f04f 31ff 	mov.w	r1, #4294967295
 800462e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8004632:	fa21 f10c 	lsr.w	r1, r1, ip
 8004636:	4208      	tst	r0, r1
 8004638:	d0be      	beq.n	80045b8 <rint+0x6c>
 800463a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800463e:	bf18      	it	ne
 8004640:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8004644:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8004648:	bf1e      	ittt	ne
 800464a:	ea20 0303 	bicne.w	r3, r0, r3
 800464e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8004652:	ea43 050c 	orrne.w	r5, r3, ip
 8004656:	e7cc      	b.n	80045f2 <rint+0xa6>
 8004658:	080047e8 	.word	0x080047e8
 800465c:	000fffff 	.word	0x000fffff

08004660 <scalbn>:
 8004660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004662:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004666:	4604      	mov	r4, r0
 8004668:	460d      	mov	r5, r1
 800466a:	4617      	mov	r7, r2
 800466c:	460b      	mov	r3, r1
 800466e:	b996      	cbnz	r6, 8004696 <scalbn+0x36>
 8004670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004674:	4303      	orrs	r3, r0
 8004676:	d039      	beq.n	80046ec <scalbn+0x8c>
 8004678:	4b35      	ldr	r3, [pc, #212]	; (8004750 <scalbn+0xf0>)
 800467a:	2200      	movs	r2, #0
 800467c:	f7fb ff24 	bl	80004c8 <__aeabi_dmul>
 8004680:	4b34      	ldr	r3, [pc, #208]	; (8004754 <scalbn+0xf4>)
 8004682:	4604      	mov	r4, r0
 8004684:	429f      	cmp	r7, r3
 8004686:	460d      	mov	r5, r1
 8004688:	da0f      	bge.n	80046aa <scalbn+0x4a>
 800468a:	a32d      	add	r3, pc, #180	; (adr r3, 8004740 <scalbn+0xe0>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fb ff1a 	bl	80004c8 <__aeabi_dmul>
 8004694:	e006      	b.n	80046a4 <scalbn+0x44>
 8004696:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800469a:	4296      	cmp	r6, r2
 800469c:	d10a      	bne.n	80046b4 <scalbn+0x54>
 800469e:	4602      	mov	r2, r0
 80046a0:	f7fb fd5c 	bl	800015c <__adddf3>
 80046a4:	4604      	mov	r4, r0
 80046a6:	460d      	mov	r5, r1
 80046a8:	e020      	b.n	80046ec <scalbn+0x8c>
 80046aa:	460b      	mov	r3, r1
 80046ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80046b0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80046b4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80046b8:	19b9      	adds	r1, r7, r6
 80046ba:	4291      	cmp	r1, r2
 80046bc:	dd0e      	ble.n	80046dc <scalbn+0x7c>
 80046be:	a322      	add	r3, pc, #136	; (adr r3, 8004748 <scalbn+0xe8>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80046c8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80046cc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80046d0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80046d4:	4820      	ldr	r0, [pc, #128]	; (8004758 <scalbn+0xf8>)
 80046d6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80046da:	e7d9      	b.n	8004690 <scalbn+0x30>
 80046dc:	2900      	cmp	r1, #0
 80046de:	dd08      	ble.n	80046f2 <scalbn+0x92>
 80046e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80046f6:	da16      	bge.n	8004726 <scalbn+0xc6>
 80046f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046fc:	429f      	cmp	r7, r3
 80046fe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8004702:	dd08      	ble.n	8004716 <scalbn+0xb6>
 8004704:	4c15      	ldr	r4, [pc, #84]	; (800475c <scalbn+0xfc>)
 8004706:	4814      	ldr	r0, [pc, #80]	; (8004758 <scalbn+0xf8>)
 8004708:	f363 74df 	bfi	r4, r3, #31, #1
 800470c:	a30e      	add	r3, pc, #56	; (adr r3, 8004748 <scalbn+0xe8>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	4621      	mov	r1, r4
 8004714:	e7bc      	b.n	8004690 <scalbn+0x30>
 8004716:	4c12      	ldr	r4, [pc, #72]	; (8004760 <scalbn+0x100>)
 8004718:	4812      	ldr	r0, [pc, #72]	; (8004764 <scalbn+0x104>)
 800471a:	f363 74df 	bfi	r4, r3, #31, #1
 800471e:	a308      	add	r3, pc, #32	; (adr r3, 8004740 <scalbn+0xe0>)
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	e7f5      	b.n	8004712 <scalbn+0xb2>
 8004726:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800472a:	3136      	adds	r1, #54	; 0x36
 800472c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004730:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	2200      	movs	r2, #0
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <scalbn+0x108>)
 800473c:	e7a8      	b.n	8004690 <scalbn+0x30>
 800473e:	bf00      	nop
 8004740:	c2f8f359 	.word	0xc2f8f359
 8004744:	01a56e1f 	.word	0x01a56e1f
 8004748:	8800759c 	.word	0x8800759c
 800474c:	7e37e43c 	.word	0x7e37e43c
 8004750:	43500000 	.word	0x43500000
 8004754:	ffff3cb0 	.word	0xffff3cb0
 8004758:	8800759c 	.word	0x8800759c
 800475c:	7e37e43c 	.word	0x7e37e43c
 8004760:	01a56e1f 	.word	0x01a56e1f
 8004764:	c2f8f359 	.word	0xc2f8f359
 8004768:	3c900000 	.word	0x3c900000

0800476c <_init>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr

08004778 <_fini>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr
